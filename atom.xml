<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云主宰苍穹</title>
  
  <subtitle>Stay Hungry, Stay Foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://2694048168.github.io/"/>
  <updated>2020-10-02T16:01:12.774Z</updated>
  <id>https://2694048168.github.io/</id>
  
  <author>
    <name>云主宰苍穹</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anaconda环境隔离</title>
    <link href="https://2694048168.github.io/Anaconda%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BB/"/>
    <id>https://2694048168.github.io/Anaconda环境隔离/</id>
    <published>2020-10-02T14:31:58.000Z</published>
    <updated>2020-10-02T16:01:12.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><ul><li>针对每一个算法的实现需要不同的包以及版本</li><li>可以使用 Anaconda 创建不同的环境，进行环境隔离</li><li>可以使用 pip freeze 来导出环境的包配置</li><li>可以使用 pip install -r 来批量安装所需包配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进行版本隔离的 pipeline instance</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 0 创建环境</span><br><span class="line">conda create -n AlexNet python=3.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1 激活环境</span><br><span class="line">conda activate AlexNet</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2 安装所需包</span><br><span class="line">pip install -r package</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3 打开 Jupyter Notebook</span><br><span class="line"><span class="meta">#</span> 支持在 Jupyter 浏览器中查找到创建的环境隔离，并进行环境切换</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=tensorflow</span><br><span class="line">jupyter lab</span><br><span class="line"><span class="meta">#</span> 这样打开 jupyter 后，就能看到除了base环境的python创建之外</span><br><span class="line"><span class="meta">#</span> 还多了一个 tensorflow 环境的创建文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4 完成整个算法的实现</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5 导出算法的环境配置</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 6 上传整个算法实现到代码仓库</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 7 下次需要直接安装环境即可</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="Using-Anaconda"><a href="#Using-Anaconda" class="headerlink" title="Using Anaconda"></a>Using Anaconda</h2><ul><li>使用 Anaconda 进行Python版本环境隔离</li><li>使用 pip 国内镜像源（建议阿里云镜像）进行Python包管理</li><li>用户目录下 .condarc 文件替换为清华大学的 conda 镜像源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ul><li>创建环境</li><li>激活环境</li><li>查看环境</li><li>删除环境</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建环境 TensorFlow</span><br><span class="line"><span class="meta">#</span> -n 默认将环境创建在 Anaconda 已安装路径默认的 envs目录下</span><br><span class="line">conda create -n TensorFlow python=3.7</span><br><span class="line"><span class="meta">#</span> 使用 conda create --help 可知</span><br><span class="line"><span class="meta">#</span> 将环境安装到指定路径</span><br><span class="line">conda create --prefix=D:\python37\TensorFlow python=3.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 激活环境</span><br><span class="line"><span class="meta">#</span> Mac &amp; Linux OS</span><br><span class="line">source activate TensorFlow</span><br><span class="line"><span class="meta">#</span> Windows OS</span><br><span class="line">activate TensorFlow</span><br><span class="line"><span class="meta">#</span> 激活指定路径的环境</span><br><span class="line">activate D:\python36\py36</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看环境</span><br><span class="line">conda env list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除环境</span><br><span class="line">conda env remove -n TensorFlow</span><br><span class="line"><span class="meta">#</span> 删除指定路径的环境</span><br><span class="line">conda remove --prefix=D:\python37\TensorFlow --all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 退出环境</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;针对每一个算法的实现需要不同的包以及版本&lt;/li&gt;
&lt;li&gt;可以使用 Anaconda 创建不同的环境，进行环境隔离&lt;/
      
    
    </summary>
    
      <category term="Python" scheme="https://2694048168.github.io/categories/Python/"/>
    
    
      <category term="Anaconda" scheme="https://2694048168.github.io/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV源码编译</title>
    <link href="https://2694048168.github.io/OpenCV%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>https://2694048168.github.io/OpenCV源码编译/</id>
    <published>2020-08-21T12:46:43.000Z</published>
    <updated>2020-08-21T12:57:28.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>opencv-4.4.0 源码<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5jdi9vcGVuY3Y=" title="https://github.com/opencv/opencv">源码下载仓库<i class="fa fa-external-link"></i></span></p></li><li><p>opencv_contrib-4.4.0 源码<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5jdi9vcGVuY3ZfY29udHJpYg==" title="https://github.com/opencv/opencv_contrib">源码下载仓库<i class="fa fa-external-link"></i></span></p></li></ul><h2 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h2><p>cmake-gui</p><p>0、选择支持的环境</p><ul><li>vs2019</li><li>vs2017</li><li>codeblocks</li><li>codelite</li><li>MinGW Makefile</li><li>Unix Makefile</li><li>…</li></ul><p>1、添加Python3路径<br>在cmake-gui当中，点击Add Entry，填入编译选项名字PYTHON_DEFAULT_EXECUTABLE和系统中python 3的路径/usr/bin/python3.5 即可</p><p>2、添加扩展库路径<br>需要在cmake-gui中将编译选项OPENCV_EXTRA_MODULES_PATH填入contrib库所在的路径，比如/home/your-name/opencv_contrib-4.1.1/modules/</p><p>3、解决问题，下载不了的文件<br>查看日志log文件解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;opencv-4.4.0 源码&lt;br&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR
      
    
    </summary>
    
      <category term="OpenCV" scheme="https://2694048168.github.io/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="https://2694048168.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>ErrorMetrics</title>
    <link href="https://2694048168.github.io/ErrorMetrics/"/>
    <id>https://2694048168.github.io/ErrorMetrics/</id>
    <published>2020-07-21T06:05:13.000Z</published>
    <updated>2020-08-16T16:19:58.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-Important-Model-Evaluation-Metrics-for-Machine-Learning-Everyone-should-know"><a href="#11-Important-Model-Evaluation-Metrics-for-Machine-Learning-Everyone-should-know" class="headerlink" title="11 Important Model Evaluation Metrics for Machine Learning Everyone should know"></a>11 Important Model Evaluation Metrics for Machine Learning Everyone should know</h1><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><ul><li>Evaluating a model is a core part of building an effective machine learning model</li><li>There are several evaluation metrics, like confusion matrix, cross-validation, AUC-ROC curve, etc.</li><li>Different evaluation metrics are used for different kinds of problems</li></ul><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The idea of building machine learning models works on a constructive feedback principle. You build a model, get feedback from metrics, make improvements and continue until you achieve a desirable accuracy. Evaluation metrics explain the performance of a model. An important aspect of evaluation metrics is their capability to discriminate among model results.</p><p>I have seen plenty of analysts and aspiring data scientists not even bothering to check how robust their model is. Once they are finished building a model, they hurriedly map predicted values on unseen data. This is an incorrect approach.</p><p>Simply building a predictive model is not your motive. It’s about creating and selecting a model which gives high accuracy on out of sample data. Hence, it is crucial to check the accuracy of your model prior to computing predicted values.</p><p>In our industry, we consider different kinds of metrics to evaluate our models. The choice of metric completely depends on the type of model and the implementation plan of the model.</p><p>After you are finished building your model, these 11 metrics will help you in evaluating your model’s accuracy. Considering the rising popularity and importance of cross-validation, I’ve also mentioned its principles in this article.</p><p>And if you’re starting out your machine learning journey, you should check out the comprehensive and popular ‘Applied Machine Learning’ course which covers this concept in a lot of detail along with the various algorithms and components of machine learning.</p><h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ol><li>Confusion Matrix</li><li>F1 Score</li><li>Gain and Lift Charts</li><li>Kolmogorov Smirnov Chart</li><li>AUC – ROC</li><li>Log Loss</li><li>Gini Coefficient</li><li>Concordant – Discordant Ratio</li><li>Root Mean Squared Error</li><li>Cross Validation (Not a metric though!)</li></ol><h1 id="Warming-up-Types-of-Predictive-models"><a href="#Warming-up-Types-of-Predictive-models" class="headerlink" title="Warming up: Types of Predictive models"></a>Warming up: Types of Predictive models</h1><p>When we talk about predictive models, we are talking either about a regression model (continuous output) or a classification model (nominal or binary output). The evaluation metrics used in each of these models are different.</p><p>In classification problems, we use two types of algorithms (dependent on the kind of output it creates):</p><ol><li>Class output: Algorithms like SVM and KNN create a class output. For instance, in a binary classification problem, the outputs will be either 0 or 1. However, today we have algorithms which can convert these class outputs to probability. But these algorithms are not well accepted by the statistics community.</li><li>Probability output: Algorithms like Logistic Regression, Random Forest, Gradient Boosting, Adaboost etc. give probability outputs. Converting probability outputs to class output is just a matter of creating a threshold probability.</li></ol><p>In regression problems, we do not have such inconsistencies in output. The output is always continuous in nature and requires no further treatment.</p><h2 id="Illustrative-Example"><a href="#Illustrative-Example" class="headerlink" title="Illustrative Example"></a>Illustrative Example</h2><p>For a classification model evaluation metric discussion, I have used my predictions for the problem BCI challenge on Kaggle. The solution of the problem is out of the scope of our discussion here. However the final predictions on the training set have been used for this article. The predictions made for this problem were probability outputs which have been converted to class outputs assuming a threshold of 0.5.</p><h1 id="1-Confusion-Matrix"><a href="#1-Confusion-Matrix" class="headerlink" title="1. Confusion Matrix"></a>1. Confusion Matrix</h1><p>A confusion matrix is an N X N matrix, where N is the number of classes being predicted. For the problem in hand, we have N=2, and hence we get a 2 X 2 matrix. Here are a few definitions, you need to remember for a confusion matrix :</p><ul><li>Accuracy : the proportion of the total number of predictions that were correct.</li><li>Positive Predictive Value or Precision : the proportion of positive cases that were correctly identified.</li><li>Negative Predictive Value : the proportion of negative cases that were correctly identified.</li><li>Sensitivity or Recall : the proportion of actual positive cases which are correctly identified.</li><li>Specificity : the proportion of actual negative cases which are correctly identified.</li></ul><p><img src="/images/confusion_matrix.png" alt="confusion_matrix"></p><p><img src="/images/confusion_matrix1.png" alt="confusion_matrix"></p><p>The accuracy for the problem in hand comes out to be 88%.  As you can see from the above two tables, the Positive predictive Value is high, but negative predictive value is quite low. Same holds for Sensitivity and Specificity. This is primarily driven by the threshold value we have chosen. If we decrease our threshold value, the two pairs of starkly different numbers will come closer.</p><p>In general we are concerned with one of the above defined metric. For instance, in a pharmaceutical company, they will be more concerned with minimal wrong positive diagnosis. Hence, they will be more concerned about high Specificity. On the other hand an attrition model will be more concerned with Sensitivity. Confusion matrix are generally used only with class output models.</p><h1 id="2-F1-Score"><a href="#2-F1-Score" class="headerlink" title="2. F1 Score"></a>2. F1 Score</h1><p>In the last section, we discussed precision and recall for classification problems and also highlighted the importance of choosing precision/recall basis our use case. What if for a use case, we are trying to get the best precision and recall at the same time? F1-Score is the harmonic mean of precision and recall values for a classification problem. The formula for F1-Score is as follows:</p><p><img src="/images/screenshot.png" alt="screenshot"></p><p>Now, an obvious question that comes to mind is why are taking a harmonic mean and not an arithmetic mean. This is because HM punishes extreme values more. Let us understand this with an example. We have a binary classification model with the following results:</p><p>Precision: 0, Recall: 1</p><p>Here, if we take the arithmetic mean, we get 0.5. It is clear that the above result comes from a dumb classifier which just ignores the input and just predicts one of the classes as output. Now, if we were to take HM, we will get 0 which is accurate as this model is useless for all purposes.</p><p>This seems simple. There are situations however for which a data scientist would like to give a percentage more importance/weight to either precision or recall. Altering the above expression a bit such that we can include an adjustable parameter beta for this purpose, we get:</p><p><img src="/images/screenshot1.png" alt="screenshot1"></p><p>Fbeta measures the effectiveness of a model with respect to a user who attaches β times as much importance to recall as precision.</p><h1 id="3-Gain-and-Lift-charts"><a href="#3-Gain-and-Lift-charts" class="headerlink" title="3. Gain and Lift charts"></a>3. Gain and Lift charts</h1><p>Gain and Lift chart are mainly concerned to check the rank ordering of the probabilities. Here are the steps to build a Lift/Gain chart:</p><p>Step 1 : Calculate probability for each observation</p><p>Step 2 : Rank these probabilities in decreasing order.</p><p>Step 3 : Build deciles with each group having almost 10% of the observations.</p><p>Step 4 : Calculate the response rate at each deciles for Good (Responders) ,Bad (Non-responders) and total.</p><p>You will get following table from which you need to plot Gain/Lift charts:</p><p><img src="/images/LiftnGain.png" alt="LiftnGain"></p><p>This is a very informative table. Cumulative Gain chart is the graph between Cumulative %Right and Cummulative %Population. For the case in hand here is the graph :</p><p><img src="/images/CumGain.png" alt="CumGain"></p><p>This graph tells you how well is your model segregating responders from non-responders. For example, the first decile however has 10% of the population, has 14% of responders. This means we have a 140% lift at first decile.</p><p>What is the maximum lift we could have reached in first decile? From the first table of this article, we know that the total number of responders are 3850. Also the first decile will contains 543 observations. Hence, the maximum lift at first decile could have been 543/3850 ~ 14.1%. Hence, we are quite close to perfection with this model.</p><p>Let’s now plot the lift curve. Lift curve is the plot between total lift and %population. Note that for a random model, this always stays flat at 100%. Here is the plot for the case in hand :</p><p><img src="/images/Lift.png" alt="Lift"></p><p>You can also plot decile wise lift with decile number :</p><p><img src="/images/Liftdecile.png" alt="Liftdecile"></p><p>What does this graph tell you? It tells you that our model does well till the 7th decile. Post which every decile will be skewed towards non-responders. Any model with lift @ decile above 100% till minimum 3rd decile and maximum 7th decile is a good model. Else you might consider over sampling first.</p><p>Lift / Gain charts are widely used in campaign targeting problems. This tells us till which decile can we target customers for an specific campaign. Also, it tells you how much response do you expect from the new target base.</p><h1 id="4-Kolomogorov-Smirnov-chart"><a href="#4-Kolomogorov-Smirnov-chart" class="headerlink" title="4. Kolomogorov Smirnov chart"></a>4. Kolomogorov Smirnov chart</h1><p>K-S or Kolmogorov-Smirnov chart measures performance of classification models. More accurately, K-S is a measure of the degree of separation between the positive and negative distributions. The K-S is 100, if the scores partition the population into two separate groups in which one group contains all the positives and the other all the negatives.</p><p>On the other hand, If the model cannot differentiate between positives and negatives, then it is as if the model selects cases randomly from the population. The K-S would be 0. In most classification models the K-S will fall between 0 and 100, and that the higher the value the better the model is at separating the positive from negative cases.</p><p>For the case in hand, following is the table :</p><p><img src="/images/KS.png" alt="KS"></p><p>We can also plot the %Cumulative Good and Bad to see the maximum separation. Following is a sample plot :</p><p><img src="/images/KS_plot.png" alt="KS_plot"></p><p>The metrics covered till here are mostly used in classification problems. Till here, we learnt about confusion matrix, lift and gain chart and kolmogorov-smirnov chart. Let’s proceed and learn few more important metrics.</p><h1 id="5-Area-Under-the-ROC-curve-AUC-–-ROC"><a href="#5-Area-Under-the-ROC-curve-AUC-–-ROC" class="headerlink" title="5. Area Under the ROC curve (AUC – ROC)"></a>5. Area Under the ROC curve (AUC – ROC)</h1><p>This is again one of the popular metrics used in the industry.  The biggest advantage of using ROC curve is that it is independent of the change in proportion of responders. This statement will get clearer in the following sections.</p><p>Let’s first try to understand what is ROC (Receiver operating characteristic) curve. If we look at the confusion matrix below, we observe that for a probabilistic model, we get different value for each metric.</p><p><img src="/images/confusion_matrix.png" alt="confusion_matrix"></p><p>Hence, for each sensitivity, we get a different specificity.The two vary as follows:</p><p><img src="/images/curves.png" alt="curves"></p><p>The ROC curve is the plot between sensitivity and (1- specificity). (1- specificity) is also known as false positive rate and sensitivity is also known as True Positive rate. Following is the ROC curve for the case in hand.</p><p><img src="/images/ROC.png" alt="ROC"></p><p>Let’s take an example of threshold = 0.5 (refer to confusion matrix). Here is the confusion matrix :</p><p><img src="/images/Confusion_matrix2.png" alt="Confusion_matrix2"></p><p>As you can see, the sensitivity at this threshold is 99.6% and the (1-specificity) is ~60%. This coordinate becomes on point in our ROC curve. To bring this curve down to a single number, we find the area under this curve (AUC).</p><p>Note that the area of entire square is 1*1 = 1. Hence AUC itself is the ratio under the curve and the total area. For the case in hand, we get AUC ROC as 96.4%. Following are a few thumb rules:</p><ul><li>.90-1 = excellent (A)</li><li>.80-.90 = good (B)</li><li>.70-.80 = fair (C)</li><li>.60-.70 = poor (D)</li><li>.50-.60 = fail (F)</li></ul><p>We see that we fall under the excellent band for the current model. But this might simply be over-fitting. In such cases it becomes very important to to in-time and out-of-time validations.</p><p>Points to Remember:</p><ol><li><p>For a model which gives class as output, will be represented as a single point in ROC plot.</p></li><li><p>Such models cannot be compared with each other as the judgement needs to be taken on a single metric and not using multiple metrics. For instance, model with parameters (0.2,0.8) and model with parameter (0.8,0.2) can be coming out of the same model, hence these metrics should not be directly compared.</p></li><li><p>In case of probabilistic model, we were fortunate enough to get a single number which was AUC-ROC. But still, we need to look at the entire curve to make conclusive decisions. It is also possible that one model performs better in some region and other performs better in other.</p></li></ol><h2 id="Advantages-of-using-ROC"><a href="#Advantages-of-using-ROC" class="headerlink" title="Advantages of using ROC"></a>Advantages of using ROC</h2><p>Why should you use ROC and not metrics like lift curve?</p><p>Lift is dependent on total response rate of the population. Hence, if the response rate of the population changes, the same model will give a different lift chart. A solution to this concern can be true lift chart (finding the ratio of lift and perfect model lift at each decile). But such ratio rarely makes sense for the business.</p><p>ROC curve on the other hand is almost independent of the response rate. This is because it has the two axis coming out from columnar calculations of confusion matrix. The numerator and denominator of both x and y axis will change on similar scale in case of response rate shift.</p><h1 id="6-Log-Loss"><a href="#6-Log-Loss" class="headerlink" title="6. Log Loss"></a>6. Log Loss</h1><p>AUC ROC considers the predicted probabilities for determining our model’s performance. However, there is an issue with AUC ROC, it only takes into account the order of probabilities and hence it does not take into account the model’s capability to predict higher probability for samples more likely to be positive. In that case, we could us the log loss which is nothing but negative average of the log of corrected predicted probabilities for each instance.</p><p><img src="/images/Screenshot-PM.png" alt="Screenshot-PM"></p><ul><li>p(yi) is predicted probability of positive class</li><li>1-p(yi) is predicted probability of negative class</li><li>yi = 1 for positive class and 0 for negative class (actual values)</li></ul><p>Let us calculate log loss for a few random values to get the gist of the above mathematical function:</p><p>Logloss(1, 0.1) = 2.303</p><p>Logloss(1, 0.5) = 0.693</p><p>Logloss(1, 0.9) = 0.105</p><p>If we plot this relationship, we will get a curve as follows:</p><p><img src="images/log-loss-curve.png" alt="log-loss-curve"></p><p>It’s apparent from the gentle downward slope towards the right that the Log Loss gradually declines as the predicted probability improves. Moving in the opposite direction though, the Log Loss ramps up very rapidly as the predicted probability approaches 0.</p><p>So, lower the log loss, better the model. However, there is no absolute measure on a good log loss and it is use-case/application dependent.</p><p>Whereas the AUC is computed with regards to binary classification with a varying decision threshold, log loss actually takes “certainty” of classification into account.</p><h1 id="7-Gini-Coefficient"><a href="#7-Gini-Coefficient" class="headerlink" title="7. Gini Coefficient"></a>7. Gini Coefficient</h1><p>Gini coefficient is sometimes used in classification problems. Gini coefficient can be straigh away derived from the AUC ROC number. Gini is nothing but ratio between area between the ROC curve and the diagnol line &amp; the area of the above triangle. Following is the formulae used :</p><p>Gini = 2*AUC – 1</p><p>Gini above 60% is a good model. For the case in hand we get Gini as 92.7%.</p><h1 id="8-Concordant-–-Discordant-ratio"><a href="#8-Concordant-–-Discordant-ratio" class="headerlink" title="8. Concordant – Discordant ratio"></a>8. Concordant – Discordant ratio</h1><p>This is again one of the most important metric for any classification predictions problem. To understand this let’s assume we have 3 students who have some likelihood to pass this year. Following are our predictions :</p><center>A – 0.9</center><center>B – 0.5</center><center>C – 0.3</center><p>Now picture this. if we were to fetch pairs of two from these three student, how many pairs will we have? We will have 3 pairs : AB , BC, CA. Now, after the year ends we saw that A and C passed this year while B failed. No, we choose all the pairs where we will find one responder and other non-responder. How many such pairs do we have?</p><p>We have two pairs AB and BC. Now for each of the 2 pairs, the concordant pair is where the probability of responder was higher than non-responder. Whereas discordant pair is where the vice-versa holds true. In case both the probabilities were equal, we say its a tie. Let’s see what happens in our case :</p><center>AB  – Concordant</center><center>BC – Discordant</center><p>Hence, we have 50% of concordant cases in this example. Concordant ratio of more than 60% is considered to be a good model. This metric generally is not used when deciding how many customer to target etc. It is primarily used to access the model’s predictive power. For decisions like how many to target are again taken by KS / Lift charts.</p><h1 id="9-Root-Mean-Squared-Error-RMSE"><a href="#9-Root-Mean-Squared-Error-RMSE" class="headerlink" title="9. Root Mean Squared Error (RMSE)"></a>9. Root Mean Squared Error (RMSE)</h1><p>RMSE is the most popular evaluation metric used in regression problems. It follows an assumption that error are unbiased and follow a normal distribution. Here are the key points to consider on RMSE:</p><ol><li>The power of ‘square root’  empowers this metric to show large number deviations.</li><li>The ‘squared’ nature of this metric helps to deliver more robust results which prevents cancelling the positive and negative error values. In other words, this metric aptly displays the plausible magnitude of error term.</li><li>It avoids the use of absolute error values which is highly undesirable in mathematical calculations.</li><li>When we have more samples, reconstructing the error distribution using RMSE is considered to be more reliable.</li><li>RMSE is highly affected by outlier values. Hence, make sure you’ve removed outliers from your data set prior to using this metric.</li><li>As compared to mean absolute error, RMSE gives higher weightage and punishes large errors.</li></ol><p>RMSE metric is given by:</p><p><img src="/images/rmse.png" alt="rmse"></p><p>where, N is Total Number of Observations.</p><h1 id="10-Root-Mean-Squared-Logarithmic-Error"><a href="#10-Root-Mean-Squared-Logarithmic-Error" class="headerlink" title="10. Root Mean Squared Logarithmic Error"></a>10. Root Mean Squared Logarithmic Error</h1><p>In case of Root mean squared logarithmic error, we take the log of the predictions and actual values. So basically, what changes are the variance that we are measuring. RMSLE is usually used when we don’t want to penalize huge differences in the predicted and the actual values when both predicted and true values are huge numbers.</p><p><img src="/images/Screenshot-rmse.png" alt="Screenshot-rmse"></p><ol><li>If both predicted and actual values are small: RMSE and RMSLE are same.</li><li>If either predicted or the actual value is big: RMSE &gt; RMSLE</li><li>If both predicted and actual values are big: RMSE &gt; RMSLE (RMSLE becomes almost negligible)</li></ol><h1 id="11-R-Squared-Adjusted-R-Squared"><a href="#11-R-Squared-Adjusted-R-Squared" class="headerlink" title="11. R-Squared/Adjusted R-Squared"></a>11. R-Squared/Adjusted R-Squared</h1><p>We learned that when the RMSE decreases, the model’s performance will improve. But these values alone are not intuitive.</p><p>In the case of a classification problem, if the model has an accuracy of 0.8, we could gauge how good our model is against a random model, which has an accuracy of  0.5. So the random model can be treated as a benchmark. But when we talk about the RMSE metrics, we do not have a benchmark to compare.</p><p>This is where we can use R-Squared metric. The formula for R-Squared is as follows:</p><p><img src="/images/Screenshot2.png" alt="Screenshot2"></p><p><img src="/images/Screenshot3.png" alt="Screenshot3"></p><p>MSE(model): Mean Squared Error of the predictions against the actual values</p><p>MSE(baseline): Mean Squared Error of  mean prediction against the actual values</p><p>In other words how good our regression model as compared to a very simple model that just predicts the mean value of target from the train set as predictions.</p><h2 id="Adjusted-R-Squared"><a href="#Adjusted-R-Squared" class="headerlink" title="Adjusted R-Squared"></a>Adjusted R-Squared</h2><p>A model performing equal to baseline would give R-Squared as 0. Better the model, higher the r2 value. The best model with all correct predictions would give R-Squared as 1. However, on adding new features to the model, the R-Squared value either increases or remains the same. R-Squared does not penalize for adding features that add no value to the model. So an improved version over the R-Squared is the adjusted R-Squared. The formula for adjusted R-Squared is given by:</p><p><img src="/images/Screenshot4.png" alt="Screenshot4"></p><p>k: number of features</p><p>n: number of samples</p><p>As you can see, this metric takes the number of features into account. When we add more features, the term in the denominator n-(k +1) decreases, so the whole expression increases.</p><p>If R-Squared does not increase, that means the feature added isn’t valuable for our model. So overall we subtract a greater value from 1 and adjusted r2, in turn, would decrease.</p><p>Beyond these 11 metrics, there is another method to check the model performance. These 7 methods are statistically prominent in data science. But, with arrival of machine learning, we are now blessed with more robust methods of model selection. Yes! I’m talking about Cross Validation.</p><p>Though, cross validation isn’t a really an evaluation metric which is used openly to communicate model accuracy. But, the result of cross validation provides good enough intuitive result to generalize the performance of a model.</p><p>Let’s now understand cross validation in detail.</p><h1 id="12-Cross-Validation"><a href="#12-Cross-Validation" class="headerlink" title="12. Cross Validation"></a>12. Cross Validation</h1><p>Let’s first understand the importance of cross validation. Due to busy schedules, these days I don’t get much time to participate in data science competitions. Long time back, I participated in TFI Competition on Kaggle. Without delving into my competition performance, I would like to show you the dissimilarity between my public and private leaderboard score.</p><p><strong>Here is an example of scoring on Kaggle!</strong></p><p>For TFI competition, following were three of my solution and scores (Lesser the better) :</p><p><img src="/images/kagglescores.png" alt="kagglescores"></p><p>You will notice that the third entry which has the worst Public score turned to be the best model on Private ranking. There were more than 20 models above the “submission_all.csv”, but I still chose “submission_all.csv” as my final entry (which really worked out well). What caused this phenomenon ? The dissimilarity in my public and private leaderboard is caused by over-fitting.</p><p>Over-fitting is nothing but when you model become highly complex that it starts capturing noise also. This ‘noise’ adds no value to model, but only inaccuracy.</p><p>In the following section, I will discuss how you can know if a solution is an over-fit or not before we actually know the test results.</p><h2 id="The-concept-Cross-Validation"><a href="#The-concept-Cross-Validation" class="headerlink" title="The concept : Cross Validation"></a>The concept : Cross Validation</h2><p>Cross Validation is one of the most important concepts in any type of data modelling. It simply says, try to leave a sample on which you do not train the model and test the model on this sample before finalizing the model.</p><p><img src="/images/validation.png" alt="validation"></p><p>Above diagram shows how to validate model with in-time sample. We simply divide the population into 2 samples, and build model on one sample. Rest of the population is used for in-time validation.</p><p>Could there be a negative side of the above approach?</p><p>I believe, a negative side of this approach is that we loose a good amount of data from training the model. Hence, the model is very high bias. And this won’t give best estimate for the coefficients. So what’s the next best option?</p><p>What if, we make a 50:50 split of training population and the train on first 50 and validate on rest 50. Then, we train on the other 50, test on first 50. This way we train the model on the entire population, however on 50% in one go. This reduces bias because of sample selection to some extent but gives a smaller sample to train the model on. This approach is known as 2-fold cross validation.</p><h2 id="k-fold-Cross-validation"><a href="#k-fold-Cross-validation" class="headerlink" title="k-fold Cross validation"></a>k-fold Cross validation</h2><p>Let’s extrapolate the last example to k-fold from 2-fold cross validation. Now, we will try to visualize how does a k-fold validation work.</p><p><img src="/images/kfolds.png" alt="kfolds"></p><p>This is a 7-fold cross validation.</p><p>Here’s what goes on behind the scene : we divide the entire population into 7 equal samples. Now we train models on 6 samples (Green boxes) and validate on 1 sample (grey box). Then, at the second iteration we train the model with a different sample held as validation. In 7 iterations, we have basically built model on each sample and held each of them as validation. This is a way to reduce the selection bias and reduce the variance in prediction power. Once we have all the 7 models, we take average of the error terms to find which of the models is best.</p><p><strong>How does this help to find best (non over-fit) model?</strong></p><p>k-fold cross validation is widely used to check whether a model is an overfit or not. If the performance metrics at each of the k times modelling are close to each other and the mean of metric is highest. In a Kaggle competition, you might rely more on the cross validation score and not on the Kaggle public score. This way you will be sure that the Public score is not just by chance.</p><p><strong>How do we implement k-fold with any model?</strong></p><p>Coding k-fold in R and Python are very similar. Here is how you code a k-fold in Python :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Simple K-Fold cross validation. 5 folds. </span></span><br><span class="line"><span class="comment">#(Note: in older scikit-learn versions the "n_folds" argument is named "k".) </span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> cross_validation </span><br><span class="line">model = RandomForestClassifier(n_estimators=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># "model" can be replaced by your model object </span></span><br><span class="line"><span class="comment"># "Error_function" can be replaced by the error function of your analysis for traincv, testcv in cv: </span></span><br><span class="line">cv = cross_validation.KFold(len(train), n_folds=<span class="number">5</span>, indices=<span class="literal">False</span>) </span><br><span class="line">results = [] </span><br><span class="line"></span><br><span class="line"><span class="comment">#print out the mean of the cross-validated results          </span></span><br><span class="line">probas = model.fit(train[traincv], target[traincv]).predict_proba(train[testcv])             results.append( Error_function ) </span><br><span class="line"></span><br><span class="line">print(<span class="string">"Results: "</span> + str( np.array(results).mean() ))</span><br></pre></td></tr></table></figure><p><strong>But how do we choose k?</strong></p><p>This is the tricky part. We have a trade off to choose k.</p><p>For a small k, we have a higher selection bias but low variance in the performances.</p><p>For a large k, we have a small selection bias but high variance in the performances.</p><p>Think of extreme cases :</p><p>k = 2  : We have only 2 samples similar to our 50-50 example. Here we build model only on 50% of the population each time. But as the validation is a significant population, the variance of validation performance is minimal.</p><p>k = number of observations (n) :  This is also known as “Leave one out”. We have n samples and modelling repeated n number of times leaving only one observation out for cross validation. Hence, the selection bias is minimal but the variance of validation performance is very large.</p><p>Generally a value of k = 10 is recommended for most purpose.</p><h1 id="End-Notes"><a href="#End-Notes" class="headerlink" title="End Notes"></a>End Notes</h1><p>Measuring the performance on training sample is point less. And leaving a in-time validation batch aside is a waste of data. K-Fold gives us a way to use every singe datapoint which can reduce this selection bias to a good extent. Also, K-fold cross validation can be used with any modelling technique.</p><p>In addition, the metrics covered in this article are some of the most used metrics of evaluation in a classification and regression problems.</p><p>Which metric do you often use in classification and regression problem ? Have you used k-fold cross validation before for any kind of analysis? Did you see any significant benefits against using a batch  validation? Do let us know your thoughts about this guide in the comments section below.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;11-Important-Model-Evaluation-Metrics-for-Machine-Learning-Everyone-should-know&quot;&gt;&lt;a href=&quot;#11-Important-Model-Evaluation-Metrics-for
      
    
    </summary>
    
      <category term="Artificial Intelligence" scheme="https://2694048168.github.io/categories/Artificial-Intelligence/"/>
    
    
      <category term="MachineLearning" scheme="https://2694048168.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>深度学习环境搭建详细教程</title>
    <link href="https://2694048168.github.io/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <id>https://2694048168.github.io/深度学习环境搭建详细教程/</id>
    <published>2020-07-20T07:33:14.000Z</published>
    <updated>2020-08-07T02:48:53.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发环境-platform"><a href="#开发环境-platform" class="headerlink" title="开发环境 platform"></a>开发环境 platform</h1><ul><li>操作系统 OS<ul><li>Windows 7</li><li>Windows 10</li><li>Ubuntu 18.04</li><li>Ubuntu 16.04</li><li>Ubuntu 20.04</li></ul></li><li>开发语言 Python3<ul><li>Anaconda3</li><li>Jupyter Lab &amp; Jupyter Notebook</li><li>PyCharm</li></ul></li><li>开发框架<ul><li>PyTorch</li><li>TensorFlow2</li></ul></li><li>计算资源<ul><li>CPU</li><li>GPU ( CUDA &amp; cuDNN )</li><li>TPU</li></ul></li></ul><h1 id="版本匹配-select"><a href="#版本匹配-select" class="headerlink" title="版本匹配 select"></a>版本匹配 select</h1><ul><li>Windows 7 + Anaconda3 + Jupyter Lab + Jupyter Notebook + PyCharm + PyTorch + TensorFlow + CPU + GPU + TPU + CUDA</li><li>Windows 10 + Anaconda3 + Jupyter Lab + Jupyter Notebook + PyCharm + TensorFlow + CPU + GPU + TPU + CUDA + cnDNN</li><li>Ubuntu 18.04 + Anaconda3 + Jupyter Lab + Jupyter Notebook + PyCharm + PyTorch + TensorFlow + CPU + GPU + TPU + CUDA</li><li>Ubuntu 16.04 + Anaconda3 + Jupyter Lab + Jupyter Notebook + PyCharm + TensorFlow + CPU + GPU + TPU + CUDA + cnDNN</li></ul><p><img src="/images/Platform.png" alt="self"></p><h1 id="实战顺序-order"><a href="#实战顺序-order" class="headerlink" title="实战顺序 order"></a>实战顺序 order</h1><ol><li>Anaconda3</li><li>Jupyter</li><li>CUDA &amp; cuDNN</li><li>PyTorch &amp; TensorFlow</li><li>PyCharm</li></ol><p><strong><em>software：安装路径；系统环境变量配置；快速启动与关闭；软件本身的一些相关配置</em></strong></p><h1 id="安装命令-command"><a href="#安装命令-command" class="headerlink" title="安装命令 command"></a>安装命令 command</h1><ul><li>Windows OS</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1、安装 Anaconda3</span><br><span class="line"><span class="meta">#</span> Anaconda 官网:https://www.anaconda.com/products/individual#windows</span><br><span class="line"><span class="meta">#</span> Anaconda 国内清华大学镜像:https://mirrors.tuna.tsinghua.edu.cn/</span><br><span class="line"><span class="meta">#</span> Windows 下【next】即可，注意选择将路径添加到系统环境变量中那个选项</span><br><span class="line"><span class="meta">#</span> Win + R，打开运行窗口，输入 cmd</span><br><span class="line"><span class="meta">#</span> 检测 Anaconda 安装情况</span><br><span class="line">where conda    # 检测位置是否是自己想要的</span><br><span class="line">where pip</span><br><span class="line">where python</span><br><span class="line">where ipython</span><br><span class="line"></span><br><span class="line">conda --version #或者输入 conda -V  查看版本是否自己需要的</span><br><span class="line">pip --version</span><br><span class="line">python --version</span><br><span class="line">ipython --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 升级 Anaconda 自带的 Jupyter</span><br><span class="line"><span class="meta">#</span> 建议先配置好 pip 国内镜像源</span><br><span class="line">pip install --upgrade jupyterlab</span><br><span class="line"><span class="meta">#</span> cmd 打开 jupyter lab</span><br><span class="line">jupyter lab</span><br><span class="line"><span class="meta">#</span> 配置 jupyter ，一般设置工作路径，远程登录等等信息</span><br><span class="line"><span class="meta">#</span> 生成配置文件</span><br><span class="line">jupyter notebook --generate-config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、NVIDIA 显卡资源 GTX 1060、GTX 1080Ti</span><br><span class="line"><span class="meta">#</span> CUDA 10.0 官网：https://developer.nvidia.com/cuda-10.0-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exelocal</span><br><span class="line"><span class="meta">#</span> 右击以管理员身份运行，选择自定义安装，按需选择，注意与本身驱动版本区别匹配</span><br><span class="line"><span class="meta">#</span> cuDNN 7.5 for CUDA 10.0 官网：https://developer.nvidia.com/rdp/cudnn-archive</span><br><span class="line"><span class="meta">#</span> cuDNN 需要登录才能下载，注册并登录一些即可</span><br><span class="line"><span class="meta">#</span> 解压后重命名文件夹为 cudnn ，然后剪切到 CUDA 安装目录下即可</span><br><span class="line"><span class="meta">#</span>####### 添加系统环境变量 PATH ############</span><br><span class="line"><span class="meta">#</span> 1、CUDA\V10.0\bin</span><br><span class="line"><span class="meta">#</span> 2、CUDA\V10.0\libnvvp</span><br><span class="line"><span class="meta">#</span> 3、CUDA\V10.0\extras\CUPI\libx64</span><br><span class="line"><span class="meta">#</span> 4、CUDA\V10.0\cudnn\bin</span><br><span class="line"><span class="meta">#</span>####### 四个环境变量一个不能少，而且必须保持到最前面 ############</span><br><span class="line"><span class="meta">#</span> 测试</span><br><span class="line">nvcc --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、配置好 pip 国内镜像源</span><br><span class="line"><span class="meta">#</span> 查看包管理器pip的版本，至少要求pip版本在10以上</span><br><span class="line">pip --version</span><br><span class="line"><span class="meta">#</span> 如果有需要，可以升级pip到最新版本</span><br><span class="line">python -m pip install --upgrade pip</span><br><span class="line"><span class="meta">#</span> 设置全局默认pypi国内镜像源地址，只需要一个即可</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple</span><br><span class="line"><span class="meta">#</span> 可以临时使用指定的pypi镜像源，命令如下</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple packageName</span><br><span class="line"><span class="meta">#</span> 设置配置文件 Windows </span><br><span class="line"><span class="meta">#</span> Win + R 打开【运行】窗口，输入%HOMEPATH%，自动跳转到用户目录</span><br><span class="line"><span class="meta">#</span> 在打开的目录下新建一个目录，命名为pip</span><br><span class="line"><span class="meta">#</span> 进入pip目录，新建配置文件，命名为pip.ini，注意Windows下配置文件后缀为.ini</span><br><span class="line"><span class="meta">#</span> 打开配置文件pip.ini，输入pypi源，如下内容</span><br><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4、安装 PyTorch</span><br><span class="line"><span class="meta">#</span> PyTorch 官网：https://pytorch.org/get-started/locally/</span><br><span class="line"><span class="meta">#</span> 选择对应的 PyTorch 版本，操作系统，包管理工具，支持语言，CUDA 版本</span><br><span class="line"><span class="meta">#</span> 自动生成命令</span><br><span class="line"><span class="meta">#</span> 例如：PyTorch 1.5.1，Windows 10，pip，Python，CUDA 10.2</span><br><span class="line">pip install torch===1.5.1 torchvision===0.6.1 -f https://download.pytorch.org/whl/torch_stable.html</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 测试 PyTorch，进入 cmd </span><br><span class="line"><span class="meta">#</span> 没有 GPU 资源，不报错即可</span><br><span class="line">ipython</span><br><span class="line">import torch</span><br><span class="line"><span class="meta">#</span> 有 GPU 资源，返回 True 即可</span><br><span class="line">ipython</span><br><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5、安装 TensorFlow2</span><br><span class="line"><span class="meta">#</span> TensorFlow官网：https://www.tensorflow.org/install</span><br><span class="line"><span class="meta">#</span> 安装 仅支持 CPU 版本</span><br><span class="line">pip install tensorflow-cpu</span><br><span class="line"><span class="meta">#</span> 测试,进入 cmd，输入命令没有错误即可</span><br><span class="line">ipython</span><br><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装 支持 GPU和CPU 版本</span><br><span class="line">pip install tensorflow</span><br><span class="line"><span class="meta">#</span> 测试,进入 cmd，输入命令返回 True 即可</span><br><span class="line">ipython</span><br><span class="line">import tensorflow as tf</span><br><span class="line">tf.test.is_gpu_available()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 6、安装 PyCharm</span><br><span class="line"><span class="meta">#</span> PyCharm 官网：https://www.jetbrains.com/pycharm/download/</span><br><span class="line"><span class="meta">#</span> Windows 下【next】即可，注意选择将路径添加到系统环境变量中那个选项</span><br><span class="line"><span class="meta">#</span> 注意安装时选择自定义安装，系统环境变量等等情况</span><br><span class="line"><span class="meta">#</span> 快速启动并配置 Python 解释器等等一系列配置</span><br></pre></td></tr></table></figure><ul><li>Linux-Ubuntu OS</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1、配置国内 ubuntu 软件镜像源</span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup</span><br><span class="line"><span class="meta">#</span> 查看系统的版本号或者系统代号，便于配置相适应的镜像源</span><br><span class="line"><span class="meta">#</span> Ubuntu 12.04 (LTS)代号为precise</span><br><span class="line"><span class="meta">#</span> Ubuntu 14.04 (LTS)代号为trusty</span><br><span class="line"><span class="meta">#</span> Ubuntu 16.04 (LTS)代号为xenial</span><br><span class="line"><span class="meta">#</span> Ubuntu 18.04 (LTS)代号为bionic</span><br><span class="line">lsb_release -c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、安装 Anaconda3</span><br><span class="line"><span class="meta">#</span> Anaconda 官网:https://www.anaconda.com/products/individual#windows</span><br><span class="line"><span class="meta">#</span> Anaconda 国内清华大学镜像:https://mirrors.tuna.tsinghua.edu.cn/</span><br><span class="line"><span class="meta">#</span> 添加执行权限</span><br><span class="line">chmod +x anaconda3.sh</span><br><span class="line"><span class="meta">#</span> 执行安装</span><br><span class="line">./anaconda3.sh</span><br><span class="line"><span class="meta">#</span> 1、回车开始安装</span><br><span class="line"><span class="meta">#</span> 2、按 q 退出查看阅读协议</span><br><span class="line"><span class="meta">#</span> 3、输入 yes 同意协议服务</span><br><span class="line"><span class="meta">#</span> 4、输入安装路径 /home/user/conda/</span><br><span class="line"><span class="meta">#</span> 5、添加系统环境变量 yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 检测 Anaconda 安装情况</span><br><span class="line">which conda    # 检测位置是否是自己想要的</span><br><span class="line">which pip</span><br><span class="line">which python</span><br><span class="line">which ipython</span><br><span class="line"></span><br><span class="line">conda --version #或者输入 conda -V  查看版本是否自己需要的</span><br><span class="line">pip --version</span><br><span class="line">python --version</span><br><span class="line">ipython --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 升级 Anaconda 自带的 Jupyter</span><br><span class="line"><span class="meta">#</span> 建议先配置好 pip 国内镜像源</span><br><span class="line">pip install --upgrade jupyterlab</span><br><span class="line"><span class="meta">#</span> cmd 打开 jupyter lab</span><br><span class="line">jupyter lab</span><br><span class="line"><span class="meta">#</span> 配置 jupyter ，一般设置工作路径，远程登录等等信息</span><br><span class="line"><span class="meta">#</span> 生成配置文件</span><br><span class="line">jupyter notebook --generate-config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、配置国内 pip 镜像源</span><br><span class="line"><span class="meta">#</span> 在终端使用如下命令，新建 pip 配置文件，为当前登录用户 Python 设置 pypi 镜像源</span><br><span class="line">vi ~/.pip/pip.config</span><br><span class="line"><span class="meta">#</span> 在配置文件中输入 pypi 源，需要简单的 Vi&amp;Vim 操作命令</span><br><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4、安装 GPU 驱动加速以及 cuDNN 深度神经网络加速库</span><br><span class="line"><span class="meta">#</span> 显卡信息查看</span><br><span class="line">lspci</span><br><span class="line"><span class="meta">#</span> 安装 CUDA，搜索 cuda 10.2 download 即可</span><br><span class="line"><span class="meta">#</span> 选择好 cuda版本、操作系统、架构64、ubuntu以及其版本、deb local</span><br><span class="line"><span class="meta">#</span> 出现安装指南 Installation Instructions:</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin</span><br><span class="line">sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class="line">sudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install cuda</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重启使得网卡驱动生效</span><br><span class="line"><span class="meta">#</span> 查看信息,显示 GPU 资源信息即可</span><br><span class="line">nvidia-smi</span><br><span class="line"><span class="meta">#</span> 配置 nvcc 到系统环境变量，并使其生效</span><br><span class="line"><span class="meta">#</span> 查看当前 PATH 内容</span><br><span class="line">echo $PATH</span><br><span class="line"><span class="meta">#</span> 找到 cuda 安装路径下的 nvcc 命令</span><br><span class="line"><span class="meta">#</span> 类似：/usr/local/cuda_10.2/bin</span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="meta">#</span> 添加内容</span><br><span class="line">export PATH="/usr/local/cuda_10.2/bin:$PATH"</span><br><span class="line"><span class="meta">#</span> 生效配置文件</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta">#</span> 检测 nvcc</span><br><span class="line">nvcc -V</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5、安装 PyTorch</span><br><span class="line"><span class="meta">#</span> PyTorch 官网：https://pytorch.org/get-started/locally/</span><br><span class="line"><span class="meta">#</span> 选择对应的 PyTorch 版本，操作系统，包管理工具，支持语言，CUDA 版本</span><br><span class="line"><span class="meta">#</span> 自动生成命令</span><br><span class="line">pip install torch==1.5.1+cu101 torchvision==0.6.1+cu101 -f https://download.pytorch.org/whl/torch_stable.html</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 测试 PyTorch，打开终端 Ctrl + Alt + T</span><br><span class="line"><span class="meta">#</span> 没有 GPU 资源，不报错即可</span><br><span class="line">ipython</span><br><span class="line">import torch</span><br><span class="line"><span class="meta">#</span> 有 GPU 资源，返回 True 即可</span><br><span class="line">ipython</span><br><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 6、安装 TensorFlow2</span><br><span class="line"><span class="meta">#</span> TensorFlow官网：https://www.tensorflow.org/install</span><br><span class="line"><span class="meta">#</span> 安装 仅支持 CPU 版本</span><br><span class="line">pip install tensorflow-cpu</span><br><span class="line"><span class="meta">#</span> 测试,进入 cmd，输入命令没有错误即可</span><br><span class="line">ipython</span><br><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装 支持 GPU和CPU 版本</span><br><span class="line">pip install tensorflow</span><br><span class="line"><span class="meta">#</span> 测试,进入 cmd，输入命令返回 True 即可</span><br><span class="line">ipython</span><br><span class="line">import tensorflow as tf</span><br><span class="line">tf.test.is_gpu_available()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 7、注意点</span><br><span class="line"><span class="meta">#</span> 之所有没有安装 cuDNN 库支持，并能成功使用 TensorFlow  的 GPU 资源</span><br><span class="line"><span class="meta">#</span> 这是因为，PyTorch 安装中自动下载并配置了 cudatoolkit 库，即就是 cuDNN 库</span><br><span class="line"><span class="meta">#</span> 如果没有安装 PyTorch，则需要自己配置 cuDNN 库</span><br><span class="line"><span class="meta">#</span> cuDNN 7.5 for CUDA 10.0 官网：https://developer.nvidia.com/rdp/cudnn-archive</span><br><span class="line"><span class="meta">#</span> cuDNN 需要登录才能下载，注册并登录一些即可</span><br><span class="line"><span class="meta">#</span> 下载并解压后重命名文件夹为 cudnn ，然后 mv 到 CUDA 安装目录下即可</span><br><span class="line"><span class="meta">#</span> 配置 cudnn 库到系统环境变量库中,指定 cudnn 库位置</span><br><span class="line">echo $LD_LIBRARY_PATH</span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="meta">#</span> 添加内容</span><br><span class="line">export LD_LIBRARY_PATH="/home/cuda/cudnn/lib64:$LD_LIBRARY_PATH"</span><br><span class="line"><span class="meta">#</span> 生效配置文件</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 7、安装 PyCharm</span><br><span class="line"><span class="meta">#</span> PyCharm 官网：https://www.jetbrains.com/pycharm/download/</span><br><span class="line"><span class="meta">#</span> 注意安装时选择自定义安装，系统环境变量等等情况</span><br><span class="line"><span class="meta">#</span> 解压，执行 pycharm.sh</span><br><span class="line">./pycharm.sh</span><br><span class="line"><span class="meta">#</span> 按照提示进行安装即可</span><br><span class="line"><span class="meta">#</span> 选择快速启动命令 charm 终端启动</span><br></pre></td></tr></table></figure><h1 id="基本概念-conception"><a href="#基本概念-conception" class="headerlink" title="基本概念 conception"></a>基本概念 conception</h1><h2 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h2><ul><li>功能：使得在系统终端能够搜索并使用某个命令或者搜索到某个动静态库</li></ul><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><ul><li>功能：将源代码编译成机器指令，供计算机执行</li></ul><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ul><li>功能：快速编辑源代码</li></ul><h2 id="调试器"><a href="#调试器" class="headerlink" title="调试器"></a>调试器</h2><ul><li>功能：对程序进行调试，找出错误bug</li></ul><h2 id="集成开发环境-IDE"><a href="#集成开发环境-IDE" class="headerlink" title="集成开发环境 IDE"></a>集成开发环境 IDE</h2><ul><li>编辑 + 编译 + 调试 + Git版本控制</li></ul><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="Windows-系列"><a href="#Windows-系列" class="headerlink" title="Windows 系列"></a>Windows 系列</h3><ul><li>Windows XP</li><li>Windows 7</li><li>Windows 8</li><li>Windows 10</li></ul><h3 id="Linux-系列"><a href="#Linux-系列" class="headerlink" title="Linux 系列"></a>Linux 系列</h3><ul><li>Unix</li><li>Ubuntu</li><li>Debian</li><li>Red Hat</li><li>Centos</li><li>Arch Linux</li><li>Linux Mint</li><li>Android</li></ul><h3 id="Mac-系列"><a href="#Mac-系列" class="headerlink" title="Mac 系列"></a>Mac 系列</h3><ul><li>Mac OS 9</li><li>Mac OS X 10.0</li><li>Mac OS X 10.12</li><li>Mac OS X 10.14</li><li>Mac OS X 10.15</li><li>iOS</li></ul><h2 id="深度学习框架"><a href="#深度学习框架" class="headerlink" title="深度学习框架"></a>深度学习框架</h2><ul><li>Scikit-learn    for Machine Learning , no GPU</li><li>Keras    a Deep Learning library</li><li>2013年，第一个面向深度学习的框架 Caffe ，C-plus-plus 开发，不支持自动求导</li><li>Theano，加拿大，开发难，调试难</li><li>Torch，采用 Lua 语言</li><li>TensorFlow，Google，2017发布TensorFlow1，2019发布TensorFlow2</li><li>PyTorch，Facebook</li><li>Chainer ，日本</li><li>MXNet</li></ul><p><strong>现在深度学习框架</strong></p><ul><li>TensorFlow + Keras( Keras 作为 TensorFlow 后端)</li><li>PyTorch + Caffe2（Caffe2 作为 PyTorch 后端，Torch 作为 PyTorch 前端）</li><li>优势：GPU加速，自动求导，神经网络API</li></ul><h2 id="人工智能常用库"><a href="#人工智能常用库" class="headerlink" title="人工智能常用库"></a>人工智能常用库</h2><ul><li>Scikit-Learn 机器学习库，分类、回归、数据处理、降维处理、聚类、模型选择<br><span class="exturl" data-url="aHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnL3N0YWJsZS8=" title="https://scikit-learn.org/stable/">scikit-learn官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NjaWtpdC1sZWFybi9zY2lraXQtbGVhcm4v" title="https://github.com/scikit-learn/scikit-learn/">scikit-learn-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9zY2lraXQtbGVhcm4v" title="https://gitee.com/mirrors/scikit-learn/">scikit-learn-Gitee<i class="fa fa-external-link"></i></span></li><li>OpenCV 图像处理库，图像视频处理<br><span class="exturl" data-url="aHR0cHM6Ly9vcGVuY3Yub3JnLw==" title="https://opencv.org/">OpenCV官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5jdi9vcGVuY3Y=" title="https://github.com/opencv/opencv">OpenCV-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9vcGVuY3Yv" title="https://gitee.com/mirrors/opencv/">OpenCV-Gitee<i class="fa fa-external-link"></i></span></li><li>PyTorch<br><span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLm9yZy8=" title="https://pytorch.org/">PyTorch官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B5dG9yY2gvcHl0b3JjaA==" title="https://github.com/pytorch/pytorch">PyTorch-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9weXRvcmNoLw==" title="https://gitee.com/mirrors/pytorch/">PyTorch-Gitee<i class="fa fa-external-link"></i></span></li><li>TensorFlow<br><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcv" title="https://www.tensorflow.org/">TensorFlow官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3cvdGVuc29yZmxvdw==" title="https://github.com/tensorflow/tensorflow">TensorFlow-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy90ZW5zb3JmbG93Lw==" title="https://gitee.com/mirrors/tensorflow/">TensorFlow-Gitee<i class="fa fa-external-link"></i></span></li><li>Scipy 科学计算基础库<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2NpcHkub3JnLw==" title="https://www.scipy.org/">Scipy官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rvbm5lbWFydGluL2RhdGEtc2NpZW5jZS1pcHl0aG9uLW5vdGVib29rcy8=" title="https://github.com/donnemartin/data-science-ipython-notebooks/">Scipy-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9kYXRhLXNjaWVuY2UtaXB5dGhvbi1ub3RlYm9va3Mv" title="https://gitee.com/mirrors/data-science-ipython-notebooks/">Scipy-Gitee<i class="fa fa-external-link"></i></span></li><li>Numpy 矩阵高效运算<br><span class="exturl" data-url="aHR0cHM6Ly9udW1weS5vcmcv" title="https://numpy.org/">Numpy官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL251bXB5L251bXB5Lw==" title="https://github.com/numpy/numpy/">Numpy-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9OdW1QeS8=" title="https://gitee.com/mirrors/NumPy/">Numpy-Gitee<i class="fa fa-external-link"></i></span></li><li>Pandas 数据快速处理<br><span class="exturl" data-url="aHR0cHM6Ly9wYW5kYXMucHlkYXRhLm9yZy8=" title="https://pandas.pydata.org/">Pandas官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhcy1kZXYvcGFuZGFzLw==" title="https://github.com/pandas-dev/pandas/">Pandas-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9wYW5kYXMv" title="https://gitee.com/mirrors/pandas/">Pandas-Gitee<i class="fa fa-external-link"></i></span></li><li>Matplotlib 可视化绘制<br><span class="exturl" data-url="aHR0cHM6Ly9tYXRwbG90bGliLm9yZy8=" title="https://matplotlib.org/">Matplotlib官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hdHBsb3RsaWIvbWF0cGxvdGxpYi8=" title="https://github.com/matplotlib/matplotlib/">Matplotlib-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9tYXRwbG90bGliLw==" title="https://gitee.com/mirrors/matplotlib/">Matplotlib-Gitee<i class="fa fa-external-link"></i></span></li><li>Git 代码版本管理工具<br><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=" title="https://git-scm.com/">Git管理工具官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdC9naXQv" title="https://github.com/git/git/">Git-GitHub<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9naXQv" title="https://gitee.com/mirrors/git/">Git-Gitee<i class="fa fa-external-link"></i></span></li></ul><h2 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h2><h3 id="Linux-OS"><a href="#Linux-OS" class="headerlink" title="Linux OS"></a>Linux OS</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3Iv" title="https://developer.aliyun.com/mirror/">阿里云镜像<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmh1YXdlaWNsb3VkLmNvbS9vcy9pbWFnZS8=" title="https://mirrors.huaweicloud.com/os/image/">华为镜像<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24v" title="http://mirrors.ustc.edu.cn/">中科院<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==" title="https://mirrors.tuna.tsinghua.edu.cn/">清华大学<i class="fa fa-external-link"></i></span></li></ul><h3 id="Python包-PyPi"><a href="#Python包-PyPi" class="headerlink" title="Python包 PyPi"></a>Python包 PyPi</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvcHlwaS8=" title="https://developer.aliyun.com/mirror/pypi/">阿里云镜像<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvcHlwaS8=" title="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">清华大学<i class="fa fa-external-link"></i></span></li></ul><h3 id="Ubuntu-软件源"><a href="#Ubuntu-软件源" class="headerlink" title="Ubuntu 软件源"></a>Ubuntu 软件源</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvdWJ1bnR1Lw==" title="https://developer.aliyun.com/mirror/ubuntu/">阿里云镜像<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvdWJ1bnR1Lw==" title="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华大学<i class="fa fa-external-link"></i></span></li></ul><h1 id="简要说明-introduction"><a href="#简要说明-introduction" class="headerlink" title="简要说明 introduction"></a>简要说明 introduction</h1><ul><li>清晰思路，整个安装过程一定要思路清晰，每一步都需要知道在干啥子</li><li>本文仅做参考，可能随着岁间流逝，有些命令有所变换，笔者尽量做到最新，希望更确定命令参考官方说明文档</li><li>笔者研究方向：数字图像处理 DIP、计算机视觉 CV</li><li>笔记信条：尽量操作过程不要展示图片，入这门，思维抽象很重要，这些操作必是熟稔于心</li><li>欢迎对内容进行补充和纠错，能够帮助更多的人！</li><li>评论或者Email@ </li><li>Email：<span class="exturl" data-url="bWFpbHRvOjI2OTQwNDgxNjhAcXEuY29t" title="mailto:2694048168@qq.com">2694048168@qq.com<i class="fa fa-external-link"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发环境-platform&quot;&gt;&lt;a href=&quot;#开发环境-platform&quot; class=&quot;headerlink&quot; title=&quot;开发环境 platform&quot;&gt;&lt;/a&gt;开发环境 platform&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;操作系统 OS&lt;ul&gt;
&lt;li&gt;Wind
      
    
    </summary>
    
      <category term="ML &amp; DL" scheme="https://2694048168.github.io/categories/ML-DL/"/>
    
    
      <category term="MachineLearning" scheme="https://2694048168.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle竞赛知识准备</title>
    <link href="https://2694048168.github.io/Kaggle%E7%AB%9E%E8%B5%9B%E7%9F%A5%E8%AF%86%E5%87%86%E5%A4%87/"/>
    <id>https://2694048168.github.io/Kaggle竞赛知识准备/</id>
    <published>2020-07-17T13:59:13.000Z</published>
    <updated>2020-07-17T14:30:50.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><ul><li>机器学习应用领域</li><li>机器学习常用算法</li><li>常用工具</li><li>建模与问题解决流程<ol><li>数据处理</li><li>特征工程</li><li>模型选择</li><li>寻找最佳超参数：交叉验证</li><li>模型分析与模型融合</li></ol></li><li>Kaggle wiki</li><li>实战案例</li></ul><h1 id="知识理论"><a href="#知识理论" class="headerlink" title="知识理论"></a>知识理论</h1><ul><li>数学理论<ul><li>线性代数</li><li>概率论</li><li>数理统计</li><li>高等数学（微积分）</li></ul></li><li>算法理论<ul><li>算法导论（经典书籍）</li><li>计算机硬件知识理论</li><li>计算机软件知识理论</li></ul></li><li>计算机语言<ul><li>Python</li><li>C or C-plus-plus</li><li>Java</li><li>Golang</li></ul></li><li>编辑器使用 <ul><li>写代码效率</li><li>效率高就是王道</li></ul></li><li>编译器使用 <ul><li>构建项目工程代码编译</li><li>make &amp; Makefile</li><li>CMake</li></ul></li><li>知识架构<ul><li>博而广之</li><li>T 型架构</li><li>相关领域一定要广博，专攻领域一定要深入</li><li>不仅仅是技术要不断更新，业务流程也是有了解的必要</li></ul></li></ul><h1 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h1><ul><li>经济相关：股市、房价</li><li>能源相关：产能预测、分配与合理利用</li><li>NLP相关：检索、分类、主题、相似度</li><li>CV相关：图像处理、视觉识别、目标检测</li><li>互联网用户行为：CTR预测</li><li>销量预测：电商、连锁店、超市</li><li>深度学习应用：数字图像理解</li><li>推荐系统相关：电商推荐、电影推荐、个性化推荐</li><li>其他预测：气候、社交网络</li></ul><h1 id="常用算法-algorithms"><a href="#常用算法-algorithms" class="headerlink" title="常用算法 algorithms"></a>常用算法 algorithms</h1><p><strong>具体分类情况，要了然于心</strong></p><ul><li>SVM</li><li>SVD</li><li>PCA</li><li>K-means</li><li>Linear</li><li>Polynomial</li><li>Decision trees</li><li>Random Forests</li><li>Aprori</li><li>FP-Growth</li><li>KNN</li><li>Logistic Regression</li><li>Naive-Bayes</li></ul><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><ul><li>Scikit-Learn</li><li>xgboost</li><li>TensotFlow</li><li>Opencv</li><li>PyTorch</li><li>Numpy</li><li>Pandas</li><li>Matplotlib</li><li>Jupyter Notebook &amp; Jupyter Lab</li><li>Python3</li><li>C-plus-plus</li><li>MapReduce</li><li>Hive</li><li>SQL</li><li>Hadoop</li><li>Spark</li></ul><h1 id="算法建模"><a href="#算法建模" class="headerlink" title="算法建模"></a>算法建模</h1><ul><li>数据处理</li><li>特征工程</li><li>算法原理（数学计算）</li><li>算法实现（Python、C-plus-plus）</li><li>模型评估</li><li>模型融合（集成学习）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;机器学习应用领域&lt;/li&gt;
&lt;li&gt;机器学习常用算法&lt;/li&gt;
&lt;li&gt;常用工具
      
    
    </summary>
    
      <category term="Python" scheme="https://2694048168.github.io/categories/Python/"/>
    
    
      <category term="kaggle" scheme="https://2694048168.github.io/tags/kaggle/"/>
    
  </entry>
  
  <entry>
    <title>ssh远程服务</title>
    <link href="https://2694048168.github.io/ssh%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1/"/>
    <id>https://2694048168.github.io/ssh远程服务/</id>
    <published>2020-07-14T08:05:52.000Z</published>
    <updated>2020-07-14T14:01:56.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h1><p>ssh – secure shell，提供安全的远程登录</p><p>搭建 Linux 开发环境中，ssh 的服务的安装是其中必不可少的一步</p><p>ssh 方便一个开发小组中人员登录一台服务器，从事代码的编写、编译、运行</p><p>ssh 是一种安全协议，主要用于给远程登录会话数据进行加密，保证数据传输的安全</p><p>SSH有客户端 openssh-client 和 openssh-server 服务端</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看 ssh 服务是否安装</span><br><span class="line">dpkg -l | grep ssh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 更新软件源</span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装 ssh 服务</span><br><span class="line">sudo apt install openssh-server openssh-client</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看 sshd 服务是否开启</span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动 ssh 服务</span><br><span class="line">sudo /etc/init.d/ssh start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 默认是不允许 root 远程登录的，可以再配置文件开启</span><br><span class="line"><span class="meta">#</span> 找到 PermitRootLogin without-password 修改为 PermitRootLogin yes</span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重启 ssh 服务</span><br><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><h1 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h1><p><strong>通过修改 openssh 的配置文件 sshd_config 可以自定义需求</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p><strong>可以将 远程连接软件自动生成的 ssh 公钥给予一份服务器，然后可以实现免密登录</strong><br>&emsp;配置 SSH 免密登陆，首先在每台服务器生成密钥对后，即每台机器上都执行 ssh-keygen –t rsa 需要输入密码的地方直接按 Enter 回车键，这样就采用 RSA加密算法生成了公钥秘钥在当前隐藏文件夹.ssh 下。然后在每台服务器上执行 sshcopy-id命令，将公钥复制到其它两台服务器上即可，该命令可以自动将公钥添加到名为 authorized_keys的文件中，在每台服务器都执行完以上步骤后就可以实现多台服务器相互无密码登陆了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 采用 RSA 加密算法生成公钥秘钥，需要输入密码的地方全部直接回车</span><br><span class="line"><span class="meta">#</span> 生成的公钥在当前 .ssh 文件夹下</span><br><span class="line">ssh-keygen -t rsa </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 服务器之间直接使用命令进行公钥拷贝</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub 当前主机ip或者主机名（主机名需要与主机ip进行映射）@需要免密登录的主机ip或者主机名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 如果是远程登录软件生成的公钥，就需要将公钥文件内容上传到服务器的 authorized_keys 文件中</span><br></pre></td></tr></table></figure><p>关于 Linux 集群服务器之间的免密登录，请参考笔记《Hadoop分布式环境搭建》</p><p><strong>配置文件的内容</strong></p><ol><li>常见 SSH 服务器监听</li></ol><ul><li>Port 22                    //监听的端口为22</li><li>Protocol 2                //使用SSH V2协议</li><li>ListenAdderss 0.0.0.0    //监听的地址为所有地址</li><li>UseDNS no                //禁止DNS反向解析</li></ul><ol start="2"><li>常见用户登录控制</li></ol><ul><li>PermitRootLogin no            //禁止root用户登录</li><li>PermitEmptyPasswords no        //禁止空密码用户登录</li><li>LoginGraceTime 2m            //登录验证时间为2分钟</li><li>MaxAuthTries 6                //最大重试次数为6</li><li>AllowUsers user            //只允许user用户登录，与DenyUsers选项相反</li></ul><ol start="3"><li>常见登录验证方式</li></ol><ul><li>PasswordAuthentication yes                //启用密码验证</li><li>PubkeyAuthentication yes                    //启用秘钥验证</li><li>AuthorsizedKeysFile .ssh/authorized_keys    //指定公钥数据库文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ubuntu 修改默认 root 密码</span><br><span class="line">sudo passwd</span><br><span class="line"><span class="meta">#</span> 然后会提示输入当前用户的密码,按 enter 键</span><br><span class="line"><span class="meta">#</span> 终端会提示输入新的密码并确认，此时的密码就是新的 root 密码</span><br><span class="line"><span class="meta">#</span> 修改完毕以后，在执行 su root 命令，此时输入新的 root 密码即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;overview&quot;&gt;&lt;a href=&quot;#overview&quot; class=&quot;headerlink&quot; title=&quot;overview&quot;&gt;&lt;/a&gt;overview&lt;/h1&gt;&lt;p&gt;ssh – secure shell，提供安全的远程登录&lt;/p&gt;
&lt;p&gt;搭建 Linux 开
      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="https://2694048168.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>机器学习项目清单</title>
    <link href="https://2694048168.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE%E6%B8%85%E5%8D%95/"/>
    <id>https://2694048168.github.io/机器学习项目清单/</id>
    <published>2020-07-13T09:27:20.000Z</published>
    <updated>2020-07-13T13:24:57.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习项目清单，主要有八步"><a href="#机器学习项目清单，主要有八步" class="headerlink" title="机器学习项目清单，主要有八步"></a>机器学习项目清单，主要有八步</h1><ol><li>架构问题，关注蓝图。</li><li>获取数据。</li><li>研究数据以获取灵感。</li><li>准备数据以更 好地将低层模型暴露给机器学习算法。</li><li>研究各 种不同的模型，并列出最好的模型。</li><li>微调模型， 并将其组合为更好的解决方案。</li><li>提出解决方案。</li><li>启动、监视、维护系统。</li></ol><h1 id="架构问题，关注蓝图"><a href="#架构问题，关注蓝图" class="headerlink" title="架构问题，关注蓝图"></a>架构问题，关注蓝图</h1><ol><li>用商业术语定义目标。</li><li>方案如何使用?</li><li>目前的解决方案/办法是什么?</li><li>应该如何架构问题 (有监督/无监督，在线/离线，等等) ?</li><li>如何测量性能?</li><li>性能指标是否 与业务目标一致?</li><li>每个业务目标需要的最低性能是什么?</li><li>有没有一些相似的问题?能重用一些经验和工具吗?</li><li>有没有 相关有经验的人?</li><li>如何手 动解决此问题?</li><li>列出目前为止你(或其他人)的假设。</li><li>如果 可能的话，验证假设。</li></ol><h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1><ul><li>尽可能的自动化，以便获取最新数据。</li></ul><ol><li>列出需要的数据及其体量。</li><li>查找 并记录获取数据的途径。</li><li>检查需要的空间。</li><li>检查法律义务， 必要时获取授权。</li><li>获取访问权限。</li><li>创建工作空间(确保具有足够的存储空间)。</li><li>获取数据。</li><li>将数据转 换为可操作的格式(不改变数据本身)。</li><li>确保 删除或保护敏感信息(例如，匿名)。</li><li>检查数据的类型和大小(时间序列、样本、地点等)</li><li>采样一个测试数据集，放在一-边，永远不要用它(没有数据窥视! )。</li></ol><h1 id="研究数据"><a href="#研究数据" class="headerlink" title="研究数据"></a>研究数据</h1><ul><li>试着从这些步骤的领域专家那里获取灵感。</li></ul><ol><li>创建数据的副本用于研究(如果需要，可以将其抽样为可管理的大小)。</li><li>创建一个 Jupyter笔记本来记录数据研究。</li><li>研究每个属性及其特征<ul><li>名字</li><li>类型(分类、整型/浮点型、有界/无界、文本、结构等)</li><li>缺失值的百分比</li><li>噪音和噪音类型(随机、异常、舍入误差等)</li><li>可能有用的任务</li><li>分布类型(高斯、统一、对数等)</li></ul></li><li>对于有监督的学习任务，确认目标属性。</li><li>可视化数据。</li><li>研究属性之 间的相关性。</li><li>研究如何手动解决问题。</li><li>确定希望使 用转换。</li><li>确定可能有用的额外数据(回到之前的“获取数据”部分)。</li><li>记录学 习到的东西。</li></ol><h1 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h1><p><strong>注意</strong></p><ul><li>在数据的副本上工作(保持原始数据集不变)。</li><li>编写适用于所有数据转换的函数，原因有五个<ul><li>可以很容易地准备下一次得到新数据时的数据</li><li>可以在未来的项目中使用这些转换</li><li>清理和准备测试数据集</li><li>一旦解决方案失效，用来清理和准备新数据实例</li><li>可以轻松地将你的准备选择作为超参数</li></ul></li></ul><ol><li>数据清理</li></ol><ul><li>修复或删除异常值(可选)</li><li>填充缺失值(例如，使用零、平均数、中位数等)或删除该行(或列)</li></ul><ol start="2"><li>特征选择 (可选)<ul><li>删除不能为任务提供任何有用信息的属性</li></ul></li><li>在适当情况下， 处理特征:<ul><li>离散连续特征</li><li>分解特征(如，分类、日期/时间等)</li><li>添加期望的特征转换(如，log(x)、 sqrt(x)、 x2 等)</li><li>聚合特征称为期望的新特征</li></ul></li></ol><h1 id="列出期望的模型"><a href="#列出期望的模型" class="headerlink" title="列出期望的模型"></a>列出期望的模型</h1><ul><li>如果数据很大，可能需要采样为较小的训练集，以便于在合理的时间内训练不同的模型(注意，这会对诸如大型神经集或随机森林等复杂模型造成不利影响)。再次，尽可能地自动化这些步骤。</li></ul><ol><li>使用标准参数，从不同类别(例如，线性、朴素贝叶斯、SVM、 随机森林、神经网络等)中训练需求快速的不成熟的模型。</li><li>测量并比较它们的性能。<ul><li>对于每个模型，使用N倍交叉验证并计算N次折叠的性能测试的均值和标准差。</li></ul></li><li>分析每个算法最重要的变量。</li><li>分析模型产生的错误类型。<ul><li>人类用什么样的数据避免这些错误?</li></ul></li><li>快速进行特征选择和处理。</li><li>对前面五步进行一-两次快速迭代。</li><li>列出前三到五个最有希望的模型，倾向于选择有不同错误类型的模型。</li></ol><h1 id="微调系统"><a href="#微调系统" class="headerlink" title="微调系统"></a>微调系统</h1><ul><li>你将希望为这一步使用尽可能多的数据，特别是在微调结束时。永远尽可能地自动化。</li></ul><ol><li>使用交叉验证微调超参数。<ul><li>把数据转换选择当作超参数，尤其是不确定时(例如，应该用零或者平均值填充缺失值吗?或者直接删除它?)。</li><li>除非需要研究的超参数值很少，否则更喜欢在网格搜索上随机搜索。如果训练很长，你可能更喜欢贝叶斯优化方法(例如，如Jasper Snoek、Hugo Larochelle和Ryan Adams所述，使用高斯过程进行先验(ttps:/oo.gl/PEFfGr)) 。</li></ul></li><li>尝试组合方法。组合多个好模型往往比单独运行效果好。</li><li>一旦你对最终模型有信心，在测试集上测量它的性能以估计泛化误差。</li><li>测量泛化误差后，不要调整模型:只需要开始过度拟合测试集。</li></ol><h1 id="展示解决方案"><a href="#展示解决方案" class="headerlink" title="展示解决方案"></a>展示解决方案</h1><ol><li>文档化你所做的工作。</li><li>创建 完美的演示。<ul><li>首先确保突出蓝图。</li></ul></li><li>解释 为什么你的解决方案达到了业务目标。</li><li>不要忘记展示你发现的一些有趣的地方。<ul><li>描述什么可以工作，什么不行</li><li>列出你的假设和系统的局限</li></ul></li><li>确保你的关键发现被完美展示或易于记忆的陈述。</li></ol><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><ol><li>准备好生产环境的解决方案(插入生产数据输人，写单元测试等)。</li><li>编写监控代码，定期检查系统的性能，出问题时及时报警。<ul><li>同样需要考虑缓慢退化:随着数据的增加，模型往往会“腐烂”</li><li>测量性能可能需要人 工流水线(例如，众包服务)</li><li>同时监控输入质量(例如，发送随机值的故障传感器，或其他团队的输出过时)，这对在线学习系统尤为重要</li></ul></li><li>定期对新数据重新建模（尽可能自动化）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习项目清单，主要有八步&quot;&gt;&lt;a href=&quot;#机器学习项目清单，主要有八步&quot; class=&quot;headerlink&quot; title=&quot;机器学习项目清单，主要有八步&quot;&gt;&lt;/a&gt;机器学习项目清单，主要有八步&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;架构问题，关注蓝图。&lt;/li&gt;

      
    
    </summary>
    
      <category term="读书" scheme="https://2694048168.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="MachineLearning" scheme="https://2694048168.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>CMake笔记2</title>
    <link href="https://2694048168.github.io/CMake%E7%AC%94%E8%AE%B02/"/>
    <id>https://2694048168.github.io/CMake笔记2/</id>
    <published>2020-07-12T08:25:47.000Z</published>
    <updated>2020-07-12T14:31:36.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GNU-编译链接工具链"><a href="#GNU-编译链接工具链" class="headerlink" title="GNU 编译链接工具链"></a>GNU 编译链接工具链</h2><h3 id="Liunx-gcc-tool-chain-工具链"><a href="#Liunx-gcc-tool-chain-工具链" class="headerlink" title="Liunx-gcc tool_chain(工具链)"></a>Liunx-gcc tool_chain(工具链)</h3><ol><li>预处理</li></ol><p><strong>生成&lt;.i&gt;文件，通过选项-E可以使编译器在预处理结束时停止编译</strong></p><ul><li>例如：gcc -E -o hello.i hello.c</li></ul><ol start="2"><li>编译</li></ol><p><strong>生成&lt;.s&gt;汇编代码文件，通过选项-S可以使gcc在进行编译后停止</strong></p><ul><li>例如：gcc -S -o hello.s hello.c</li></ul><ol start="3"><li>汇编</li></ol><p><strong>生成&lt;.o&gt;的目标文件，是机器语言代码《二进制》，当一个程序由多个代码文件    构成时，每个文件都要先完成汇编工作，生成.o目标文件后，才能进行链接，可以通过选项-C生成目标文件</strong></p><ul><li>例如：gcc -C -o hello.o helllo.c</li></ul><ol start="4"><li>链接</li></ol><p><strong>将程序的所有机器代码的目标文件链接，使操作系统能加载为可执行文件</strong></p><ul><li>例如：gcc -o hello hello.c</li><li>或者：gcc hello.c -o hello</li></ul><h2 id="Makefile-构建编译链接"><a href="#Makefile-构建编译链接" class="headerlink" title="Makefile 构建编译链接"></a>Makefile 构建编译链接</h2><h3 id="makefile-概述"><a href="#makefile-概述" class="headerlink" title="makefile 概述"></a>makefile 概述</h3><p>make 命令执行时，需要一个 makefile 文件，以告诉 make 命令需要怎么样的去编译和链接程序。</p><ul><li>如果这个工程没有编译过，那么所有c文件都要编译并被链接。</li><li>如果这个工程的某几个c文件被修改，那么只编译被修改的c文件，并链接目标程序。</li><li>如果这个工程的头文件被改变了，那么需要编译引用了这几个头文件的c文件，并链接目标程序。</li><li>只要 makefile 写得够好，所有的这一切，只用一个 make 命令就可以完成，make 命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重编译，从而自动编译所需要的文件和链接目标程序。</li></ul><h2 id="CMake-构建编译链接"><a href="#CMake-构建编译链接" class="headerlink" title="CMake 构建编译链接"></a>CMake 构建编译链接</h2><h3 id="基本概述请移步-《CMake笔记》文章"><a href="#基本概述请移步-《CMake笔记》文章" class="headerlink" title="基本概述请移步 《CMake笔记》文章"></a>基本概述请移步 《CMake笔记》文章</h3><h3 id="Demos"><a href="#Demos" class="headerlink" title="Demos"></a>Demos</h3><p><strong>单目录单文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 0、项目工程结构</span><br><span class="line">mkdir project_name</span><br><span class="line">cd project_name</span><br><span class="line">touch Main.cpp CMakeLists.txt</span><br><span class="line">vim Main.cpp</span><br><span class="line">vim CMakeLists.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1、编写 CMakeLists.txt 文件</span><br><span class="line"><span class="meta">#</span> CMake 要求最低版本</span><br><span class="line">CMAKE_MINIMUM_REQUIRED (VERSION 3.5)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 项目工程名称以及工程支持的语言</span><br><span class="line">PROJECT (project_name [CXX][C][JAVA])</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成可执行文件</span><br><span class="line">ADD_EXECUTABLE (executable_name Main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、使用 cmake 命令生成 Makefile 文件</span><br><span class="line">cmake .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、使用 make 命令</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>单目录多文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 0、项目工程结构</span><br><span class="line">mkdir project_name</span><br><span class="line">cd project_name</span><br><span class="line">touch Main.cpp Fuction.cpp</span><br><span class="line">vim Main.cpp</span><br><span class="line">touch CMakeLists.txt </span><br><span class="line">vim CMakeLists.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1、编写 CMakeLists.txt 文件</span><br><span class="line"><span class="meta">#</span> CMake 要求最低版本</span><br><span class="line">CMAKE_MINIMUM_REQUIRED (VERSION 3.5)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 项目工程名称以及工程支持的语言</span><br><span class="line">PROJECT (project_name [CXX][C][JAVA])</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 自动搜索路径下所有的源文件赋值给变量</span><br><span class="line">AUX_SOURCE_DIRECTORY (./ src_dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成可执行文件</span><br><span class="line">ADD_EXECUTABLE (executable_name $&#123;src_dir&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、使用 cmake 命令生成 Makefile 文件</span><br><span class="line">cmake .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、使用 make 命令</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>多目录多文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 0、项目工程结构</span><br><span class="line">mkdir project_name</span><br><span class="line">cd project_name</span><br><span class="line">touch Main.cpp CMakeLists.txt</span><br><span class="line">vim Main.cpp</span><br><span class="line">vim CMakeLists.txt</span><br><span class="line">cd ..</span><br><span class="line">mkdir lib</span><br><span class="line">cd lib </span><br><span class="line">touch CMakeLists.txt Function.cpp Function.hpp </span><br><span class="line">vim CMakeLists.txt Function.cpp Function.hpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1、编写 lib 文件夹下的 CMakeLists.txt 文件</span><br><span class="line"><span class="meta">#</span> 自动搜索路径下所有的源文件赋值给变量</span><br><span class="line">AUX_SOURCE_DIRECTORY (. src_dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加静态库 STATIC 动态库 SHARE</span><br><span class="line">ADD_LIBRARY (Function STATIC $&#123;src_dir&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、编写 project_name 文件夹下的 CMakeLists.txt 文件</span><br><span class="line"><span class="meta">#</span> CMake 要求最低版本</span><br><span class="line">CMAKE_MINIMUM_REQUIRED (VERSION 3.5)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 项目工程名称以及工程支持的语言</span><br><span class="line">PROJECT (project_name [CXX][C][JAVA])</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加工程目录的依赖的源文件的子目录</span><br><span class="line">ADD_SUBDIRECTORY (./lib)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 自动搜索路径下所有的源文件赋值给变量</span><br><span class="line">AUX_SOURCE_DIRECTORY (./ src_dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成可执行文件</span><br><span class="line">ADD_EXECUTABLE (executable_name $&#123;src_dir&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 链接静态库文件 Function</span><br><span class="line">TARGET_LINK_LIBRARIES (executable_name Function)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、使用 cmake 命令生成 Makefile 文件</span><br><span class="line">cmake .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4、使用 make 命令</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>多目录多文件的标准工程结构</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 0、项目工程结构</span><br><span class="line">mkdir project_name</span><br><span class="line">cd project_name</span><br><span class="line">mkdir src</span><br><span class="line">cd src</span><br><span class="line">touch Main.cpp CMakeLists.txt</span><br><span class="line">vim Main.cpp</span><br><span class="line">vim CMakeLists.txt</span><br><span class="line">cd ..</span><br><span class="line">mkdir lib</span><br><span class="line">cd lib </span><br><span class="line">touch CMakeLists.txt Function.cpp Function.hpp </span><br><span class="line">vim CMakeLists.txt Function.cpp Function.hpp</span><br><span class="line">cd ..</span><br><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1、编写 src 文件夹下的 CMakeLists.txt 文件</span><br><span class="line"><span class="meta">#</span> 添加头文件搜索路径 = project_name/lib</span><br><span class="line">INCLUDE_DIRECTORY ($&#123;PROJECT_SOURCE_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置 生成可执行程序的输出路径 = build/bin</span><br><span class="line">SET (EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 自动搜索路径下所有的源文件赋值给变量</span><br><span class="line">AUX_SOURCE_DIRECTORY (./ src_dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成可执行文件</span><br><span class="line">ADD_EXECUTABLE (executable_name $&#123;src_dir&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 链接静态库文件 Function</span><br><span class="line">TARGET_LINK_LIBRARIES (executable_name Function)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、编写 lib 文件夹下的 CMakeLists.txt 文件</span><br><span class="line"><span class="meta">#</span> 自动搜索路径下所有的源文件赋值给变量</span><br><span class="line">AUX_SOURCE_DIRECTORY (. src_dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置 生成库的输出路径 = build/lib</span><br><span class="line">SET (LIBRARY_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加静态库 STATIC 动态库 SHARE</span><br><span class="line">ADD_LIBRARY (Function STATIC $&#123;src_dir&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、编写 project_name 文件夹下的 CMakeLists.txt 文件(顶层 CMakeLists.txt)</span><br><span class="line"><span class="meta">#</span> CMake 要求最低版本</span><br><span class="line">CMAKE_MINIMUM_REQUIRED (VERSION 3.5)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 项目工程名称以及工程支持的语言</span><br><span class="line">PROJECT (project_name [CXX][C][JAVA])</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加工程目录的依赖的源文件的子目录</span><br><span class="line">ADD_SUBDIRECTORY (./lib)</span><br><span class="line">ADD_SUBDIRECTORY (./src)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4、使用 cmake 命令生成 Makefile 文件</span><br><span class="line"><span class="meta">#</span> 采用外部编译</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5、使用 make 命令</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>自定义编译选项</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 0、项目工程结构</span><br><span class="line">mkdir project_name</span><br><span class="line">cd project_name</span><br><span class="line">mkdir src</span><br><span class="line">cd src</span><br><span class="line">touch Main.cpp CMakeLists.txt</span><br><span class="line">vim Main.cpp</span><br><span class="line">vim CMakeLists.txt</span><br><span class="line">cd ..</span><br><span class="line">mkdir lib</span><br><span class="line">cd lib </span><br><span class="line">touch CMakeLists.txt Function.cpp Function.hpp </span><br><span class="line">vim CMakeLists.txt Function.cpp Function.hpp</span><br><span class="line">cd ..</span><br><span class="line">mkdir build</span><br><span class="line">mkdir config</span><br><span class="line">cd config</span><br><span class="line">touch config.hpp.in</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1、编写 src 文件夹下的 CMakeLists.txt 文件</span><br><span class="line"><span class="meta">#</span> 设置 生成可执行程序的输出路径 = build/bin</span><br><span class="line">SET (EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 配置自定义编译选项部分 = "input" "output"</span><br><span class="line">CONFIG_FILE ("$&#123;PROJECT_SOURCE_DIR&#125;/config/config.hpp.in" </span><br><span class="line">             "$&#123;PROJECT_SOURCE_DIR&#125;/config/config.hpp.in" </span><br><span class="line">             )</span><br><span class="line"><span class="meta">#</span> 自定义编译选项 宏定义</span><br><span class="line">OPTION (USE_MATH</span><br><span class="line">        ON</span><br><span class="line">        )</span><br><span class="line"><span class="meta">#</span> 条件编译 = 使用自己编写的库，否则使用第三方库</span><br><span class="line">IF(USE_MATH)</span><br><span class="line"><span class="meta">#</span> 添加头文件搜索路径 = project_name/lib</span><br><span class="line">INCLUDE_DIRECTORY ($&#123;PROJECT_SOURCE_DIR&#125;/lib)</span><br><span class="line">ENDIF(USE_MATH)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 自动搜索路径下所有的源文件赋值给变量</span><br><span class="line">AUX_SOURCE_DIRECTORY (./ src_dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成可执行文件</span><br><span class="line">ADD_EXECUTABLE (executable_name $&#123;src_dir&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 链接静态库文件 Function</span><br><span class="line">TARGET_LINK_LIBRARIES (executable_name Function)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、编写自定义编译选项文件 </span><br><span class="line">cd config</span><br><span class="line">vim config.hpp.in</span><br><span class="line"><span class="meta">#</span> 添加以下内容——自定义编译选项</span><br><span class="line"><span class="meta">#</span>cmakedefine USE_MATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、编写 lib 文件夹下的 CMakeLists.txt 文件</span><br><span class="line"><span class="meta">#</span> 自动搜索路径下所有的源文件赋值给变量</span><br><span class="line">AUX_SOURCE_DIRECTORY (. src_dir)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置 生成库的输出路径 = build/lib</span><br><span class="line">SET (LIBRARY_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加静态库 STATIC 动态库 SHARE</span><br><span class="line">ADD_LIBRARY (Function STATIC $&#123;src_dir&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4、编写 project_name 文件夹下的 CMakeLists.txt 文件(顶层 CMakeLists.txt)</span><br><span class="line"><span class="meta">#</span> CMake 要求最低版本</span><br><span class="line">CMAKE_MINIMUM_REQUIRED (VERSION 3.5)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 项目工程名称以及工程支持的语言</span><br><span class="line">PROJECT (project_name [CXX][C][JAVA])</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加工程目录的依赖的源文件的子目录</span><br><span class="line">ADD_SUBDIRECTORY (./lib)</span><br><span class="line">ADD_SUBDIRECTORY (./src)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5、使用 cmake 命令生成 Makefile 文件</span><br><span class="line"><span class="meta">#</span> 采用外部编译</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 6、使用 make 命令</span><br><span class="line">make</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GNU-编译链接工具链&quot;&gt;&lt;a href=&quot;#GNU-编译链接工具链&quot; class=&quot;headerlink&quot; title=&quot;GNU 编译链接工具链&quot;&gt;&lt;/a&gt;GNU 编译链接工具链&lt;/h2&gt;&lt;h3 id=&quot;Liunx-gcc-tool-chain-工具链&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="C&amp;C++" scheme="https://2694048168.github.io/categories/C-C/"/>
    
    
      <category term="CMake" scheme="https://2694048168.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法工作流程简述</title>
    <link href="https://2694048168.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/"/>
    <id>https://2694048168.github.io/机器学习算法工作流程简述/</id>
    <published>2020-07-10T13:28:27.000Z</published>
    <updated>2020-07-10T14:46:20.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据科学家-—-主要步骤"><a href="#数据科学家-—-主要步骤" class="headerlink" title="数据科学家 — 主要步骤"></a>数据科学家 — 主要步骤</h1><ol><li>观察大局</li><li>获得数据</li><li>从数据探索和可视化中获得洞见</li><li>机器学习算法的数据准备</li><li>选择和训练模型</li><li>微调模型</li><li>展示解决方案</li><li>启动、监控和维护系统</li></ol><h1 id="观察大局"><a href="#观察大局" class="headerlink" title="观察大局"></a>观察大局</h1><ol><li>获取明确的目标任务</li><li>明确目标任务在整个系统流水线中的位置以及重要性</li><li>明确在流水线中前面的输入以及后面的输出情况</li></ol><h2 id="框架问题"><a href="#框架问题" class="headerlink" title="框架问题"></a>框架问题</h2><ul><li>业务目标</li><li>设定问题</li><li>选择算法</li><li>评测模型</li><li>调整模型</li><li>pipeline</li><li>是否已有解决方案</li><li>监督or无监督or强化学习？分类or回归？批量or在线？（MapReduce）</li></ul><h2 id="选择性能指标"><a href="#选择性能指标" class="headerlink" title="选择性能指标"></a>选择性能指标</h2><p><strong>回归问题</strong></p><ul><li>RMSE</li><li>MAE</li></ul><h2 id="检查假设"><a href="#检查假设" class="headerlink" title="检查假设"></a>检查假设</h2><p>列举和验证目前为止做出的假设，良好习惯，初期检查</p><h1 id="获得数据"><a href="#获得数据" class="headerlink" title="获得数据"></a>获得数据</h1><ol><li>明确数据的来源以及是否实时或者定期更新数据</li><li>自动化创建函数获取数据以及常见工作目录</li><li>快速查看浏览数据的大致情况以及基本统计情况</li><li>划分数据集，创建出未受污染的测试集数据</li></ol><h2 id="创建工作区和下载数据"><a href="#创建工作区和下载数据" class="headerlink" title="创建工作区和下载数据"></a>创建工作区和下载数据</h2><ul><li>编写函数系统自动创建工作区目录和自动下载数据（以便于数据的实时更新）</li></ul><h2 id="快速查看数据"><a href="#快速查看数据" class="headerlink" title="快速查看数据"></a>快速查看数据</h2><ul><li>查看数据集的结构、数据的结构和统计描述，简单查看特征属性，可视化特征属性等等</li></ul><h2 id="创建测试集"><a href="#创建测试集" class="headerlink" title="创建测试集"></a>创建测试集</h2><ul><li>经常被忽略但却是至关重要的</li><li>纯随机的抽样方法</li><li>分层抽样方法</li></ul><h1 id="从数据探索和可视化中获得洞见"><a href="#从数据探索和可视化中获得洞见" class="headerlink" title="从数据探索和可视化中获得洞见"></a>从数据探索和可视化中获得洞见</h1><ol><li>明确数据集的特征属性以及目标变量</li><li>探索数据集的特征属性，获取有价值的信息</li><li>可视化数据集的特征属性，获取有意义的信息</li><li>简单统计特征属性，分析之间相关性，以及与目标变量的相关性</li><li>组合不同特征属性，创建新特征属性，以达到更能适合目标变量</li></ol><h2 id="看数据集的大小情况"><a href="#看数据集的大小情况" class="headerlink" title="看数据集的大小情况"></a>看数据集的大小情况</h2><ul><li>如果训练集数据量特别大，就可以抽样一个探索数据集，操作更加简便快捷一些（探索的速度和效率）</li><li>如果数据集数据量小，可以直接在整个训练集上操作</li><li>将所有特征属性进行简单统计分析以及可视化分析</li><li>分析特征属性与目标变量之间的相关性 corr ：线性关系 或者 非线性关系</li></ul><h2 id="试验不同属性的组合"><a href="#试验不同属性的组合" class="headerlink" title="试验不同属性的组合"></a>试验不同属性的组合</h2><ol><li>识别一些异常值，需要提前清洗</li><li>发现不同属性之间相关性，特别与目标属性相关的属性</li><li>某些属性的分布明显 “重尾” 分布，需要进行转换处理，取对数</li><li>尝试不同属性之间的组合，试着创建新的属性</li></ol><h1 id="机器学习算法的数据准备"><a href="#机器学习算法的数据准备" class="headerlink" title="机器学习算法的数据准备"></a>机器学习算法的数据准备</h1><ol><li>自动化对训练集数据进行转换，编写函数实现完整的数据处理流水线</li><li>数据清理，数据转换，特征选择、特征缩放等等处理流程</li><li>将算法的数据准备形成一个可以复用的流水线 Pipeline</li></ol><h2 id="学习算法的数据准备"><a href="#学习算法的数据准备" class="headerlink" title="学习算法的数据准备"></a>学习算法的数据准备</h2><p>编写函数来执行，而不是手动操作</p><ul><li>可以在任何数据集上轻松实现这些转换（如获得更新的数据库）</li><li>可以建立起一个转换函数的函数库，项目之中重用</li><li>可以实时系统中使用这些函数来转换新数据</li><li>可以轻松尝试多种转换方式，那种转换的组合效果更佳</li><li>回到一个新的干净数据集（复制 strategic_train_set），然后将预测器和标签分开，两者不一定使用相同的转换方式，drop 函数会创建新副本，不影响 strat_train_set</li></ul><h2 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h2><p>缺失值（total_bedrooms） 处理</p><ul><li>放弃缺失值相应的地区（对应的行数据） —— DataFrame.dropna()</li><li>放弃缺失值严重的属性特征字段 —— DataFrame.drop()</li><li>填充缺失值（0、平均数、中位数等等）—— DataFrame.fillna()</li></ul><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="处理文本和分类属性"><a href="#处理文本和分类属性" class="headerlink" title="处理文本和分类属性"></a>处理文本和分类属性</h3><ul><li>大部分算法都是与数值进行交互</li><li>将文本标签转化为数字</li></ul><h3 id="调用类似sklearn的转换器或者自定义转换器"><a href="#调用类似sklearn的转换器或者自定义转换器" class="headerlink" title="调用类似sklearn的转换器或者自定义转换器"></a>调用类似sklearn的转换器或者自定义转换器</h3><ul><li>虽然 sklearn 提供许多有用的转换器，有时需要自定义清理操作或者组合特定属性等任务，编写自己的转换器</li><li>sklearn 依赖与鸭子类型（duck typing）编译，可以与sklearn自身的功能（如流水线pipeline）无缝衔接</li><li>创建一个类，然后添加这三个方法：fit() 返回自身、transform()、fit_transform()</li></ul><h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><ul><li>最重要也是最需要应用到数据上的转换器</li><li>如果输入的数值属性具有非常大的比例差异，导致算法的性能表现不佳</li><li>案例中的房屋数据就是这样，房间总数范围从6到39320，而收入中位数的范围是0到15</li><li>noting：目标值不需要缩放</li><li>同比例缩放所有属性，常用方法：最小-最大缩放 、标准化</li></ul><h3 id="最小-最大缩放（有称之-归一化）"><a href="#最小-最大缩放（有称之-归一化）" class="headerlink" title="最小-最大缩放（有称之 归一化）"></a>最小-最大缩放（有称之 归一化）</h3><ul><li>将数值重新缩放使其最终范围归于 0 到 1 之间</li><li>实现方法是将值减去最小值并除于最大值和最小值的差</li><li>sklearn 提供 MinMaxScaler 转换器，通过调整超参数 feature_range 进行对范围进行更改，不是 0-1</li></ul><h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h3><ul><li>首先将值减去平均值（所以标准化值的均值总是零），然后除以方差，从而使得结果分布具备单位方差</li><li>不同于最小-最大缩放，标准化不会将值绑定到特定范围，对某些算法而言，可能是一个问题，但是标准化的方法受异常值的影响非常小</li><li>sklearn 提供 StandardScaler 转换器，进行标准化</li></ul><h2 id="转换流水线"><a href="#转换流水线" class="headerlink" title="转换流水线"></a>转换流水线</h2><ul><li>许多数据转换步骤需要正确的顺序来执行</li><li>sklearn 提供 Pipeline 来支持这样的转换</li></ul><h1 id="选择和训练模型"><a href="#选择和训练模型" class="headerlink" title="选择和训练模型"></a>选择和训练模型</h1><ol><li>选择算法模型</li><li>训练算法模型</li><li>评估算法模型</li><li>可视化算法模型效果</li></ol><h2 id="培训和评估训练集"><a href="#培训和评估训练集" class="headerlink" title="培训和评估训练集"></a>培训和评估训练集</h2><ul><li>训练一个线性回归模型</li><li>why? 完全没有错误？这个模型真的做到完美？更有可能是这个模型对数据严重过度拟合了，怎么确定过拟合？</li><li>在对算法模型有信心之前，都不要触碰测试集，这里需要将训练集中一部分数据用于训练，另一部分用于模型的验证</li></ul><h2 id="使用交叉验证来更好的进行模型评估"><a href="#使用交叉验证来更好的进行模型评估" class="headerlink" title="使用交叉验证来更好的进行模型评估"></a>使用交叉验证来更好的进行模型评估</h2><ul><li>评估决策时模型的一种方法是使用 train_test_split 函数对训练集划分为较小的训练集和验证集，<br>然后根据这些较小的训练集来训练模型，并对其进行评估。虽然有一定工作量，但是不会太难，而且非常有效。</li><li>另一个不错的选择就是使用 sklearn 的交叉验证功能。</li><li>K-折（K-fold）交叉验证：将训练集随机划分 10 个不同的子集，每一个子集称之为一个折叠（fold），然后对决策树模型进行 10 次训练和评估——每次挑选一个折叠进行评估，其他9个折叠进行训练。最后的结果是一个包含 10 次评估分数的数组</li><li>随机森林模型的表现就要好一点，但请注意，训练集上的分数依然低于验证集，这意味着该模型依然对训练集过度拟合</li></ul><h2 id="解决过拟合方案"><a href="#解决过拟合方案" class="headerlink" title="解决过拟合方案"></a>解决过拟合方案</h2><ol><li>简化模型</li><li>约束模型（正规化，正则化）</li><li>获得更多训练数据</li><li>尝试其他算法模型，没有必要耗费过多时间调整超参数，目的是筛选（2-5）个有效模型</li></ol><h2 id="模型保存以及加载"><a href="#模型保存以及加载" class="headerlink" title="模型保存以及加载"></a>模型保存以及加载</h2><ul><li>每一个尝试过的模型应该保存，可以轻松回到想要的模型中</li><li>同时保存超参数以及训练过的参数，以及交叉验证的评分和实际预测的结果</li><li>轻松对比不同模型类型的评分，以及不同模型造成的错误类型</li><li>通过 Python 的 pickel 模型或者 sklearn.external.joblib 可以保存模型，有效将大型 Numpy 数组序列化</li></ul><h1 id="微调模型（调参过程）"><a href="#微调模型（调参过程）" class="headerlink" title="微调模型（调参过程）"></a>微调模型（调参过程）</h1><ol><li>手动调整模型超参数，选择最佳模型超参数</li><li>网格搜索方法</li><li>随机搜索方法</li><li>集成模型方法</li></ol><h2 id="微调模型方法"><a href="#微调模型方法" class="headerlink" title="微调模型方法"></a>微调模型方法</h2><ul><li>一种微调的方法是手动调整超参数，找到一组很好的超参数组合</li><li>sklearn 的 GridSearchCV 来替代搜索</li></ul><h3 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h3><ul><li>GridSearchCV， 需要进行实验的超参数是什么，以及需要尝试的值，使用交叉验证来评估超参数值的所有可能组合</li><li>noting : 数据准备的步骤也可以当做超参数处理</li><li>可以处理自动寻找处理问题的最佳方法，例如处理异常值、缺失特征以及特征选择等等</li></ul><h3 id="随机搜索"><a href="#随机搜索" class="headerlink" title="随机搜索"></a>随机搜索</h3><ul><li>当探索的组合数量较少，网格搜索是一个不错的选择</li><li>当超参数的搜索范围较大，通常优先选择使用 RandomizedSearchCV</li><li>RandomizedSearchCV 与 GridSearchCV 大致相同，但不会尝试所有可能的组合，</li><li>而是在每次迭代中为每个超参数选择一个随机值，然后对一定数量的随机组合进行评估</li><li>RandomizedSearchCV 显著特点<ul><li>如果运行随机搜索 1000 个迭代，那么将会探索每个超参数的 1000 个不同的值（不是想网格搜索方法那样每个超参数探索几个少量值）</li><li>通过简单地设置迭代次数，更好地控制要分配给探索的超参数的计算预算</li></ul></li></ul><h3 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h3><ul><li>这是一种微调系统的方法，将表现最优的模型组合起来</li><li>组合（集成）的模型通常比单一模型表现更佳，特别是在单一模型会产生不同类型的错误时</li></ul><h2 id="分析最佳模型以及其错误"><a href="#分析最佳模型以及其错误" class="headerlink" title="分析最佳模型以及其错误"></a>分析最佳模型以及其错误</h2><ul><li>通过检查最佳模型，可以得到一些好的洞见</li><li>比如在进行准确预估时， RandomForestRegressor 可以指出每个属性的相对重要程度</li><li>有了这些信息之后，可以尝试删除一些不太有用的特征</li><li>了解系统产生的具体错误，尝试了解是怎么产生的，怎么解决（通过添加额外特征，删除没有信息的特征，清除异常值等等）</li></ul><h2 id="通过测试集评估系统"><a href="#通过测试集评估系统" class="headerlink" title="通过测试集评估系统"></a>通过测试集评估系统</h2><ul><li>通过训练后，有了一个表现足够优秀的系统，用测试集评估最终模型</li><li>从测试集中获取预测器和标签，运行模型 full_pipeline 来转换数据，然后在测试集上评估最终模型</li><li>如果之前进行过大量的超参数调整，此时的评估结果通常会逊于之前使用交叉验证时的表现结果<br>（因为通过不断的调整，系统在验证数据上终于表现良好，在未知数据上可能达不到怎么好的效果）此时一定要忍住调整超参数的诱惑，不要试图努力让测试集的结果也变得好看，因为这些改进在泛化到新数据集时又会变得徒劳无功</li></ul><h1 id="展示解决方案"><a href="#展示解决方案" class="headerlink" title="展示解决方案"></a>展示解决方案</h1><ol><li>获得最佳的问题解决方案</li><li>展示解决方案（强调学习了什么，有什么用，什么没有用，基于什么假设，系统的限制等等）</li><li>记录所有事情，通过清晰的可视化和易于记忆的陈述方式，制作魅力演示文稿</li></ol><h1 id="启动、监控和维护算法模型系统"><a href="#启动、监控和维护算法模型系统" class="headerlink" title="启动、监控和维护算法模型系统"></a>启动、监控和维护算法模型系统</h1><ul><li>编写监控代码，以定期检查系统的实时性能表现，同时在性能下降时触发警报</li><li>需要捕捉的不仅是突然的系统崩溃，系统性能退化值得关注</li><li>需要定期的使用新数据训练模型</li><li>评估系统性能，需要对系统的预测结果进行抽样并评估，通常这一步需要人工分析，分析师是领域专家</li><li>还需要评估输入系统的数据的质量。质量较差的数据会导致性能下降，但是降到触发警报还需要一段时间，所有需要监控输入数据，捕捉这个异常信号</li><li>一般来说需要使用新数据定期训练模型，这个过程需要自动化</li></ul><h1 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h1><ul><li>机器学习项目大概是什么样子的流程</li><li>大部分工作在：数据准备、构建监控工具、建立人工评估的流水线、自动化定期训练模型</li><li>机器学习算法固然重要，但是对于整个流程熟悉也是前提</li><li>不是所有的时间都是用来掌握高级算法，而对于整个流程视而不见</li><li>kaggle 是一个不错的平台，选择感兴趣的数据集，尝试整个流程</li><li>kaggle 给定数据集，明确目标，还有小伙伴的经验分析</li></ul><h2 id="使用真实数据"><a href="#使用真实数据" class="headerlink" title="使用真实数据"></a>使用真实数据</h2><ul><li><p>流行的开放数据存储库</p><ul><li>UC Irvine Machine Learning Repository (<span class="exturl" data-url="aHR0cDovL2FyY2hpdmUuaWNzLnVjaS5lZHUvbWwvZGF0YXNldHMucGhw" title="http://archive.ics.uci.edu/ml/datasets.php">http://archive.ics.uci.edu/ml/datasets.php<i class="fa fa-external-link"></i></span>)</li><li>Kaggle datasets (<span class="exturl" data-url="aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9kYXRhc2V0cw==" title="https://www.kaggle.com/datasets">https://www.kaggle.com/datasets<i class="fa fa-external-link"></i></span>)</li><li>Amazon’s AWS datasets (<span class="exturl" data-url="aHR0cHM6Ly9yZWdpc3RyeS5vcGVuZGF0YS5hd3Mv" title="https://registry.opendata.aws/">https://registry.opendata.aws/<i class="fa fa-external-link"></i></span>)</li></ul></li><li><p>元门户站点（列出开放的数据存储库）</p><ul><li><span class="exturl" data-url="aHR0cDovL2RhdGFwb3J0YWxzLm9yZy8=" title="http://dataportals.org/">http://dataportals.org/<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vcGVuZGF0YW1vbml0b3IuZXUv" title="https://opendatamonitor.eu/">https://opendatamonitor.eu/<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucXVhbmRsLmNvbS8=" title="https://www.quandl.com/">https://www.quandl.com/<i class="fa fa-external-link"></i></span></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据科学家-—-主要步骤&quot;&gt;&lt;a href=&quot;#数据科学家-—-主要步骤&quot; class=&quot;headerlink&quot; title=&quot;数据科学家 — 主要步骤&quot;&gt;&lt;/a&gt;数据科学家 — 主要步骤&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;观察大局&lt;/li&gt;
&lt;li&gt;获得数据&lt;/li&gt;

      
    
    </summary>
    
      <category term="读书" scheme="https://2694048168.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="MachineLearning" scheme="https://2694048168.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令笔记</title>
    <link href="https://2694048168.github.io/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>https://2694048168.github.io/Git常用命令笔记/</id>
    <published>2020-07-04T08:41:13.000Z</published>
    <updated>2020-07-04T09:14:20.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="笔者工作流程篇"><a href="#笔者工作流程篇" class="headerlink" title="笔者工作流程篇"></a>笔者工作流程篇</h3><p><strong>step 1</strong><br>配置好自己的 Git 基本信息和 GitHub 的 ssh 免密登录。 </p><p>首先在 GitHub 上创建一个远程仓库，空的内容。</p><p>获取到该空仓库的 ssh 访问地址。</p><p><strong>step 2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 本地创建空文件夹，作为本地仓库。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 进入空文件夹，初始化 Git 仓库</span><br><span class="line">cd your_dir</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 创建 README.md 文件,并编辑内容</span><br><span class="line">touch README.md</span><br><span class="line">vim README.md</span><br></pre></td></tr></table></figure><p><strong>step 3</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看本地仓库文件状态，工作区文件</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 文件提交到暂缓区</span><br><span class="line">git add filename</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看文件状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 文件提交到本地 Git 仓库</span><br><span class="line">git commit -m "提交说明"</span><br></pre></td></tr></table></figure><p><strong>step 4</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 为该本地仓库设置一个远程仓库</span><br><span class="line"><span class="meta">#</span> 注意使用 ssh协议 连接的仓库地址，</span><br><span class="line"><span class="meta">#</span> 而不用 http 或者https 协议地址，这样可能不能免密登录</span><br><span class="line">git remote add origin github或者gitee仓库地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看该本地仓库的远程仓库信息</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 将本地 Git 仓库推送（备份）到远程仓库中</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 如果不是第一个提交，即远程仓库不是空的，命令如下</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><strong>step 5</strong><br>github 或者 gitee 远程仓库即可查看到备份的内容</p><p>笔者喜欢先备份到 github ，然后同步更新到 gitee。</p><h3 id="简介篇"><a href="#简介篇" class="headerlink" title="简介篇"></a>简介篇</h3><p>Git学习笔记</p><p>版本管理的演变（VCS之前）</p><ul><li>集中式VCS：服务端版本库，SVN</li><li>分布式VCS：客户端和服务端都有版本库,Git</li></ul><p>Git特点：</p><ul><li><p>最优存储能力</p></li><li><p>非凡的性能</p></li><li><p>开源的</p></li><li><p>容易备份</p></li><li><p>支持离线操作</p></li><li><p>容易制定工作流程    </p></li><li><p>学习流程：Git——&gt;GitHub——&gt;GitLab</p></li></ul><p>安装Git<br><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbQ==" title="https://git-scm.com">官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL25wbS50YW9iYW8ub3JnL21pcnJvcnMvZ2l0LWZvci13aW5kb3dzLw==" title="http://npm.taobao.org/mirrors/git-for-windows/">国内镜像网站<i class="fa fa-external-link"></i></span></p><p>查看安装的Git版本：git –version</p><p>注：CHCP是一个计算机指令，能够显示或设置活动代码页编号。<br>代码页  描述<br>65001   UTF-8代码页<br>950 繁体中文<br>936 简体中文默认的GBK<br>437 MS-DOS 美国英语<br>CHCP是MD DOS中的命令，用来显示或设置活动代码页编号的。<br>用法是：CHCP [nnn]     其中nnn指定的是代码页的编号。</p><h3 id="常见命令篇"><a href="#常见命令篇" class="headerlink" title="常见命令篇"></a>常见命令篇</h3><p>配置 user 信息：user.name 和 user.email</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global user.name "your_name"</span><br><span class="line"><span class="meta">$</span> git config --global user.name "your_email@domain.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 注释：</span><br><span class="line"><span class="meta">#</span> --global 对当前用户所有仓库有效</span><br><span class="line"><span class="meta">#</span> --local  只对某个仓库有效（缺省配置）</span><br><span class="line"><span class="meta">#</span> --system 对系统所有登录的用户有效</span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span> 显示当前Git config的配置，加 --list</span><br><span class="line"><span class="meta">#</span> $ git config --list --local</span><br><span class="line"><span class="meta">#</span> $ git config --list --global</span><br><span class="line"><span class="meta">#</span> $ git config --list --system</span><br></pre></td></tr></table></figure><p>建立 Git 仓库<br>1、将已有的项目代码纳入Git管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd 项目代码所在文件夹</span><br><span class="line"><span class="meta">$</span> git init</span><br></pre></td></tr></table></figure><p>2、新建的项目直接使用Git管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd 某个文件夹</span><br><span class="line"><span class="meta">$</span> git init your_project    #会在当前路径下创建和项目名称同名的文件夹</span><br><span class="line"><span class="meta">$</span> cd your_project</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> git add new_file        #添加Git管理文件</span><br><span class="line"><span class="meta">$</span> git status              #查看Git当前工作的状态</span><br><span class="line"><span class="meta">$</span> git commit -m"Add a new file"    #Git提交文件</span><br></pre></td></tr></table></figure><p>往仓库里面添加文件(2次提交)<br>1、工作目录提交到暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add files</span><br></pre></td></tr></table></figure><p>2、暂存区提交到版本历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git commit -m"提交说明"</span><br></pre></td></tr></table></figure><p>3、查看Git历史日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log</span><br></pre></td></tr></table></figure><p>4、提交所有被Git跟踪的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add -u</span><br></pre></td></tr></table></figure><p>5、更改Git仓库里面文件的文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git mv 原文件名 新文件名</span><br><span class="line"><span class="meta">$</span> git status</span><br><span class="line"><span class="meta">$</span> git commit -m"move a file"</span><br></pre></td></tr></table></figure><p>6、查看版本历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log --online    #简易版查看历史</span><br><span class="line"><span class="meta">$</span> git log -n4 --online    #查看4条记录</span><br><span class="line"><span class="meta">$</span> git branch -v    #查看当前项目版本分支</span><br><span class="line"><span class="meta">$</span> git branch -av    #查看所有项目版本分支，当前工作的分支有标明*</span><br><span class="line"><span class="meta">$</span> git log --all    #查看所有项目版本历史</span><br><span class="line"><span class="meta">$</span> git log     #查看当前分支项目版本历史</span><br><span class="line"><span class="meta">$</span> git log --online --all --graph     #以图形化查看项目版本历史</span><br><span class="line"><span class="meta">$</span> git help log    #查看log帮助信息</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">7、gitk——图形化的界面查看Git版本历史信息</span><br><span class="line"></span><br><span class="line">8、切换工作分支，在项目路径下</span><br><span class="line">```shell</span><br><span class="line"><span class="meta">$</span> git checkout master    #master需要切换到的分支</span><br><span class="line"><span class="meta">$</span> git cat-file -t 对象的哈希值    #查看哈希值对应的对象，Git对象有：tree、commit、blob等等</span><br><span class="line"><span class="meta">$</span> git cat-file -p 对象的哈希值    #查看哈希值对应的对象的具体信息内容，也就是那个文件或文件夹</span><br></pre></td></tr></table></figure><p>Git对象彼此之间关系<br>1、commit——&gt;tree——&gt;blob<br>2、每一个对象都有自己的哈希值索引<br>3、blob的内容就是可见的文件内容代码<br>4、文件提交到暂存区就会有对象产生(哈希值索引)</p><p>分离头指针(You are in ‘detached HEAD’ status),<br>    在分离头指针后注意与相应分支进行挂钩(绑定，band)，否则会被Git清除。<br>HEAD头指针与Branch分支的关系</p><p>删除不需要的分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git branch -av    #查看Git仓库分支</span><br><span class="line"><span class="meta">$</span> git branch -d branch_name    #删除Git仓库分支</span><br><span class="line"><span class="meta">$</span> git branch -D branch_name    #强制删除仓库分支</span><br></pre></td></tr></table></figure><p>修改最近一次commit的提交信息message</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log -1    #查看最近一个commit信息日志</span><br><span class="line"><span class="meta">$</span> git commit --amend    #打开最近一次commit提交信息message</span><br><span class="line"><span class="meta">#</span> 3、修改打开的文件message    #修改文件内容并保持即更改完成</span><br></pre></td></tr></table></figure><p>删除Git仓库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git rm file_name   #删除Git仓库的文件，并不是工作区的文件</span><br></pre></td></tr></table></figure><p>紧急处理情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git stach    #保存当前的工作区文件，处理完紧急事件后再回来</span><br><span class="line"><span class="meta">$</span> git stach list    #查看stach保存的工作</span><br><span class="line"><span class="meta">$</span> git stach apply    #回来工作区，当时保存镜像还在</span><br><span class="line"><span class="meta">$</span> git stach pop    #回来工作区，当时保存镜像销毁</span><br></pre></td></tr></table></figure><p>如何指定不需要Git版本控制的文件<br>1、比如IDE自动产生的一些文件或者文件夹，git_ignore_file or directory<br>2、vi .gitignore    #添加忽略文件或者文件夹<br>3、在GitHub上有对应编程语言的gitignore文件配置</p><p>Git备份<br>    1、传输协议：本地文件协议、HTTP/HTTPS网络协议、SSH安全协议。<br>                 file://       http://或者https://  user@git-sercice：<br>    2、哑协议和智能协议：区别在于智能协议显示传输进度是可见的，而哑协议不可见。智能协议传输速度要快。<br>    3、push and fetch：push就是上传到仓库(包括远程仓库GitHub)，fetch就是下载到本地。<br>    4、$git remote -v    #查看仓库<br>    5、$git remote add github_repository</p><p>GitHub代码托管平台<br>    0、GitHub官网：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==" title="https://github.com/">https://github.com/<i class="fa fa-external-link"></i></span><br>    1、GitHub高级搜索：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlYXJjaC9hZHZhbmNlZC8=" title="https://github.com/search/advanced/">https://github.com/search/advanced/<i class="fa fa-external-link"></i></span><br>    2、制作简易个人博客：blog in:readme stars:&gt;5000<br>    3、GitHub帮助页面：<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4=" title="https://help.github.com/en">https://help.github.com/en<i class="fa fa-external-link"></i></span></p><p>Gitee 国内码云<br>    0、Gitee官网：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20v" title="https://gitee.com/">https://gitee.com/<i class="fa fa-external-link"></i></span></p><p>GitLab仓库管理系统<br>    1、GitLab是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，<br>        并在此基础上搭建起来的web服务。安装方法是参考GitLab在GitHub上的Wiki页面。<br>    2、GitLab官网：<span class="exturl" data-url="aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLw==" title="https://about.gitlab.com/">https://about.gitlab.com/<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;笔者工作流程篇&quot;&gt;&lt;a href=&quot;#笔者工作流程篇&quot; class=&quot;headerlink&quot; title=&quot;笔者工作流程篇&quot;&gt;&lt;/a&gt;笔者工作流程篇&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;step 1&lt;/strong&gt;&lt;br&gt;配置好自己的 Git 基本信息和 GitHub
      
    
    </summary>
    
      <category term="工具" scheme="https://2694048168.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://2694048168.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>C++实战2</title>
    <link href="https://2694048168.github.io/C++%E5%AE%9E%E6%88%982/"/>
    <id>https://2694048168.github.io/C++实战2/</id>
    <published>2020-06-20T12:17:25.000Z</published>
    <updated>2020-06-20T12:32:08.274Z</updated>
    
    <content type="html"><![CDATA[<h4 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h4><p><strong>职工管理系统——the Staff Management System</strong></p><ul><li><p>职工管理系统用于管理公司内所有员工的信息</p></li><li><p>员工分为三类：普通员工、经理、老板，显示信息时，有职工编号、姓名、岗位以及职责</p><ul><li>普通员工职责：完成经理下发的任务</li><li>经理职责：完成老板的任务，并下发给员工</li><li>老板职责：管理公司所有事务</li></ul></li><li><p>管理系统实现功能</p><ul><li>退出管理系统：退出当前管理系统</li><li>增加职工信息：将信息录入文件：职工编号、姓名、部门编号</li><li>显示职工信息：显示公司内部所有职工信息</li><li>删除离职职工：按照编号删除指定的职工</li><li>修改职工信息：按照编号修改职工信息</li><li>查找职工信息：按照职工的编号或者姓名进行查找相关人员信息</li><li>按照编号排序：按照职工编号，进行排序，排序规则有用户指定</li><li>清空所有文档：清空文件记录的所有职工信息（清空之前需要再次确认，防止误删！）</li></ul></li></ul><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* file_name: the_Staff_Managerment_System.cpp</span></span><br><span class="line"><span class="comment">** author: Wei Li</span></span><br><span class="line"><span class="comment">** date: 2020-06-16</span></span><br><span class="line"><span class="comment">** Copyright © 2020 Wei Li, All Rights Reserved.</span></span><br><span class="line"><span class="comment">** GitHub: https://github.com/2694048168/</span></span><br><span class="line"><span class="comment">** Gitee：https://gitee.com/weili_yzzcq/</span></span><br><span class="line"><span class="comment">** Blog：https://2694048168.github.io/</span></span><br><span class="line"><span class="comment">** Blog：https://weili_yzzcq.gitee.io/ </span></span><br><span class="line"><span class="comment">** Blog：https://blog.csdn.net/weixin_46782218/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the area of Header files</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Worker_Manager.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // TODO test</span></span><br><span class="line"><span class="comment">// #include "Worker.h"</span></span><br><span class="line"><span class="comment">// #include "Employee.h"</span></span><br><span class="line"><span class="comment">// #include "Manager.h"</span></span><br><span class="line"><span class="comment">// #include "Boss.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 职工管理系统——the Staff Management System</span></span><br><span class="line"><span class="comment">** </span></span><br><span class="line"><span class="comment">** 职工管理系统用于管理公司内所有员工的信息</span></span><br><span class="line"><span class="comment">** 员工分为三类：普通员工、经理、老板，显示信息时，有职工编号、姓名、岗位以及职责</span></span><br><span class="line"><span class="comment">** 普通员工职责：完成经理下发的任务</span></span><br><span class="line"><span class="comment">** 经理职责：完成老板的任务，并下发给员工</span></span><br><span class="line"><span class="comment">** 老板职责：管理公司所有事务</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** 管理系统实现功能</span></span><br><span class="line"><span class="comment">** 退出管理系统：退出当前管理系统</span></span><br><span class="line"><span class="comment">** 增加职工信息：将信息录入文件：职工编号、姓名、部门编号</span></span><br><span class="line"><span class="comment">** 显示职工信息：显示公司内部所有职工信息</span></span><br><span class="line"><span class="comment">** 删除离职职工：按照编号删除指定的职工</span></span><br><span class="line"><span class="comment">** 修改职工信息：按照编号修改职工信息</span></span><br><span class="line"><span class="comment">** 查找职工信息：按照职工的编号或者姓名进行查找相关人员信息</span></span><br><span class="line"><span class="comment">** 按照编号排序：按照职工编号，进行排序，排序规则有用户指定</span></span><br><span class="line"><span class="comment">** 清空所有文档：清空文件记录的所有职工信息（清空之前需要再次确认，防止误删！）</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// // TODO test 多态</span></span><br><span class="line"><span class="comment">// Worker * worker = NULL;</span></span><br><span class="line"><span class="comment">// worker = new Employee(1, "张三", 1);</span></span><br><span class="line"><span class="comment">// worker-&gt;showInfo();</span></span><br><span class="line"><span class="comment">// delete worker;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker * worker = NULL;</span></span><br><span class="line"><span class="comment">// worker = new Manager(2, "李四", 2);</span></span><br><span class="line"><span class="comment">// worker-&gt;showInfo();</span></span><br><span class="line"><span class="comment">// delete worker;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker * worker = NULL;</span></span><br><span class="line"><span class="comment">// worker = new Boss(3, "王二", 3);</span></span><br><span class="line"><span class="comment">// worker-&gt;showInfo();</span></span><br><span class="line"><span class="comment">// delete worker;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化管理者对象</span></span><br><span class="line">Worker_Manager wm;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代表用户选择的命令</span></span><br><span class="line"><span class="keyword">char</span> choice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 调用显示菜单成员函数</span></span><br><span class="line">    wm.Show_Menu();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入您选择的菜单命令： "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// 退出系统</span></span><br><span class="line">        wm.Exit_System();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 增加职工</span></span><br><span class="line">        wm.Add_Emp();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// 显示职工</span></span><br><span class="line">        wm.Show_Emp();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// 删除职工</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">// // TODO test</span></span><br><span class="line">        <span class="comment">// int id;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "请输入要查询职工的ID编号：" &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cin &gt;&gt; id;</span></span><br><span class="line">        <span class="comment">// int ret = wm.IsExist(id);</span></span><br><span class="line">        <span class="comment">// if (ret != -1)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "职工存在，并编号为：" ret &lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "该职工不存在！" &lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// break;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        wm.Del_Emp();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// 修改职工</span></span><br><span class="line">        wm.Mod_Emp();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>: <span class="comment">// 查找职工</span></span><br><span class="line">        wm.Find_Emp();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: <span class="comment">// 排序职工</span></span><br><span class="line">        wm.Sort_Emp();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>: <span class="comment">// 清空文件</span></span><br><span class="line">        wm.Clean_File();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        system(<span class="string">"cls"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* file_name: Worker_Manager.cpp</span></span><br><span class="line"><span class="comment">** author: Wei Li</span></span><br><span class="line"><span class="comment">** date: 2020-06-16</span></span><br><span class="line"><span class="comment">** Copyright © 2020 Wei Li, All Rights Reserved.</span></span><br><span class="line"><span class="comment">** GitHub: https://github.com/2694048168/</span></span><br><span class="line"><span class="comment">** Gitee：https://gitee.com/weili_yzzcq/</span></span><br><span class="line"><span class="comment">** Blog：https://2694048168.github.io/</span></span><br><span class="line"><span class="comment">** Blog：https://weili_yzzcq.gitee.io/ </span></span><br><span class="line"><span class="comment">** Blog：https://blog.csdn.net/weixin_46782218/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Worker_Manager.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 管理类负责内容</span></span><br><span class="line"><span class="comment">** 1、与用户的沟通菜单界面</span></span><br><span class="line"><span class="comment">** 2、对职工增删改查的操作</span></span><br><span class="line"><span class="comment">** 3、与文件的读写交互</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数实现</span></span><br><span class="line">Worker_Manager::Worker_Manager()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建文件流</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    <span class="comment">// 以输入（读取文件）方式打开</span></span><br><span class="line">    ifs.open(FILENAME, ios::in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件不存在    </span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"文件不存在！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 初始化属性</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>; <span class="comment">// 记录人数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>; <span class="comment">// 数组指针</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>; <span class="comment">// 文件为空</span></span><br><span class="line"></span><br><span class="line">        ifs.close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件存在，内容为空,EOF 文件结束标志符</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ifs &gt;&gt; ch; <span class="comment">// 读取一个字符</span></span><br><span class="line">    <span class="keyword">if</span> (ifs.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// // TODO test </span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; "文件内容为空！" &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// 初始化属性</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>; <span class="comment">// 记录人数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>; <span class="comment">// 数组指针</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>; <span class="comment">// 文件为空</span></span><br><span class="line"></span><br><span class="line">        ifs.close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件存在，内容不为空</span></span><br><span class="line">    <span class="comment">// 获取已有职工人数</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;get_EmpNum();</span><br><span class="line">    <span class="comment">// // TODO test </span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "已有职工人数：" &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpNum = num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开辟空间 堆区</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpArray = <span class="keyword">new</span> Worker*[<span class="keyword">this</span>-&gt;m_EmpNum];</span><br><span class="line">    <span class="comment">// 将文件中数据加载到数组中（堆区中）</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;init_Emp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // TODO test 文件是否读入内存</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; this-&gt;m_EmpNum; ++i)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "职工编号：" &lt;&lt; this-&gt;m_EmpArray[i-1]-&gt;m_Id</span></span><br><span class="line">    <span class="comment">//          &lt;&lt; "\t姓名：" this-&gt;m_EmpArray[i-1]-&gt;m_Name</span></span><br><span class="line">    <span class="comment">//          &lt;&lt; "\t部门编号：" this-&gt;m_EmpArray[i-1]-&gt;m_DeptId &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示菜单</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Show_Menu()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"==========================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"============欢迎使用职工管理系统============"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============ 0、退出管理程序 ============ "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============ 1、增加职工信息 ============ "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============ 2、显示职工信息 ============ "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============ 3、删除职工信息 ============ "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============ 4、修改职工信息 ============ "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============ 5、查找职工信息 ============ "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============ 6、按照编号排序 ============ "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============ 7、情况所有文档 ============ "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"==========================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出系统</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Exit_System()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"欢迎下次使用！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加职工</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Add_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入添加职工数量："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户输入的数量值</span></span><br><span class="line">    <span class="keyword">int</span> addNum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; addNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addNum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        <span class="comment">// 计算添加的新空间大小人数 = 原来记录的人数 + 新增人数</span></span><br><span class="line">        <span class="keyword">int</span> newSize = <span class="keyword">this</span>-&gt;m_EmpNum + addNum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开辟新空间 动态数组</span></span><br><span class="line">        Worker ** newSpace = <span class="keyword">new</span> Worker*[newSize];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将原来空间中数据，拷贝到新空间中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* 对于不需要修改前的值，建议使用递增的前置版本，性能好一点</span></span><br><span class="line"><span class="comment">                   采用递增的后置版本，则需要将原始值储存下来，这是一种资源的浪费 */</span></span><br><span class="line">                newSpace[i<span class="number">-1</span>] = <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批量添加新数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; addNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> id; <span class="comment">// 职工编号</span></span><br><span class="line">            <span class="built_in">string</span> name; <span class="comment">// 职工姓名</span></span><br><span class="line">            <span class="keyword">int</span> dSelect; <span class="comment">// 部门选择</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第"</span> &lt;&lt; i &lt;&lt; <span class="string">"个新职工的编号："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第"</span> &lt;&lt; i &lt;&lt; <span class="string">"个新职工的姓名："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入该职工岗位的编号选择："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、普通职工"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、经理"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"3、老板"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; dSelect;</span><br><span class="line"></span><br><span class="line">            Worker * worker = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">switch</span> (dSelect)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Employee(id, name, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Manager(id, name, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Boss(id, name, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将创建职中指针，保存到数组中</span></span><br><span class="line">            newSpace[<span class="keyword">this</span>-&gt;m_EmpNum + (i<span class="number">-1</span>)] = worker;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放原有数组的空间</span></span><br><span class="line">        <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更改新数组空间的指向</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray = newSpace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新新的已有职工人数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpNum = newSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加成功并保持到文件中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新文件标志符</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提示添加成功</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"成功添加"</span> &lt;&lt; addNum &lt;&lt; <span class="string">"名新职工！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入数据有错误！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按任意键后，清屏回到上级目录操作</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存文件</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::save()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建文件流对象</span></span><br><span class="line">    ofstream  ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以输出（写文件）方式打开,并在文件末尾追加内容</span></span><br><span class="line">    ofs.open(FILENAME,  ios::out | ios::app);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断文件是否正常打开</span></span><br><span class="line">    <span class="keyword">if</span> (!ofs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Error opening file!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将需要保存的数据写入文件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ofs &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>]-&gt;m_Id &lt;&lt; <span class="string">" "</span></span><br><span class="line">                &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>]-&gt;m_Name &lt;&lt; <span class="string">" "</span></span><br><span class="line">                &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>]-&gt;m_DeptId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭文件</span></span><br><span class="line">        ofs.close();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计文件中人数</span></span><br><span class="line"><span class="keyword">int</span> Worker_Manager::get_EmpNum()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建文件流</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    <span class="comment">// 以输入（读取文件）方式打开</span></span><br><span class="line">    ifs.open(FILENAME, ios::in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">// 编号</span></span><br><span class="line">    <span class="built_in">string</span> name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">int</span> dId; <span class="comment">// 部门编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)</span><br><span class="line">    &#123;</span><br><span class="line">        ++num; <span class="comment">// 统计文件中的人数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化员工</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::init_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建文件流</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    <span class="comment">// 以输入（读取文件）方式打开</span></span><br><span class="line">    ifs.open(FILENAME, ios::in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">// 编号</span></span><br><span class="line">    <span class="built_in">string</span> name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">int</span> dId; <span class="comment">// 部门编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)</span><br><span class="line">    &#123;</span><br><span class="line">        Worker * worker = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dId == <span class="number">1</span>) <span class="comment">// 普通员工</span></span><br><span class="line">        &#123;</span><br><span class="line">            worker = <span class="keyword">new</span> Employee(id, name, dId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dId == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           worker = <span class="keyword">new</span> Manager(id, name, dId); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            worker = <span class="keyword">new</span> Boss(id, name, dId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray[index] = worker;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="comment">// 以上两条语句等价于 == this-&gt;m_EmpArray[index++] = worker;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示职工</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Show_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断文件是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"文件不存在或者为内容为空！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_EmpNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 利用多态调用程序接口</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>]-&gt;showInfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按任意键后，清屏回到上级目录操作</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断员工是否存在</span></span><br><span class="line"><span class="keyword">int</span> Worker_Manager::IsExist(<span class="keyword">int</span> id)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>]-&gt;m_Id == id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 找到职工</span></span><br><span class="line">            index = i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除员工</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Del_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"文件不存在或者为内容为空！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 根据编号删除</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要删除职工的编号："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取在数组中的索引</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">this</span>-&gt;IsExist(id);</span><br><span class="line">        <span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum - <span class="number">1</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 数据前移，覆盖指定数据，即删除指定数据</span></span><br><span class="line">                <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>] = <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新数组中人数</span></span><br><span class="line">            --<span class="keyword">this</span>-&gt;m_EmpNum;</span><br><span class="line">            <span class="comment">// 同步更新文件</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"删除成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"删除失败，未找到该员工的编号！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按任意键后，清屏回到上级目录操作</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改员工信息</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Mod_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"文件不存在或者为内容为空！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 根据编号修改</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要修改职工的编号："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取在数组中的索引</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;IsExist(id);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查找到指定编号的职工</span></span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[ret];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> newId = <span class="number">0</span>; <span class="comment">// 编号</span></span><br><span class="line">            <span class="built_in">string</span> newName = <span class="string">""</span>; <span class="comment">// 姓名</span></span><br><span class="line">            <span class="keyword">int</span> dSelect = <span class="number">0</span>; <span class="comment">// 职工类型选择</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"查到指定编号为"</span> &lt;&lt; id &lt;&lt; <span class="string">"的职工，请输入新编号"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; newId;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入新的姓名"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; newName;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入新的岗位"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、普通职工"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、经理"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"3、老板"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; dSelect;</span><br><span class="line"></span><br><span class="line">            Worker * worker =<span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">switch</span>(dSelect)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Employee(newId, newName, dSelect);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Manager(newId, newName, dSelect);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Boss(newId, newName, dSelect);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新数据，数组中</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;m_EmpArray[ret] = worker;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"修改成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新文件中数据，保存到文件</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"修改失败，查无此编号的职工！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按任意键后，清屏回到上级目录操作</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找职工</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Find_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"文件不存在或者为内容为空！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 根据编号修改</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入查找职工的方式："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、按照职工的编号查找"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、按照职工的姓名查找"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 编号查找</span></span><br><span class="line">            <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要查找职工的编号："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ret = IsExist(id);</span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"该职工的信息如下："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_EmpArray[ret]-&gt;showInfo();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"查无此人！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 姓名查找</span></span><br><span class="line">            <span class="built_in">string</span> name;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要查找职工的姓名："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是否查到姓名 标志</span></span><br><span class="line">            <span class="keyword">bool</span> falg = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_EmpNum; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>]-&gt;m_Name == name)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"查找成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>]-&gt;m_Id &lt;&lt; <span class="string">"号职工信息如下："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    falg = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>]-&gt;showInfo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (falg == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"查无此人！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入选项有错误！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按任意键后，清屏回到上级目录操作</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序职工</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Sort_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"文件不存在或者为内容为空！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按任意键后，清屏回到上级目录操作</span></span><br><span class="line">        system(<span class="string">"pause"</span>);</span><br><span class="line">        system(<span class="string">"cls"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"请选择排序方式："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、按职工编号升序方式"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、按职工编号降序方式"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_EmpNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 选择排序算法</span></span><br><span class="line">            <span class="keyword">int</span> MinorMax = i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (select == <span class="number">1</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 升序方式</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[MinorMax]-&gt;m_Id &gt; <span class="keyword">this</span>-&gt;m_EmpArray[j<span class="number">-1</span>]-&gt;m_Id)</span><br><span class="line">                    &#123;</span><br><span class="line">                        MinorMax = j - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 降序方式</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[MinorMax]-&gt;m_Id &lt; <span class="keyword">this</span>-&gt;m_EmpArray[j<span class="number">-1</span>]-&gt;m_Id)</span><br><span class="line">                    &#123;</span><br><span class="line">                        MinorMax = j - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断最初选择的最值，是不是计算的最值？若不是，则交换</span></span><br><span class="line">            <span class="keyword">if</span> (i != MinorMax)</span><br><span class="line">            &#123;</span><br><span class="line">                Worker * temp = <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_EmpArray[i] = <span class="keyword">this</span>-&gt;m_EmpArray[MinorMax];</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_EmpArray[MinorMax] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序成功！排序后的结果为："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;save(); <span class="comment">// 排序结果保存文件</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;Show_Emp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空文件</span></span><br><span class="line"><span class="keyword">void</span> Worker_Manager::Clean_File()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请再次确认是否需要清空数据？"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、确认！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、取消！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (select ==<span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 清空文件</span></span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span> <span class="params">(FILENAME, ios::trunc)</span></span>; <span class="comment">// 删除文件重新创建</span></span><br><span class="line">        ofs.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 删除 堆区 的每一个对象数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除 堆区 数组指针</span></span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"清空成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按任意键后，清屏回到上级目录操作</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数实现</span></span><br><span class="line">Worker_Manager::~Worker_Manager()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 在类或者对象中使用了指针，需要记得将堆区的数据删除掉</span></span><br><span class="line"><span class="comment">       这一步操作也是析构函数的重要职能 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>] != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> #############################################################</span><br><span class="line"><span class="meta">#</span> author: Wei Li</span><br><span class="line"><span class="meta">#</span> date: 2020-06-16</span><br><span class="line"><span class="meta">#</span> Copyright © 2020 Wei Li, All Rights Reserved.</span><br><span class="line"><span class="meta">#</span> GitHub: https://github.com/2694048168/</span><br><span class="line"><span class="meta">#</span> Gitee：https://gitee.com/weili_yzzcq/</span><br><span class="line"><span class="meta">#</span> Blog：https://2694048168.github.io/</span><br><span class="line"><span class="meta">#</span> Blog：https://weili_yzzcq.gitee.io/ </span><br><span class="line"><span class="meta">#</span> Blog：https://blog.csdn.net/weixin_46782218/</span><br><span class="line"><span class="meta">#</span> #############################################################</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step1 CMakeLists.txt</span><br><span class="line"><span class="meta">#</span> 1、工程配置部分</span><br><span class="line"><span class="meta">#</span> 指定CMake最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 3.5)</span><br><span class="line"><span class="meta">#</span> 定义项目名称变量PROJECT_NAME, 默认值为demo</span><br><span class="line">set(project_name the_staff_managerment_system)</span><br><span class="line"><span class="meta">#</span> 项目名称以及版本</span><br><span class="line"><span class="meta">project($</span>&#123;project_name&#125;)</span><br><span class="line"><span class="meta">#</span> 设置编译版本 如“-std=c++11”、“-std=c++14”、“-std=c++17”、“-std=c++20”</span><br><span class="line">set (CMAKE_CXX_FLAGS "$&#123;CMAKE_CXX_FLAGS&#125; -Wall -Werror -std=c++11")</span><br><span class="line"><span class="meta">#</span> 设置编译模式,如“Debug”、“Release”</span><br><span class="line">set (CMake_BUILD_TYPE "Release")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、依赖执行部分</span><br><span class="line"><span class="meta">#</span> 设置头文件路径</span><br><span class="line">set (include_dir "$&#123;PROJECT_SOURCE_DIR&#125;/include/")</span><br><span class="line"><span class="meta">#</span> 指定头文件路径，必须在 add_executeable 前面</span><br><span class="line">include_directories ($&#123;include_dir&#125;)</span><br><span class="line"><span class="meta">#</span> 设置源代码路径</span><br><span class="line">set (source_dir "$&#123;PROJECT_SOURCE_DIR&#125;/src/")</span><br><span class="line"><span class="meta">#</span> 设置需要编译的源文件</span><br><span class="line">file (GLOB library_files "$&#123;source_dir&#125;/Worker.cpp"</span><br><span class="line">                        "$&#123;source_dir&#125;/Boss.cpp"</span><br><span class="line">                        "$&#123;source_dir&#125;/Manager.cpp"</span><br><span class="line">                        "$&#123;source_dir&#125;/Employee.cpp"</span><br><span class="line">                        "$&#123;source_dir&#125;/Worker_Manager.cpp")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 编译源文件为静态库使用</span><br><span class="line">add_library (_worker_manager STATIC $&#123;library_files&#125;)</span><br><span class="line"><span class="meta">#</span> 设置编译的输出目标文件</span><br><span class="line">add_executable ($&#123;project_name&#125; "$&#123;source_dir&#125;/Main.cpp")</span><br><span class="line"><span class="meta">#</span> 链接静态库文件</span><br><span class="line">target_link_libraries ($&#123;project_name&#125; _worker_manager)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step2 编译结构目录</span><br><span class="line"><span class="meta">#</span> 创建项目工作空间</span><br><span class="line">mkdir the_staff_managerment_system</span><br><span class="line"><span class="meta">#</span> 进入项目工作空间</span><br><span class="line">cd the_staff_managerment_system</span><br><span class="line"><span class="meta">#</span> 创建 CMakelists.txt 文件</span><br><span class="line">touch CMakelists.txt</span><br><span class="line"><span class="meta">#</span> 编写 CMakelists.txt 内容</span><br><span class="line">vim CMakelists.txt</span><br><span class="line"><span class="meta">#</span> 创建外部编译目录</span><br><span class="line">mkdir build</span><br><span class="line"><span class="meta">#</span> 创建头文件目录</span><br><span class="line">mkdir include</span><br><span class="line"><span class="meta">#</span> 创建源代码目录</span><br><span class="line">mkdir src</span><br><span class="line"><span class="meta">#</span> 进入源代码目录</span><br><span class="line">cd src</span><br><span class="line"><span class="meta">#</span> 创建 Main.cpp 文件</span><br><span class="line">touch Main.cpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step3 CodeLite</span><br><span class="line"><span class="meta">#</span> 进入外部编译目录 build</span><br><span class="line">cd build</span><br><span class="line"><span class="meta">#</span> 为 CodeLite IDE 创建工作空间</span><br><span class="line">cmake -G "CodeLite - Unix Makefiles" ..</span><br><span class="line"><span class="meta">#</span> 查看生成的项目工作空间文件</span><br><span class="line">ll</span><br><span class="line"><span class="meta">#</span> 启动 CodeLite IDE 打开项目工作空间文件</span><br><span class="line">codelite staff_managerment_system.workspace &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step4 make</span><br><span class="line"><span class="meta">#</span> 进入项目工作空间</span><br><span class="line">cd the_staff_managerment_system</span><br><span class="line"><span class="meta">#</span> 创建 shell 脚本执行</span><br><span class="line">touch build.sh</span><br><span class="line"><span class="meta">#</span> 编辑脚本内容</span><br><span class="line">vim build.sh</span><br><span class="line"><span class="meta">#</span> 添加脚本的执行权限</span><br><span class="line">chmod +x build.sh</span><br><span class="line"><span class="meta">#</span> 直接执行脚本</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line">rm -rf build</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -G "CodeLite - Unix Makefiles" ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;系统需求&quot;&gt;&lt;a href=&quot;#系统需求&quot; class=&quot;headerlink&quot; title=&quot;系统需求&quot;&gt;&lt;/a&gt;系统需求&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;职工管理系统——the Staff Management System&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="C&amp;C++" scheme="https://2694048168.github.io/categories/C-C/"/>
    
    
      <category term="C++语言" scheme="https://2694048168.github.io/tags/C-%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C++实战1</title>
    <link href="https://2694048168.github.io/C++%E5%AE%9E%E6%88%981/"/>
    <id>https://2694048168.github.io/C++实战1/</id>
    <published>2020-06-16T15:33:13.000Z</published>
    <updated>2020-06-20T12:16:29.661Z</updated>
    
    <content type="html"><![CDATA[<h4 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h4><ul><li>添加联系人：向通讯录添加新人（姓名、性别、年龄、联系电话、家庭住址）最多记录500人</li><li>显示联系人：显示通讯录中所有联系人信息</li><li>删除联系人：按姓名索引删除指定联系人</li><li>查找联系人：按姓名索引查找指定联系人</li><li>修改联系人：按姓名索引修改指定联系人</li><li>清空联系人：清空通讯录中所有的联系人信息</li><li>退出通讯录：退出当前使用的通讯录系统 </li></ul><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* file_name: Main.cpp</span></span><br><span class="line"><span class="comment">** author: Wei Li</span></span><br><span class="line"><span class="comment">** date: 2020-06-16</span></span><br><span class="line"><span class="comment">** Copyright © 2020 Wei Li, All Rights Reserved.</span></span><br><span class="line"><span class="comment">** GitHub: https://github.com/2694048168/</span></span><br><span class="line"><span class="comment">** Gitee：https://gitee.com/weili_yzzcq/</span></span><br><span class="line"><span class="comment">** Blog：https://2694048168.github.io/</span></span><br><span class="line"><span class="comment">** Blog：https://weili_yzzcq.gitee.io/ </span></span><br><span class="line"><span class="comment">** Blog：https://blog.csdn.net/weixin_46782218/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 头文件区</span></span><br><span class="line"><span class="comment">// the area of Header files</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量区</span></span><br><span class="line"><span class="comment">// the area of Global variables</span></span><br><span class="line"><span class="comment">// 通讯录最大储存联系人</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 联系人结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> m_Sex;</span><br><span class="line"><span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> m_Age;</span><br><span class="line"><span class="comment">// 电话</span></span><br><span class="line">    <span class="built_in">string</span> m_Phone;</span><br><span class="line"><span class="comment">// 地址</span></span><br><span class="line">    <span class="built_in">string</span> m_Addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通讯录结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Addressbooks</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// 通讯录中保存联系人数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">personArray</span>[<span class="title">MAX</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通讯录中当前记录的联系人个数</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> m_Size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数声明区</span></span><br><span class="line"><span class="comment">// the area of Global function declaration</span></span><br><span class="line"><span class="comment">/* 功能：显示菜单命令</span></span><br><span class="line"><span class="comment">** 返回值：void</span></span><br><span class="line"><span class="comment">** 函数名：showMenu</span></span><br><span class="line"><span class="comment">** 参数列表：void</span></span><br><span class="line"><span class="comment">** 参数传递类型：void</span></span><br><span class="line"><span class="comment">** 函数调用：showMenu();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 功能：添加联系人</span></span><br><span class="line"><span class="comment">** 返回值：void</span></span><br><span class="line"><span class="comment">** 函数名：addPerson</span></span><br><span class="line"><span class="comment">** 参数列表：通讯录结构体abs</span></span><br><span class="line"><span class="comment">** 参数传递类型：地址传递</span></span><br><span class="line"><span class="comment">** 函数调用：addPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 功能：显示联系人</span></span><br><span class="line"><span class="comment">** 返回值：void</span></span><br><span class="line"><span class="comment">** 函数名：showPerson</span></span><br><span class="line"><span class="comment">** 参数列表：通讯录结构体abs</span></span><br><span class="line"><span class="comment">** 参数传递类型：地址传递</span></span><br><span class="line"><span class="comment">** 函数调用：showPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 功能：检测联系人是否在当前通讯录中</span></span><br><span class="line"><span class="comment">** 返回值：int</span></span><br><span class="line"><span class="comment">** 函数名：isExist</span></span><br><span class="line"><span class="comment">** 参数列表：通讯录结构体abs、检测联系人姓名name</span></span><br><span class="line"><span class="comment">** 参数传递类型：地址传递、值传递</span></span><br><span class="line"><span class="comment">** 函数调用：isExist(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isExist</span><span class="params">(Addressbooks * <span class="built_in">abs</span>, <span class="built_in">string</span> name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 功能：删除联系人</span></span><br><span class="line"><span class="comment">** 返回值：void</span></span><br><span class="line"><span class="comment">** 返回值说明：i代表着该联系人在通讯录中的索引，-1代表着查无此联系人</span></span><br><span class="line"><span class="comment">** 函数名：deletePerson</span></span><br><span class="line"><span class="comment">** 参数列表：通讯录结构体abs</span></span><br><span class="line"><span class="comment">** 参数传递类型：地址传递</span></span><br><span class="line"><span class="comment">** 函数调用：deletePerson(abs, name);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletePerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 功能：查找联系人</span></span><br><span class="line"><span class="comment">** 返回值：void</span></span><br><span class="line"><span class="comment">** 函数名：findPerson</span></span><br><span class="line"><span class="comment">** 参数列表：通讯录结构体abs</span></span><br><span class="line"><span class="comment">** 参数传递类型：地址传递</span></span><br><span class="line"><span class="comment">** 函数调用：findPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 功能：修改联系人</span></span><br><span class="line"><span class="comment">** 返回值：void</span></span><br><span class="line"><span class="comment">** 函数名：modifyPerson</span></span><br><span class="line"><span class="comment">** 参数列表：通讯录结构体abs</span></span><br><span class="line"><span class="comment">** 参数传递类型：地址传递</span></span><br><span class="line"><span class="comment">** 函数调用：modifyPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 功能：删除联系人</span></span><br><span class="line"><span class="comment">** 返回值：void</span></span><br><span class="line"><span class="comment">** 函数名：cleanPerson</span></span><br><span class="line"><span class="comment">** 参数列表：通讯录结构体abs</span></span><br><span class="line"><span class="comment">** 参数传递类型：地址传递</span></span><br><span class="line"><span class="comment">** 函数调用：cleanPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通讯录管理系统——the Contacts Management System</span></span><br><span class="line"><span class="comment">** </span></span><br><span class="line"><span class="comment">** 添加联系人：向通讯录添加新人（姓名、性别、年龄、联系电话、家庭住址）最多记录500人</span></span><br><span class="line"><span class="comment">** 显示联系人：显示通讯录中所有联系人信息</span></span><br><span class="line"><span class="comment">** 删除联系人：按姓名索引删除指定联系人</span></span><br><span class="line"><span class="comment">** 查找联系人：按姓名索引查找指定联系人</span></span><br><span class="line"><span class="comment">** 修改联系人：按姓名索引修改指定联系人</span></span><br><span class="line"><span class="comment">** 清空联系人：清空通讯录中所有的联系人信息</span></span><br><span class="line"><span class="comment">** 退出通讯录：退出当前使用的通讯录系统 </span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建通讯录结构体变量</span></span><br><span class="line">Addressbooks <span class="built_in">abs</span>;</span><br><span class="line"><span class="comment">// 初始化通讯录当前联系人个数</span></span><br><span class="line"><span class="built_in">abs</span>.m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受用户输入命令</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环接受用户命令</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 菜单函数</span></span><br><span class="line">    showMenu();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受用户输入</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 1、添加联系人</span></span><br><span class="line">    addPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// 2、显示联系人</span></span><br><span class="line">    showPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// 3、删除联系人</span></span><br><span class="line">            deletePerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// 4、查找联系人</span></span><br><span class="line">    findPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: <span class="comment">// 5、修改联系人</span></span><br><span class="line">    modifyPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: <span class="comment">// 6、清空联系人</span></span><br><span class="line">    cleanPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// 0、退出通信录</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"欢迎下次使用系统！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数实现区</span></span><br><span class="line"><span class="comment">// the area of Global function implementation</span></span><br><span class="line"><span class="comment">/* Function：show the user menu command</span></span><br><span class="line"><span class="comment">** Return：void</span></span><br><span class="line"><span class="comment">** Parameter：abs</span></span><br><span class="line"><span class="comment">** Parameter Passing Type：Address Passing or Pointer Passing</span></span><br><span class="line"><span class="comment">** Function Call：deletePerson();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============== 1、添加联系人 ============== "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============== 2、显示联系人 ============== "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============== 3、删除联系人 ============== "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============== 4、查找联系人 ============== "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============== 5、修改联系人 ============== "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============== 6、清空联系人 ============== "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============== 0、退出通讯录 ============== "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"============================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function：add the person to Address Book</span></span><br><span class="line"><span class="comment">** Return：void</span></span><br><span class="line"><span class="comment">** Parameter：abs</span></span><br><span class="line"><span class="comment">** Parameter Passing Type：Address Passing or Pointer Passing</span></span><br><span class="line"><span class="comment">** Function Call：addPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 先判断通讯录是否满了，检测MAX</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == MAX)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"当前通讯录已满，无法添加！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 添加联系人</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Name = name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入性别"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1 -- 男"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2 -- 女"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line"><span class="keyword">if</span> (sex == <span class="number">1</span> || sex == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Sex = sex;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入有误，请重新输入！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入年龄"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>)</span><br><span class="line">    &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Age = age;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入有误，请重新输入！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入联系电话"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Phone = phone;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入地址"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> address;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; address;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Addr = address;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新当前通讯录人数</span></span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"添加联系人成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function：show the persons of Address Book</span></span><br><span class="line"><span class="comment">** Return：void</span></span><br><span class="line"><span class="comment">** Parameter：abs</span></span><br><span class="line"><span class="comment">** Parameter Passing Type：Address Passing or Pointer Passing</span></span><br><span class="line"><span class="comment">** Function Call：showPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 判断通讯录是否为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"当前通讯录为空！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i =<span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名： "</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Name &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"性别： "</span> &lt;&lt; ( <span class="built_in">abs</span>-&gt;personArray[i].m_Sex == <span class="number">1</span> ?<span class="string">"男"</span>:<span class="string">"女"</span> ) &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"年龄： "</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Age &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"电话： "</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Phone &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"地址： "</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function：Detect this contact is or not in the Address Book</span></span><br><span class="line"><span class="comment">** Return：int</span></span><br><span class="line"><span class="comment">** Return Value: the i is the person of index in the Address Book, and the -1 means disdetect the person </span></span><br><span class="line"><span class="comment">** Parameter_one：abs</span></span><br><span class="line"><span class="comment">** Parameter_two：name</span></span><br><span class="line"><span class="comment">** Parameter Passing Type：Value Passing</span></span><br><span class="line"><span class="comment">** Function Call：isExist(abs, name);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isExist</span><span class="params">(Addressbooks * <span class="built_in">abs</span>, <span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;personArray[i].m_Name == name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function：Delete the person from the Address Book</span></span><br><span class="line"><span class="comment">** Return：void</span></span><br><span class="line"><span class="comment">** Parameter：abs</span></span><br><span class="line"><span class="comment">** Parameter Passing Type：Address Passing or Pointer Passing</span></span><br><span class="line"><span class="comment">** Function Call：deletePerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletePerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入删除联系人的姓名"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>,name);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = ret; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 数据前移</span></span><br><span class="line"><span class="built_in">abs</span>-&gt;personArray[i] = <span class="built_in">abs</span>-&gt;personArray[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size--;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除联系人成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"当前通讯录查无此人！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function：find the persons is or not in the Address Book</span></span><br><span class="line"><span class="comment">** Return：void</span></span><br><span class="line"><span class="comment">** Parameter：abs</span></span><br><span class="line"><span class="comment">** Parameter Passing Type：Address Passing or Pointer Passing</span></span><br><span class="line"><span class="comment">** Function Call：findPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入查找联系人的姓名"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>,name);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名： "</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Name &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"性别： "</span> &lt;&lt; ( <span class="built_in">abs</span>-&gt;personArray[ret].m_Sex == <span class="number">1</span> ?<span class="string">"男"</span>:<span class="string">"女"</span> ) &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"年龄： "</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Age &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"电话： "</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Phone &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"地址： "</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"当前通讯录查无此人！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function：modify the person in the  Address Book</span></span><br><span class="line"><span class="comment">** Return：void</span></span><br><span class="line"><span class="comment">** Parameter：abs</span></span><br><span class="line"><span class="comment">** Parameter Passing Type：Address Passing or Pointer Passing</span></span><br><span class="line"><span class="comment">** Function Call：modifyPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入修改联系人的姓名"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>,name);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 修改联系人</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personArray[ret].m_Name = name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入性别"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1 -- 男"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2 -- 女"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line"><span class="keyword">if</span> (sex == <span class="number">1</span> || sex == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;personArray[ret].m_Sex = sex;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入有误，请重新输入！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入年龄"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>)</span><br><span class="line">    &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;personArray[ret].m_Age = age;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入有误，请重新输入！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入联系电话"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personArray[ret].m_Phone = phone;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入地址"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> address;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; address;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personArray[ret].m_Addr = address;</span><br><span class="line">&#125;</span><br><span class="line">    elsem</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"当前通讯录查无此人！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function：clean the persons of the total Address Book</span></span><br><span class="line"><span class="comment">** Return：void</span></span><br><span class="line"><span class="comment">** Parameter：abs</span></span><br><span class="line"><span class="comment">** Parameter Passing Type：Address Passing or Pointer Passing</span></span><br><span class="line"><span class="comment">** Function Call：cleanPerson(&amp;abs);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanPerson</span><span class="params">(Addressbooks * <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 逻辑清空</span></span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"通讯录联系人已清空！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> #############################################################</span><br><span class="line"><span class="meta">#</span> author: Wei Li</span><br><span class="line"><span class="meta">#</span> date: 2020-06-16</span><br><span class="line"><span class="meta">#</span> Copyright © 2020 Wei Li, All Rights Reserved.</span><br><span class="line"><span class="meta">#</span> GitHub: https://github.com/2694048168/</span><br><span class="line"><span class="meta">#</span> Gitee：https://gitee.com/weili_yzzcq/</span><br><span class="line"><span class="meta">#</span> Blog：https://2694048168.github.io/</span><br><span class="line"><span class="meta">#</span> Blog：https://weili_yzzcq.gitee.io/ </span><br><span class="line"><span class="meta">#</span> Blog：https://blog.csdn.net/weixin_46782218/</span><br><span class="line"><span class="meta">#</span> #############################################################</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step1 CMakeLists.txt</span><br><span class="line"><span class="meta">#</span> 1、工程配置部分</span><br><span class="line"><span class="meta">#</span> 指定CMake最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION 3.5)</span><br><span class="line"><span class="meta">#</span> 项目信息</span><br><span class="line">project (the_contact_managerment_system)</span><br><span class="line"><span class="meta">#</span> 设置编译版本 如“-std=c++11”、“-std=c++14”、“-std=c++17”、“-std=c++20”</span><br><span class="line">set (CMAKE_CXX_FLAGS "$&#123;CMAKE_CXX_FLAGS&#125; -Wall -Werror -std=c++11")</span><br><span class="line"><span class="meta">#</span> 设置编译模式,如“Debug”、“Release”</span><br><span class="line">set (CMake_BUILD_TYPE "Debug")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、依赖执行部分</span><br><span class="line"><span class="meta">#</span> 设置源代码路径</span><br><span class="line">set (source_dir "$&#123;PROJECT_SOURCE_DIR&#125;/src/")</span><br><span class="line"><span class="meta">#</span> 设置需要编译的源文件</span><br><span class="line">file (GLOB source_files "$&#123;source_dir&#125;/*.cpp")</span><br><span class="line"><span class="meta">#</span> 设置编译的输出目标文件</span><br><span class="line">add_executable (the_contact_managerment_system $&#123;source_files&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step2 编译结构目录</span><br><span class="line"><span class="meta">#</span> 创建项目工作空间</span><br><span class="line">mkdir the_contact_managerment_system</span><br><span class="line"><span class="meta">#</span> 进入项目工作空间</span><br><span class="line">cd the_contact_managerment_system</span><br><span class="line"><span class="meta">#</span> 创建 CMakelists.txt 文件</span><br><span class="line">touch CMakelists.txt</span><br><span class="line"><span class="meta">#</span> 编写 CMakelists.txt 内容</span><br><span class="line">vim CMakelists.txt</span><br><span class="line"><span class="meta">#</span> 创建外部编译目录</span><br><span class="line">mkdir build</span><br><span class="line"><span class="meta">#</span> 创建源代码文件</span><br><span class="line">mkdir src</span><br><span class="line"><span class="meta">#</span> 进入源代码目录</span><br><span class="line">cd src</span><br><span class="line"><span class="meta">#</span> 创建 Main.cpp 文件</span><br><span class="line">touch Main.cpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step3 CodeLite</span><br><span class="line"><span class="meta">#</span> 进入外部编译目录 build</span><br><span class="line">cd build</span><br><span class="line"><span class="meta">#</span> 为 CodeLite IDE 创建工作空间</span><br><span class="line">cmake -G "CodeLite - Unix Makefiles" ..</span><br><span class="line"><span class="meta">#</span> 查看生成的项目工作空间文件</span><br><span class="line">ll</span><br><span class="line"><span class="meta">#</span> 启动 CodeLite IDE 打开项目工作空间文件</span><br><span class="line">codelite the_contact_managerment_system.workspace &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step4 继续完成项目的内容，同时完善 CMakelists.txt 文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;系统需求&quot;&gt;&lt;a href=&quot;#系统需求&quot; class=&quot;headerlink&quot; title=&quot;系统需求&quot;&gt;&lt;/a&gt;系统需求&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;添加联系人：向通讯录添加新人（姓名、性别、年龄、联系电话、家庭住址）最多记录500人&lt;/li&gt;
&lt;li&gt;显示联系
      
    
    </summary>
    
      <category term="C&amp;C++" scheme="https://2694048168.github.io/categories/C-C/"/>
    
    
      <category term="C++语言" scheme="https://2694048168.github.io/tags/C-%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>算法导论</title>
    <link href="https://2694048168.github.io/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    <id>https://2694048168.github.io/算法导论/</id>
    <published>2020-06-10T05:47:14.000Z</published>
    <updated>2020-06-10T05:49:09.039Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="算法导论" scheme="https://2694048168.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
      <category term="Introduction to Algorithms" scheme="https://2694048168.github.io/tags/Introduction-to-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>终端显示Linux系统信息</title>
    <link href="https://2694048168.github.io/%E7%BB%88%E7%AB%AF%E6%98%BE%E7%A4%BALinux%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    <id>https://2694048168.github.io/终端显示Linux系统信息/</id>
    <published>2020-04-08T06:20:29.000Z</published>
    <updated>2020-04-08T07:19:46.209Z</updated>
    
    <content type="html"><![CDATA[<h4 id="终端显示系统信息"><a href="#终端显示系统信息" class="headerlink" title="终端显示系统信息"></a>终端显示系统信息</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ul><li>neofetch下载（Windows下zip，Linux下tar.gz）</li><li>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2R5bGFuYXJhcHMvbmVvZmV0Y2gvcmVsZWFzZXMvbGF0ZXN0" title="https://github.com/dylanaraps/neofetch/releases/latest">Netfetch_Latest_Release<i class="fa fa-external-link"></i></span></li></ul><p><img src="/images/neofetch_download.png" alt="self"></p><h5 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入neofetch下载的文件目录，查看下载好的tar.gz文件</span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 解压到指定位置，用户的home目录：~/</span><br><span class="line">tar -zxvf neofetch-7.0.0.tar.gz -C ~/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 进入到解压的文件目录</span><br><span class="line">cd ~/neofetch-7.0.0/</span><br><span class="line">ll</span><br><span class="line"><span class="meta">#</span> 查看到Makefile文件，使用make编译安装即可</span><br><span class="line"><span class="meta">#</span> Linux下应该已经安装好了make工具</span><br><span class="line">make PREFIX=/usr/local install</span><br><span class="line"><span class="meta">#</span> Windows下应该已经安装好了MinGW，也有make工具</span><br><span class="line">make -i install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在终端输入命令：neofetch，即可显示系统的信息</span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><p><img src="/images/neofetch_show.png" alt="self"></p><h5 id="neofetch配置文件"><a href="#neofetch配置文件" class="headerlink" title="neofetch配置文件"></a>neofetch配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> neofetch配置文件在/home/weili/.config/neofetch，文件目录下</span><br><span class="line">cd ~/.config/neofetch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> ll命令，查看neofetch的配置文件，config.conf</span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使用vim打开配置文件</span><br><span class="line">vim config.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在print_info函数中调用系统显示信息</span><br><span class="line"><span class="meta">#</span> 在后面还有对系统的软件和硬件的各种信息的具体配置</span><br><span class="line"><span class="meta">#</span> 当然还有对显示logo的配置</span><br></pre></td></tr></table></figure><p><img src="/images/print_info.png" alt="self"></p><h5 id="设置打开终端自动显示系统信息"><a href="#设置打开终端自动显示系统信息" class="headerlink" title="设置打开终端自动显示系统信息"></a>设置打开终端自动显示系统信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在任意地方创建文件，建议在neofetch配置文件目录下/home/weili/.config/neofetch，</span><br><span class="line">vim show_neofetch_start</span><br><span class="line"><span class="meta">#</span> 在打开的文件中输入命令</span><br><span class="line">neofetch</span><br><span class="line"><span class="meta">#</span> Esc——》wq——》退出保存即可</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在自己的bash配置文件中加入即可，bashrc配置文件</span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta">#</span> 在配置文件最后面添加</span><br><span class="line">source ~/.config/neofetch/show_neofetch_start</span><br><span class="line"><span class="meta">#</span> 保存退出即可</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重新启动terminal终端，就会自动加载neofetch命令</span><br><span class="line"><span class="meta">#</span> 实现了打开终端就调用neofetch命令，显示系统的硬件信息</span><br></pre></td></tr></table></figure><h5 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h5><p>Q：有没有更加简单的配置<br>A：在Linux终端可以直接只用包管理命令安装即可，简单实用，唯一的缺点就是可以有一些最新版本的Linux发行版软件仓库源里面没有（例如，Ubuntu18.04.4），则只能使用源码编译安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 具体版本可以还需一些依赖包的安装，可以在neofetch的github上查看所需安装的依赖</span><br><span class="line"><span class="meta">#</span> 请对应自己操作系统版本，仔细查看需要的操作步骤！</span><br><span class="line"><span class="meta">#</span> 下面的命令可能不能完全满足您的操作系统的需求，详情页面查看如下链接</span><br><span class="line"><span class="meta">#</span> https://github.com/dylanaraps/neofetch/wiki/Installation</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> apt管理包工具，Debian和Ubuntu</span><br><span class="line">apt install neofetch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> yum管理包工具，CentOS和RedHat</span><br><span class="line">yum install neofetch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> pacman管理包工具，Arch</span><br><span class="line">pacman -S neofetch</span><br></pre></td></tr></table></figure><p>Q：Windows下怎么配置？<br>A：笔者并没有试过，但是操作流程应该与Linux差不多，需要注意文件路径的问题，要让操作系统能过识别到文件的命令。</p><p>Q：没有成功？<br>A：注意自己的文件目录以及配置的相关路径问题，不要写错了。建议有一点Linux终端命令、bash shell命令、vim简单命令等基础，或者自己检索一些Google或百度，了解一些即可，很简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;终端显示系统信息&quot;&gt;&lt;a href=&quot;#终端显示系统信息&quot; class=&quot;headerlink&quot; title=&quot;终端显示系统信息&quot;&gt;&lt;/a&gt;终端显示系统信息&lt;/h4&gt;&lt;h5 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://2694048168.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CMake笔记</title>
    <link href="https://2694048168.github.io/CMake%E7%AC%94%E8%AE%B0/"/>
    <id>https://2694048168.github.io/CMake笔记/</id>
    <published>2020-03-27T07:59:49.000Z</published>
    <updated>2020-06-16T13:49:07.703Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CMake简介"><a href="#CMake简介" class="headerlink" title="CMake简介"></a>CMake简介</h4><ul><li>全称Cross Platform Make，简称CMake</li><li>主要为了跨平台需求，Windows、Linux、Unix、Mac、iOS、Android</li><li>一款优秀的工程构建工具，类似工具有autotools等</li><li>为特定IDE构建工程项目，如CodeLite、CodeBlocks等跨平台开源IDE</li><li>编译生成目标可以使可执行文件，动静态库</li></ul><h4 id="CMake编译原理"><a href="#CMake编译原理" class="headerlink" title="CMake编译原理"></a>CMake编译原理</h4><ul><li>利用cmake命令读取CMakeLIsts文件生成Makefile文件</li><li>利用make命令读取Makefile文件生成最终输出目标文件</li></ul><h4 id="编译想到的问题"><a href="#编译想到的问题" class="headerlink" title="编译想到的问题"></a>编译想到的问题</h4><ul><li>如何组织项目的编译框架</li><li>最终输出的目标是什么，可执行程序，动态库，静态库</li><li>如何配置输出目标文件的指定编译参数，编译参数以及环境，源文件等等</li><li>如何指定输出目标连接参数，如内外部依赖，连接外部库等等</li></ul><h4 id="CMake语法主体"><a href="#CMake语法主体" class="headerlink" title="CMake语法主体"></a>CMake语法主体</h4><ul><li><p>工程配置部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 包括工程名、编译调试模式、编译系统语言</span><br><span class="line"><span class="meta">#</span> 指定CMake最低版本号要求</span><br><span class="line">cmake_minimum_required (VERSION num)</span><br><span class="line"><span class="meta">#</span> 项目信息</span><br><span class="line">project (current_project_name)</span><br><span class="line"><span class="meta">#</span> 设置编译版本 如“-std=c++11”、“-std=c++14”、“-std=c++17”、“-std=c++20”</span><br><span class="line">set (CMAKE_CXX_FLAGS "-std=c++11")</span><br><span class="line"><span class="meta">#</span> 设置编译模式,如“Debug”、“Release”</span><br><span class="line">set (CMake_BUILD_TYPE "Debug")</span><br></pre></td></tr></table></figure></li><li><p>依赖执行部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 包括工程包、头文件、依赖库等等</span><br><span class="line"><span class="meta">#</span> 引入外部依赖</span><br><span class="line">find_package (std_lib_name VERSION REQUIRED)</span><br><span class="line"><span class="meta">#</span> 生成库（动、静）类型</span><br><span class="line">add_library (&lt;name&gt; [lib_type] source1)</span><br><span class="line"><span class="meta">#</span> 设置头文件路径</span><br><span class="line">set (include_dir "$&#123;PROJECT_SOURCE_DIR&#125;/include/")</span><br><span class="line"><span class="meta">#</span> 指定头文件路径，必须在 add_executeable 前面</span><br><span class="line">include_directories ($&#123;include_dir&#125;)</span><br><span class="line"><span class="meta">#</span> 设置源代码路径</span><br><span class="line">set (source_dir "$&#123;PROJECT_SOURCE_DIR&#125;/src/")</span><br><span class="line"><span class="meta">#</span> 设置需要编译的源文件</span><br><span class="line">file (GLOB source_files "$&#123;source_dir&#125;/*.cpp")</span><br><span class="line"><span class="meta">#</span> 设置编译的输出目标文件</span><br><span class="line">add_executable (HelloWorld $&#123;source_files&#125;)</span><br><span class="line"><span class="meta">#</span> 指定链接库路径，必须在 add_executeable 后面</span><br><span class="line">target_link_libraries ($&#123;std_lib_name_LIBRARIES&#125;)</span><br></pre></td></tr></table></figure></li><li><p>其他辅助部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 包括参数打印、遍历目录等等</span><br></pre></td></tr></table></figure></li><li><p>判断控制部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 条件判断、函数定义、条件执行等等</span><br></pre></td></tr></table></figure></li></ul><h4 id="CMake常用实例"><a href="#CMake常用实例" class="headerlink" title="CMake常用实例"></a>CMake常用实例</h4><h5 id="工程文件目录配置"><a href="#工程文件目录配置" class="headerlink" title="工程文件目录配置"></a>工程文件目录配置</h5><p>采用外部编译，首先进入build文件目录，使用cmake命令，然后使用make命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 读取并执行顶层cmakelists配置文件</span><br><span class="line">cmake ..</span><br><span class="line"><span class="meta">#</span> 直接make读取并编译Makefile文件</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>.<br>|——build<br>|——CMakeLists.txt<br>|——include<br>   |<br>   |——hello.h<br>|——src<br>   |<br>   |——hello.cpp<br>   |——main.cpp</p><h5 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h5><p>在Ubuntu系统中为CodeLite IDE创建工程项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 0、前期工具准备</span><br><span class="line"><span class="meta">#</span> 更新系统软件源</span><br><span class="line">sudo apt update</span><br><span class="line"><span class="meta">#</span> 更新系统的软件</span><br><span class="line">sudo apt upgrade</span><br><span class="line"><span class="meta">#</span> 安装vim、g++、cmake、codelite软件工具</span><br><span class="line">sudo apt install vim g++ cmake codelite</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1、前期文件目录准备</span><br><span class="line"><span class="meta">#</span> 创建Dev空文件目录，项目开发顶级目录</span><br><span class="line">mkdir Dev</span><br><span class="line"><span class="meta">#</span> 进入Dev文件目录</span><br><span class="line">cd Dev</span><br><span class="line"><span class="meta">#</span> 创建HelloWorld空文件目录，项目开发中的模块目录</span><br><span class="line">mkdir HelloWorld</span><br><span class="line"><span class="meta">#</span> 进入HelloWorld空文件目录</span><br><span class="line">cd HelloWorld</span><br><span class="line"><span class="meta">#</span> 创建src空文件目录，储存模块的源代码目录</span><br><span class="line">mkdir src</span><br><span class="line"><span class="meta">#</span> 创建项目的主程序源代码文件</span><br><span class="line">touch src/Main.cpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、配置CMake的配置文件CMakeLists.txt</span><br><span class="line">vim CMakeLists.txt</span><br><span class="line"><span class="meta">#</span> 设置CMake最低要求版本</span><br><span class="line">cmake_minimum_required (VERSION 3.5)</span><br><span class="line"><span class="meta">#</span> 设置项目名</span><br><span class="line">project (HelloWorld)</span><br><span class="line"><span class="meta">#</span> 设置编译参数</span><br><span class="line">set (CMAKE_CXX_FLAGS "$&#123;CMAKE_CXX_FLAGS&#125; -Wall -Werror -std=c++11")</span><br><span class="line"><span class="meta">#</span> 设置源代码文件目录</span><br><span class="line">set (source_dir "$&#123;PROJECT_SOURCE_DIR&#125;/src/")</span><br><span class="line"><span class="meta">#</span> 设置需要编译的源文件</span><br><span class="line">file (GLOB source_files "$&#123;source_dir&#125;/*.cpp")</span><br><span class="line"><span class="meta">#</span> 设置编译的输出目标文件</span><br><span class="line">add_executable (HelloWorld $&#123;source_files&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、生成项目</span><br><span class="line"><span class="meta">#</span> 创建脚本自动运行</span><br><span class="line">vim build.sh</span><br><span class="line"><span class="meta">#</span> 脚本内容</span><br><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line"><span class="meta">#</span> 为CodeLite IDE创建项目工程，并自动生成Makefile文件</span><br><span class="line">cmake -G "CodeLite - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line"><span class="meta">#</span> 为脚本添加可执行权限</span><br><span class="line">chmod +x build.sh</span><br><span class="line"><span class="meta">#</span> 运行shell脚本</span><br><span class="line">./build.sh</span><br><span class="line"><span class="meta">#</span> 查看脚本运行结果</span><br><span class="line">ls</span><br><span class="line"><span class="meta">#</span> 利用IDE CodeLite 以后台方式打开工程项目</span><br><span class="line">codelite HelloWorld.workspace &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;CMake简介&quot;&gt;&lt;a href=&quot;#CMake简介&quot; class=&quot;headerlink&quot; title=&quot;CMake简介&quot;&gt;&lt;/a&gt;CMake简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;全称Cross Platform Make，简称CMake&lt;/li&gt;
&lt;li&gt;主要为了跨
      
    
    </summary>
    
      <category term="C&amp;C++" scheme="https://2694048168.github.io/categories/C-C/"/>
    
    
      <category term="CMake" scheme="https://2694048168.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>C++笔记</title>
    <link href="https://2694048168.github.io/C++%E7%AC%94%E8%AE%B0/"/>
    <id>https://2694048168.github.io/C++笔记/</id>
    <published>2020-03-23T12:58:17.000Z</published>
    <updated>2020-06-20T12:18:16.892Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基础笔记"><a href="#基础笔记" class="headerlink" title="基础笔记"></a>基础笔记</h4><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>单行注释：// 通常用于源代码的上方或者后面，用于对该行源代码的说明<br>多行注释：/* 通常用于源代码的上方，用于对一段源代码进行描述，函数、类等等 */</p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>意义：管理内存空间，将一段内存空间起名，便于程序猿操作内存<br>语法：数据类型  变量名  =  变量初始值;</p><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>意义：记录不可更改的数据<br>语法：有宏常量方式，通常在文件常量区定义；有const修饰方式，在变量定义时修饰即可</p><ul><li>#define   常量名  常量值</li><li>const  数据类型  常量名  =  常量值</li></ul><h5 id="关键字（标识符）"><a href="#关键字（标识符）" class="headerlink" title="关键字（标识符）"></a>关键字（标识符）</h5><p>意义：C++已经预用的标识符，变量名不能是关键字<br>分类：数据类型、储存类型、运算符、流程控制<br>sizeof关键字</p><ul><li>统计计算数据类型所占内存大小</li><li>语法：sizeof( 数据类型 / 变量);</li><li>标识符规则<ul><li>不能是关键字</li><li>只能是字母、数字、下划线组成</li><li>首字母不能是数字</li><li>标识符区别大小写</li><li>标识符要见名知意，规范命名，驼峰命名法</li></ul></li></ul><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><ul><li>整型：short、int、long、long long</li><li>实型（浮点型）：float、double</li><li>字符型：char（储存单个字符，以ASCII码储存）</li><li>转义字符<ul><li>意义：用于表示一些不能显示出来的ASCII字符</li><li>常用：\、\t、\n、\v</li></ul></li><li>字符串型<ul><li>意义：用于表示一串字符</li><li>风格：C语言风格、C++语言风格<br>   1、char 变量名[]  =  “字符串”;<br>   2、string 变量名  =  “字符串”;</li></ul></li><li>布尔类型<ul><li>意义：布尔类型代表真或者假（1\0），true\false</li></ul></li><li>输入：cin，用于键盘获取数据</li><li>输出：cout，用于输出数据到标准屏幕 </li></ul><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p>意义：用于执行数据或者表达式运算，有优先级之分</p><ul><li>算术运算符：处理数值的四则运算，+加、-减、 乘*、除 /、取模 %、 自增++、自减–</li><li>赋值运算符：将表达式赋值给变量，右值赋值左值，=赋值、+=加等于、-=减等于、%=取模等于</li><li>比较运算符：用于表达式比较，返回布尔类型，==等于、！=不等于、&lt;小于、&gt;大于、&lt;=小于等于、&gt;=大于等于</li><li>逻辑运算符：根据表达式的值返回布尔类型，！非、&amp;&amp;与、||或</li></ul><h5 id="流程结构"><a href="#流程结构" class="headerlink" title="流程结构"></a>流程结构</h5><h6 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h6><ul><li>意义：程序按顺序执行，不发生跳转（goto、break、continue）</li></ul><h6 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h6><ul><li>意义：依据条件是否为真，有选择的进行跳转执行相应功能</li><li>关键字：if、else、else if、switch、case、break，可以嵌套</li><li>三目运算符：表达式1 ？ 表达式2 ：表达式3；返回的是一个变量，可以最为右值赋值</li></ul><h6 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h6><ul><li>意义：依据条件是否为真，循环进行跳转多次执行相应代码</li><li>关键字：while、beark、do while、for、continue、goto，可以嵌套</li></ul><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul><li>数据元素都是相同的数据类型</li><li>连续的内存进行存储</li><li>数组名就是内存中首地址,可以计算内存空间， len = sizeof（array）/sizeof（array[0]）</li></ul><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li>意义：对复用的代码段进行封装</li><li>构成：返回值类型  函数名  参数列表  函数体语句  return表达式</li><li>函数的声明（头文件）和定义（源文件）时不一样的，分文件编写</li><li>形式参数（形参）和实际参数（实参）：值传递、地址传递、引用传递</li><li>函数可以有默认参数（声明和定义只能一个有默认参数），某位置有默认值，则其后必有默认值</li><li>函数占位参数，调用时必须填补位置；形参只有数据类型，则占位</li><li>函数重载<ul><li>意义：函数名可以相同，提高复用性</li><li>条件：<ul><li>同一作用域下（例如都在全局作用域下）</li><li>函数名相同</li><li>函数参数类型、个数、顺序不同</li><li>函数返回值不能作为函数重载的条件</li></ul></li><li>引用作为重载条件：int &amp;a  和   const  int &amp;a可以重载</li><li>函数重载遇到函数默认参数：编译器要能识别（防止二义性）使用哪一个函数</li></ul></li></ul><h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><ul><li>意义：使用指针间接访问内存，内存地址</li><li><em>定义指针，&amp;取地址符，</em>ptr解引用</li><li>所占内存空间固定，4字节（与操作系统有关）</li><li>空指针和野指针，其所指向的内存无法访问</li><li>const int * ptr = &amp;a    常量指针：指针的指向可以修改，但是指针指向的值不可以修改</li><li>int * const ptr = &amp;a   指针常量：指针的指向不可以修改，但是指针指向的值可以修改</li><li>const int * const ptr = &amp;a   修饰指针和常量：指针的指向和指针指向的值均不可以修改</li><li>指针和数组、函数</li></ul><h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><ul><li>意义：自定义数据类型</li><li>语法：struct 结构体名  {结构体成员列表}；</li><li>成员访问符.，结构体指针成员访问符-&gt;</li><li>结构体数组、结构体指针、结构体嵌套、结构体作为函数参数</li><li>使用const防止误操作，结构体以地址传递作为参数时，使用const只允许读，不允许写</li></ul><h5 id="实用案例"><a href="#实用案例" class="headerlink" title="实用案例"></a>实用案例</h5><p><strong>通讯录管理系统</strong><br>查看《C++实战1》文章</p><h4 id="核心笔记"><a href="#核心笔记" class="headerlink" title="核心笔记"></a>核心笔记</h4><h5 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h5><ul><li>代码区：储存函数体的二进制代码，有操作系统管理；储存CPU执行的机器指令，共享和只读；程序未执行前</li><li>全局区：储存全局变量和静态变量以及常量；全局变量、静态变量static、常量（字符串常量和const修饰的全局变量）；由操作系统管理释放；程序未执行前</li><li>栈区：有编译器自动分配释放，储存函数的参数值、局部变量等；编译器分配释放（不要返回局部变量的地址）；函的参数值、局部变量；程序执行后</li><li>堆区：有程序猿申请分配和释放，若不释放，则程序结束时操作系统回收；程序执行后；new申请和delete释放；</li></ul><h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><ul><li>意义：给变量取一个别名alias</li><li>语法：数据类型  &amp;别名  =  原名</li><li>引用必须初始化，而且初始化后不可修改</li><li>本质：引用本质就是编译器自动创建一个指针常量（int  *  const ptr = &amp;a）</li><li>引用作为函数参数（引用传递—类似地址传递效果）、作为函数返回值（左值）、常量引用（修饰形参，防止误操作）</li></ul><h6 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h6><ul><li>C++面向对象三大特性：封装（Encapsulation）、继承（Inheritance）、多态（Polymorphism）</li><li>万物皆对象，对象有属性和行为（Linux中万物皆文件）；相同性质的对象抽象为类，类实例化对象</li><li>封装<ul><li>意义：将属性和行为作为一个整体，满足实际需求；将属性和行为加以权限控制</li><li>语法：class  类名{ 访问权限：属性  /  行为}；</li><li>属性和行为统一称为成员；属性称为成员变量或者成员属性；行为称为成员函数或者成员方法</li><li>访问权限：public（公共权限）类内和类外均可访问；protected（保护权限）类内可以访问，类外不可以访问，子类可以访问保护内容；private（私有权限）类可以访问，类外不可以访问，子类也不可以访问私有内容</li><li>struct和class唯一区别在于默认访问权限不同，struct默认是公共权限，而class默认是私有权限</li><li>成员属性设置为私有：自己控制读写（set和get）权限；写（set）权限可检测数据的有效性</li><li>对象的初始化和清理<ul><li>构造函数和析构函数：编译器强制要求且自动调用，若自己不提供，编译器会提供空实现的构造函数和析构函数</li><li>构造函数：类名（）{}<ul><li>构造函数无返回值，也不是void</li><li>函数名与类名相同</li><li>构造函数可以有参数，故此可以发生重载</li><li>程序在调用对象时自动调用构造，而且只调用一次</li></ul></li><li>析构函数：~类名（）{}<ul><li>构造函数无返回值，也不是void</li><li>函数名与类名相同，前面加一个~</li><li>构造函数不能参数，故此不可能发生重载</li><li>程序在对象销毁前自动调用构造，而且只调用一次</li></ul></li><li>构造函数分类：按参数划分（有参构造和无参构造）；按类型划分（普通构造器和拷贝构造）</li><li>构造函数调用：括号法、显示法、隐式转换法</li><li>拷贝构造函数调用时机：使用一个已经创建完成的对象来初始化一个新对象；值传递方式给函数参数传值；值方式返回局部对象</li><li>构造函数调用规则：C++编译器默认至少给一个类添加：默认构造函数（无参、函数体为空）、默认析构函数（无参、函数体为空）、默认拷贝构造函数（对属性进行值拷贝，属于浅拷贝）、赋值运算符 operator=（运算符重载） 对属性进行值拷贝；如果自己提供有参构造函数，C++不提供默认构造函数，但是会提供默认拷贝构造函数；如果自己提供拷贝构造函数，C++就不会提供其他构造函数</li><li>深拷贝和浅拷贝：浅拷贝就是简单的赋值拷贝操作；深拷贝就是在堆区重新申请内存空间进行拷贝操作（在析构函数中释放堆区数据）；浅拷贝带来的问题就是堆区的内存重复释放，解决方法就是利用深拷贝</li><li>初始化列表：构造函数（）：属性1（值），属性2（值），</li><li>类对象作为类成员，两个类的构造和析构函数顺序</li><li>静态成员（就是在成员变量和成员函数前添加关键字static）：静态成员变量（所有对象共享同一份数据；在编译阶段分配内存；类内声明，类外初始化）和静态成员函数（所有对象共享同一个函数；静态成员函数只能访问静态成员变量）</li></ul></li><li>C++对象模型和this指针<ul><li>成员变量和成员函数分开储存：非静态成员变量属于类对象上，静态成员变量不属于类对象上，非静态成员函数不属于类对象上，静态成员函数不属于类对象上</li><li>this指针（本质就是一个指针常量）：解决每一个非静态成员函数只会诞生一份函数实例，也就是多个同类型的对象会公用代码，如何区分哪一个对象调用自己；C++提供特殊的对象指针（this指针），this指针指向被调用成员函数所属的对象；隐含在每一个非静态成员函数内的一种指针，不需要定义，直接使用</li><li>this用途：当形参和成员变量同名时，使用this指针来区分；在类的非静态成员函数中返回对象本身，可以使用return  *this（链式使用）</li><li>空指针访问成员函数</li><li>const修饰成员函数（常函数），const修饰声明对象（常对象），mutable关键字</li></ul></li><li>友元<ul><li>意义：程序中，私有属性，也想让一些特殊的函数或者类进行访问</li><li>关键字：friend，就是让一个函数或者类访问另一个类中的私有成员</li><li>友元实现：全局函数做友元；类做友元；成员函数做友元</li></ul></li><li>运算符重载<ul><li>意义：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</li><li>用法：成员函数重载运算符；全局函数重载运算符；运算符重载也可以发生函数重载</li><li>关键字：operator运算符（+、&lt;&lt;、++、=、关系运算符、函数调用运算符）</li></ul></li></ul></li><li>继承<ul><li>意义：利用继承技术，减少重复代码</li><li>语法：class  子类（派生类）  ：  继承方式  父类（基类）</li><li>继承方式：公共继承、保护继承、、私有继承（两者取其低）</li><li>继承中的对象模型：父类中所有非静态成员属性全部都会被继承下来，私有成员属性访问不到，但是继承下来了</li><li>继承中构造和析构函数的顺序</li><li>继承中同名成员处理方式：访问子类同名成员，直接访问即可；访问父类同名成员，需要加作用域进行访问（子类对象访问父类成员）</li><li>继承同名静态成员处理方式：访问子类同名成员，直接访问即可；访问父类同名成员，需要加作用域进行访问（子类对象访问父类成员）</li><li>多继承语法：C++运行一个类继承多个类；class  子类  ：  继承方式  父类1 ，继承方式  父类2；多继承可能引发父类中同名成员出现，需要作用域区分</li><li>菱形继承：两个派生类继承同一基类，同时又有一个类同时继承这两个派生类，也称之为钻石继承；菱形继承，两个父类的相同数据，需要加作用域区分；利用虚继承解决菱形继承问题，数据由两份的问题</li><li>虚继承：virtual  base  pointer（vbptr），虚基类指针（地址、偏移量），只有一份数据</li></ul></li><li>多态<ul><li>意义：可替换性(substitutability)、可扩充性(extensibility)、接口性(interface-ability)、灵活性(flexibility)、简化性(simplicity)</li><li>分类：静态多态（函数重载、运算符重载），静态多态的函数地址早绑定，即就是编译阶段确定函数地址；动态多态（派生类和虚函数实现运行时多态），动态多态的函数地址晚绑定，即就是运行阶段确定函数地址</li><li>多态满足条件：有继承关系；子类重写父类中的虚函数</li><li>多态使用条件：父类指针或者引用指向子类对象</li><li>重写：函数返回值类型  函数名  参数列表  三者完全一致称为重写（与函数重载不同）</li><li>纯虚函数和抽象类：在多态中，通常父类中虚函数的实现时毫无意义，主要都是调用子类重写的内容，故此将虚函数改为纯虚函数，当类中有了纯虚函数，这个类也称之为抽象类</li><li>纯虚函数语法：virtual  返回值类型  函数名  （参数列表）  =  0；</li><li>抽象类特点：无法实例化对象；子类必须重写抽象类中的纯虚函数，否则也是抽象类</li><li>虚析构和纯虚析构<ul><li>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用子类的析构代码函数，故此将父类中析构函数改为虚析构函数或者纯虚析构函数</li><li>虚析构和纯虚析构共性：可以解决父类指针释放子类对象；都需要具体的代码实现</li><li>虚析构和纯虚析构区别：纯虚析构函数，该类属于抽象类，无法实例化对象</li><li>虚析构语法：virtual  ~类名（）{}；</li><li>纯虚析构语法：virtual  <del>类名（） = 0；类名：</del>类名（）{}</li></ul></li></ul></li></ul><h6 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h6><ul><li>意义：程序运行时产生的数据都属于临时数据，程序一旦运行结束就会释放，文件可以实现数据持久化</li><li>头文件：<fstream></fstream></li><li>文件类型<ul><li>文本文件：文件以文本的ASCII码形式储在计算机中</li><li>二进制文件：文件以文本的二进制形式储存在计算机中，用户一般不能直接读懂</li></ul></li><li>文件操作类：oftream（写操作）；ifstream（读操作）；fstream（读写操作）</li><li>写文件操作流程<br>  1 包含头文件：#include <fstream><br>  2 创建流对象：ofstream  ofs；<br>  3 打开文件：ofs.open(“文件路径”，打开方式);<br>  4 写入数据：ofs  &lt;&lt;  “写入的数据”；<br>  5 关闭文件：ofs.close();<ul><li>文件打开方式有几种，可以使用|操作配合使用</li></ul></fstream></li><li>读文件操作流程<br>  1 包含头文件：#include <fstream><br>  2 创建流对象：ifstream  ifs；<br>  3 打开文件并判断文件是否打开成功：ifs.open(“文件路径”，打开方式);<br>  4 读取数据：四种读取方式<br>  5 关闭文件：ifs.close();<ul><li>读取文件方式：字符数组利用&gt;&gt;；字符数组利用getline函数；字符串string利用getline函数；字符读取利用get函数（文件结结束符EOF：end of file）</li></ul></fstream></li><li>二进制读写操作<ul><li>写文件主要利用流对象调用成员函数write</li><li>函数原型：ostream&amp; write (const * buffer, int len);</li><li>参数解释：字符指针buffer指向内存中一段储存空间，len是读写的字节数</li><li>读文件主要利用流对象调用成员函数read</li><li>函数原型：istream&amp; read (const * buffer, int len);</li><li>参数解释：字符指针buffer指向内存中一段储存空间，len是读写的字节数</li></ul></li></ul><h5 id="实用案例-1"><a href="#实用案例-1" class="headerlink" title="实用案例"></a>实用案例</h5><p><strong>职工管理系统</strong><br>查看《C++实战2》文章</p><h4 id="提高笔记"><a href="#提高笔记" class="headerlink" title="提高笔记"></a>提高笔记</h4><h6 id="C-的另一种思想：泛型编程，利用STL技术（面向对象思想）"><a href="#C-的另一种思想：泛型编程，利用STL技术（面向对象思想）" class="headerlink" title="C++的另一种思想：泛型编程，利用STL技术（面向对象思想）"></a>C++的另一种思想：泛型编程，利用STL技术（面向对象思想）</h6><h6 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h6><ul><li>通用的模具，提高复用性</li><li>模板不可以直接使用，只是一个框架</li><li>模板的通用并不是万能</li><li>C++提供模板机制：函数模板和类模板</li><li>函数模板的作用：建立一个通用的函数，其函数的返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表</li><li>函数模板语法：template<typename t>   下行函数的声明或者定义</typename></li><li>函数模板使用：自动推导数据类型；指定模板的数据类型</li><li>普通函数和模板函数区别：自动类型转换（隐式类型转换）</li><li>普通函数和模板函数调用规则<ul><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用模板函数</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配，优先调用模板函数</li></ul></li><li>模板的局限性：模板不是万能（解决方案就是用具体化方式做特殊实现）</li><li>函数模板语法：template<typename t>  下面是类</typename></li><li>类模板和函数模板的区别<ul><li>类模板没有自动类型推导的使用方式（类模板只能使用显示指定类型方式）</li><li>类模板在模板参数列表中可以有默认参数</li></ul></li><li>类模板中成员函数和普通类中成员函数创建时机<ul><li>普通类中成员函数一开始就可以创建</li><li>类模板中成员函数在调用时才创建</li></ul></li><li>类模板对象做函数参数<ul><li>指定传入的类型，直接显示对象的数据类型（使用广泛）</li><li>参数模板化，将对象中的参数变为模板进行传递</li><li>整个类模板化，将这个对象类型 模板化进行传递</li></ul></li><li>类模板和继承<ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定父类的T类型</li><li>如果不能指定，编译器无法给予子类分配内存</li><li>如果想灵活指定父类T的类型，子类也需要变为类模板</li></ul></li><li>类模板成员函数的类外实现</li><li>类模板分文件编写（类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到）<ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp（约定的，不是强制）</li></ul></li><li>类模板与友元（类内和类外实现）<ul><li>全局函数类内实现：直接在类内声明友元即可</li><li>全局函数类外实现：需要提前让编译器知道全局函数的存在</li></ul></li></ul><h6 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h6><ul><li>STL诞生<ul><li>长久以来，软件界一直希望建立一种可重复利用的</li><li>C++的面向对象和泛型编程思想，目的就是提高复用性</li><li>大多情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</li><li>为了建立数据结构和算法的一套标准，诞生了STL</li></ul></li><li>STL基本概念<ul><li>STL（Standard Template Library），标准模板库</li><li>STL从广义划分：容器（container）、算法（algorithm）、迭代器（iterator）</li><li>容器和算法之间通过迭代器进行无缝连接</li><li>STL几乎是所有代码都采用了类模板或者模板函数</li></ul></li><li>STL六大组件<ul><li>容器：各种数据结构（vector、list、deque、set、map等等）用来存放数据</li><li>算法：各种常用算法（sort、find、copy、for_each）等等</li><li>迭代器：扮演了容器与算法之间的胶合剂</li><li>仿函数：行为类似函数，可以作为算法的某种策略</li><li>适配器（配接器）：一种用来修饰容器或者仿函数或者迭代器接口的东西</li><li>空间配置器：负责空间的配置和管理</li></ul></li><li>函数对象（仿函数）<ul><li>函数对象</li><li>谓词（一元谓词、二元谓词）</li><li>内建函数对象<ul><li>算术仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul></li></ul></li></ul><h5 id="实用案例-2"><a href="#实用案例-2" class="headerlink" title="实用案例"></a>实用案例</h5><p><strong>演讲比赛程序需求</strong></p><h4 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h4><p><strong>机房预约系统</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基础笔记&quot;&gt;&lt;a href=&quot;#基础笔记&quot; class=&quot;headerlink&quot; title=&quot;基础笔记&quot;&gt;&lt;/a&gt;基础笔记&lt;/h4&gt;&lt;h5 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h
      
    
    </summary>
    
      <category term="C&amp;C++" scheme="https://2694048168.github.io/categories/C-C/"/>
    
    
      <category term="C++语言" scheme="https://2694048168.github.io/tags/C-%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>实用网站</title>
    <link href="https://2694048168.github.io/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>https://2694048168.github.io/实用网站/</id>
    <published>2020-02-28T17:43:04.000Z</published>
    <updated>2020-02-29T14:16:19.487Z</updated>
    
    <content type="html"><![CDATA[<h5 id="常用网址"><a href="#常用网址" class="headerlink" title="常用网址"></a>常用网址</h5><h6 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h6><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==" title="https://github.com/">GitHub<i class="fa fa-external-link"></i></span></p><ul><li>存放自己的一些Demos，源代码</li><li>查找一些优秀的项目或者学习资料</li><li>使用githubPage构建静态博客    </li></ul><h6 id="清华镜像"><a href="#清华镜像" class="headerlink" title="清华镜像"></a>清华镜像</h6><p><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==" title="https://mirrors.tuna.tsinghua.edu.cn/">清华镜像<i class="fa fa-external-link"></i></span></p><ul><li>一些国外开源的工具或者资源，都有镜像下载，国内访问速度快</li><li>各种Linux发行版镜像下载以及对应的软件源</li><li>CTAN的镜像，如TeX &amp; LaTeX 镜像下载</li><li>可以指定Python的pip包管理下载源为清华镜像，install package时很快</li><li>有Anaconda镜像支持</li></ul><h6 id="源代码高亮显示"><a href="#源代码高亮显示" class="headerlink" title="源代码高亮显示"></a>源代码高亮显示</h6><p><span class="exturl" data-url="aHR0cDovL3d3dy5wbGFuZXRiLmNhL3N5bnRheC1oaWdobGlnaHQtd29yZA==" title="http://www.planetb.ca/syntax-highlight-word">planetb<i class="fa fa-external-link"></i></span></p><ul><li>源代码直接复制粘贴到Word中，有高亮显示和行号</li><li>支持C/C++、Java、Python、C#、JavaScript、PHP、HTML、CSS、Ruby、SQL</li></ul><h6 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h6><p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQv" title="https://sourceforge.net/">sourceforge<i class="fa fa-external-link"></i></span></p><ul><li>可以下载开源项目的源代码</li><li>查找一些开源的项目</li></ul><h6 id="图片格式转换"><a href="#图片格式转换" class="headerlink" title="图片格式转换"></a>图片格式转换</h6><p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZGNvbnZlcnQuY29tL3N2Zy10by1lcHM=" title="https://cloudconvert.com/svg-to-eps">cloudconvert<i class="fa fa-external-link"></i></span></p><ul><li>支持矢量图格式SVG和EPS在线相互转换</li></ul><h6 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h6><p><span class="exturl" data-url="aHR0cHM6Ly9tc2RuLnNqanptLmNvbS8=" title="https://msdn.sjjzm.com/">OS<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL21zZG4uaXRlbGx5b3UuY24v" title="http://msdn.itellyou.cn/">MSDN<i class="fa fa-external-link"></i></span></p><ul><li>提供Win7、Win8、Win10 系统下载</li><li>第二个提供Microsoft的各类工具</li></ul><h6 id="职业信息网络"><a href="#职业信息网络" class="headerlink" title="职业信息网络"></a>职业信息网络</h6><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub25ldG9ubGluZS5vcmcv" title="https://www.onetonline.org/">onetonline<i class="fa fa-external-link"></i></span></p><ul><li>美国一个职业信息网络，包含数百万的职业定义</li><li>学生或者求职者可以查看对应职业所需的技能要求以及日常工作</li></ul><h6 id="免费PPT模板"><a href="#免费PPT模板" class="headerlink" title="免费PPT模板"></a>免费PPT模板</h6><p><span class="exturl" data-url="aHR0cDovL3d3dy4xcHB0LmNvbS8=" title="http://www.1ppt.com/">PPT<i class="fa fa-external-link"></i></span></p><ul><li>可以下载免费的PPT模板</li><li>不需要的账号登录</li></ul><h6 id="Ubuntu18安装教程"><a href="#Ubuntu18安装教程" class="headerlink" title="Ubuntu18安装教程"></a>Ubuntu18安装教程</h6><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzM2NjAyNDI3L2FydGljbGUvZGV0YWlscy84NjU0ODIwMw==" title="https://blog.csdn.net/baidu_36602427/article/details/86548203">Ubuntu<i class="fa fa-external-link"></i></span></p><ul><li>比较详细的Ubuntu18下载、安装、配置源 的教程</li></ul><h6 id="百度谷歌学术"><a href="#百度谷歌学术" class="headerlink" title="百度谷歌学术"></a>百度谷歌学术</h6><p><span class="exturl" data-url="aHR0cDovL3h1ZXNodS5iYWlkdS5jb20v" title="http://xueshu.baidu.com/">百度学术<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hYy5zY21vci5jb20v" title="https://ac.scmor.com/">谷歌学术镜像<i class="fa fa-external-link"></i></span></p><ul><li>常用于检索一些学术文章、论文等等</li></ul><h5 id="人工智能AI"><a href="#人工智能AI" class="headerlink" title="人工智能AI"></a>人工智能AI</h5><h6 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h6><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcv" title="https://www.tensorflow.org/">TensorFlow<i class="fa fa-external-link"></i></span></p><ul><li>安装TensorFlow官网教程</li><li>学习TensorFlow</li><li>TensorFlow相关资源</li></ul><h6 id="sklearn官方"><a href="#sklearn官方" class="headerlink" title="sklearn官方"></a>sklearn官方</h6><p><span class="exturl" data-url="aHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnL3N0YWJsZS8=" title="https://scikit-learn.org/stable/">scikit-learn<i class="fa fa-external-link"></i></span></p><ul><li>了解、学习机器学习库sklearn</li><li>学习机器学习的几种类型：分类、回归、线性、降维</li><li>学习对数据的预处理、特征工程、模型选择</li></ul><h6 id="kaggle数据集"><a href="#kaggle数据集" class="headerlink" title="kaggle数据集"></a>kaggle数据集</h6><p><span class="exturl" data-url="aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9kYXRhc2V0cw==" title="https://www.kaggle.com/datasets">kaggle<i class="fa fa-external-link"></i></span></p><ul><li>可以直接检索到 kaggle 的数据集</li><li>可以下载 kaggle 数据集</li></ul><h5 id="LaTeX学习"><a href="#LaTeX学习" class="headerlink" title="LaTeX学习"></a>LaTeX学习</h5><h6 id="LaTeX工作室"><a href="#LaTeX工作室" class="headerlink" title="LaTeX工作室"></a>LaTeX工作室</h6><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGF0ZXhzdHVkaW8ubmV0Lw==" title="https://www.latexstudio.net/">LaTeXstudio<i class="fa fa-external-link"></i></span></p><ul><li>下载、安装、使用和学习 LaTeX 的教程以及资源</li><li>相关的LaTeX、Beamer模板</li></ul><h6 id="Beamer"><a href="#Beamer" class="headerlink" title="Beamer"></a>Beamer</h6><p><span class="exturl" data-url="aHR0cHM6Ly9oYXJ0d29yay5vcmcvYmVhbWVyLXRoZW1lLW1hdHJpeC8=" title="https://hartwork.org/beamer-theme-matrix/">Beamer<i class="fa fa-external-link"></i></span></p><ul><li>Beamer的各种主题以及对应的颜色主题预览</li></ul><h6 id="LaTeX模板"><a href="#LaTeX模板" class="headerlink" title="LaTeX模板"></a>LaTeX模板</h6><p><span class="exturl" data-url="aHR0cDovL3d3dy5sYXRleHRlbXBsYXRlcy5jb20v" title="http://www.latextemplates.com/">latextemplates<i class="fa fa-external-link"></i></span></p><ul><li>LaTeX 的一些模板下载</li></ul><h6 id="arxiv"><a href="#arxiv" class="headerlink" title="arxiv"></a>arxiv</h6><p><span class="exturl" data-url="aHR0cHM6Ly9hcnhpdi5vcmcv" title="https://arxiv.org/">arxiv<i class="fa fa-external-link"></i></span></p><ul><li>arXiv是一個收集物理学、数学、计算机科学、生物学与数理经济学的论文预印本的网站</li><li>可以下载相应的学术期刊型LaTeX模板，进行论文的写作</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;常用网址&quot;&gt;&lt;a href=&quot;#常用网址&quot; class=&quot;headerlink&quot; title=&quot;常用网址&quot;&gt;&lt;/a&gt;常用网址&lt;/h5&gt;&lt;h6 id=&quot;GitHub&quot;&gt;&lt;a href=&quot;#GitHub&quot; class=&quot;headerlink&quot; title=&quot;GitHu
      
    
    </summary>
    
      <category term="工具" scheme="https://2694048168.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="学习网站" scheme="https://2694048168.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX排版</title>
    <link href="https://2694048168.github.io/LaTeX%E6%8E%92%E7%89%88/"/>
    <id>https://2694048168.github.io/LaTeX排版/</id>
    <published>2020-02-19T06:33:16.000Z</published>
    <updated>2020-03-21T12:41:16.276Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介篇"><a href="#简介篇" class="headerlink" title="简介篇"></a>简介篇</h4><h5 id="TeX简介"><a href="#TeX简介" class="headerlink" title="TeX简介"></a>TeX简介</h5><p>TeX 是一个格式化排版系统，其问世便以其排版效果的高质量震动整个出版界，特别是在排版中含有大量数学公式的科技文献方面更加显示出其优越性。TeX 还是一个程序源代码公开的免费排版系统，是于20世纪60年代，著名计算机专家和数学家，斯坦福大学 Donald E. Knuth （读音：ka-nooth）教授编写的。</p><h5 id="LaTeX简介"><a href="#LaTeX简介" class="headerlink" title="LaTeX简介"></a>LaTeX简介</h5><p>LaTeX 是由美国计算机学家 Leslie　Lamport 于1985年开发成功的。它是当今世界上最流行和使用最为广泛，以 TeX 为引擎的高质量格式化排版系统。它构筑在 TeX 的基础之上，并且加进了很多新功能，使得使用者可以更为方便的利用 TeX 的强大功能。</p><h5 id="笔者环境"><a href="#笔者环境" class="headerlink" title="笔者环境"></a>笔者环境</h5><p><strong>TeXLive</strong><br><img src="/images/latextext.png" alt="self"><br><strong>TeXStudio</strong><br><img src="/images/texstudio.png" alt="self"></p><p>【备注】大部分高校、研究机构和期刊都有LaTeX写作模板！</p><h5 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h5><p><strong>引擎——原语</strong></p><ul><li>TeX</li><li>XeTeX</li><li>pdfLaTeX</li><li>LuaTeX</li><li>pTeX</li><li>pTeX-ng</li><li>Omega</li><li>up TeX</li></ul><p><strong>格式——代码风格</strong></p><ul><li>plain TeX</li><li>LaTeX<ul><li>LaTeX2e</li><li>LaTeX3</li></ul></li><li>ConTeXt</li></ul><p><strong>宏包——功能</strong></p><ul><li>graphicx    插图宏包</li><li>tabu    制作表格宏包</li><li>natbib    调整参考文献格式宏包</li><li>titlesec    调整标题格式宏包</li></ul><p><strong>辅助工具</strong></p><ul><li>BiBTeX    排版参考文献</li><li>makeindex    交叉引用</li><li>编辑器</li></ul><p><strong>发行版——套装</strong></p><ul><li>TeXLive    支持Mac OS、Windows、Linux、Unix    【笔者推荐】</li><li>MacTeX    只支持Mac OS</li><li>MikTeX    只支持Windows</li></ul><p><strong>IDE（集成开发环境）</strong></p><ul><li>TeXStudio        支持Mac OS、Windows、Linux、Unix    【笔者推荐】</li><li>WinEdt        只支持Windows</li><li>TeXwork        TeXLive自带的</li><li>Visual Studio Code     微软Microsoft的编辑器</li><li>sublime        常用编辑器，支持Mac OS、Windows、Linux、Unix</li></ul><p>【备注】以上所有的发行版本和IDE版本均可使用搜索引擎进入其对应官网下载或者进入镜像网站下载！</p><h6 id="编译器环境"><a href="#编译器环境" class="headerlink" title="编译器环境"></a>编译器环境</h6><p><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL0NUQU4vc3lzdGVtcy90ZXhsaXZlL0ltYWdlcy8=" title="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">TeXLive 清华镜像<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3R1Zy5vcmcvdGV4bGl2ZS8=" title="http://tug.org/texlive/">TeXLive 官网<i class="fa fa-external-link"></i></span></p><h6 id="编辑器环境"><a href="#编辑器环境" class="headerlink" title="编辑器环境"></a>编辑器环境</h6><p><span class="exturl" data-url="aHR0cDovL3RleHN0dWRpby5zb3VyY2Vmb3JnZS5uZXQv" title="http://texstudio.sourceforge.net/">TeXStudio 官网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5zdWJsaW1ldGV4dC5jb20vMw==" title="http://www.sublimetext.com/3">Sublime 官网<i class="fa fa-external-link"></i></span></p><p>【备注】安装过程简单Next，不懂就搜索一下。安装TeXLive时注意根据需要选择是否要装Texwork！</p><h5 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h5><p><span class="exturl" data-url="aHR0cHM6Ly93ZW5kYS5sYXRleHN0dWRpby5uZXQv" title="https://wenda.latexstudio.net/">LaTeX 工作室<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29tLw==" title="https://www.overleaf.com/">LaTeX 在线编辑<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cubGF0ZXgtcHJvamVjdC5vcmcv" title="https://www.latex-project.org/">LaTeX 资源组织<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1zLm9yZy9wdWJsaWNhdGlvbnMvYXV0aG9ycy90ZXgvYW1zbGF0ZXg=" title="https://www.ams.org/publications/authors/tex/amslatex">LaTeX AMS 美国数学协会<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxzZXZpZXIuY29tL2F1dGhvcnMvYXV0aG9yLXNjaGVtYXMvbGF0ZXgtaW5zdHJ1Y3Rpb25z" title="https://www.elsevier.com/authors/author-schemas/latex-instructions">LaTeX Instruction<i class="fa fa-external-link"></i></span></p><h5 id="资料推荐"><a href="#资料推荐" class="headerlink" title="资料推荐"></a>资料推荐</h5><ul><li>《一份不太简短的LATEX2e介绍》</li><li>《CTEX FAQ （常见问题集）》</li></ul><p>【备注】在网站都能找到需要的文档、模板等等，关于入门资料两本书搜索一下都有电子版！<br> 《一份不太简短的LATEX2e介绍》CTAN://info/lshort/chinese<br> CTAN://info/lshort</p><h4 id="实用篇"><a href="#实用篇" class="headerlink" title="实用篇"></a>实用篇</h4><h5 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">% 导言区</span><br><span class="line">% 1、载入文档类型</span><br><span class="line">\documentclass[UTF8,a4paper,12pt]&#123;article&#125;</span><br><span class="line">% 2、导入所需宏包</span><br><span class="line">% ctex宏包支持中文</span><br><span class="line">\usepackage&#123;ctex&#125;</span><br><span class="line">% 3、自定义命令</span><br><span class="line">% 4、添加基本信息</span><br><span class="line">\begin&#123;titlepage&#125;</span><br><span class="line">\title&#123;the introduction of \LaTeX&#125;</span><br><span class="line">\author&#123;Wei Li&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\end&#123;titlepage&#125;</span><br><span class="line"></span><br><span class="line">% 正文区</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">% 1、输出基本信息</span><br><span class="line">\maketitle</span><br><span class="line">\newpage</span><br><span class="line"></span><br><span class="line">% 2、输出目录</span><br><span class="line">\tableofcontents</span><br><span class="line">\newpage</span><br><span class="line"></span><br><span class="line">% 3、输出正文的内容</span><br><span class="line">Hello \TeX ! \\</span><br><span class="line">Hello \LaTeX ! \\</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h5 id="Beamer制作幻灯片"><a href="#Beamer制作幻灯片" class="headerlink" title="Beamer制作幻灯片"></a>Beamer制作幻灯片</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="技巧篇"><a href="#技巧篇" class="headerlink" title="技巧篇"></a>技巧篇</h4><h5 id="LaTeX常见文件类型"><a href="#LaTeX常见文件类型" class="headerlink" title="LaTeX常见文件类型"></a>LaTeX常见文件类型</h5><ul><li>.tex —— 文章源代码</li><li>.cls —— 文档类（class）</li><li>.sty —— 宏包（style）</li><li>.bib —— BiBTeX数据库文件（参考文献）</li><li>.bst —— BiBTeX样式文件（bibliography style）</li><li>.ins —— 宏包安装文件（install）</li><li>.dtx —— 文档化的宏包源代码（documented tex source）</li></ul><h5 id="TDS（TeX-Directory-Structure）"><a href="#TDS（TeX-Directory-Structure）" class="headerlink" title="TDS（TeX Directory Structure）"></a>TDS（TeX Directory Structure）</h5><ul><li>LaTeX怎么寻找所需文件！</li><li>TDS的根目录为TEXMF（TeX and Metafont）</li><li>TEXMF有多个，相互独立，有优先级：当前目录 &gt; texmf-local &gt; texmf-dist</li><li>ls-R数据库，存储文件目录结构：mktexlsr，texhash</li><li>kpsewhich命令查找宏包位置</li><li>texdoc命令打开宏包的说明文档</li></ul><h5 id="TeXLive的包管理器TeX-LiveManager（命令-tlmgr）"><a href="#TeXLive的包管理器TeX-LiveManager（命令-tlmgr）" class="headerlink" title="TeXLive的包管理器TeX LiveManager（命令 tlmgr）"></a>TeXLive的包管理器TeX LiveManager（命令 tlmgr）</h5><ul><li>tlmgr info package    查看宏包简要信息</li><li>tlmgr option repository    查看当前默认宏包仓库的源</li><li>tlmgr option repository <span class="exturl" data-url="aHR0cDovL21pcnJvci5jdGFuLm9yZy9zeXN0ZW1zL3RleGxpdmUvdGxuZXQ=" title="http://mirror.ctan.org/systems/texlive/tlnet">http://mirror.ctan.org/systems/texlive/tlnet<i class="fa fa-external-link"></i></span>   设置默认宏包仓库的源（自动选择最近源）</li><li>tlmgr update –self    更新tlmgr宏包管理器</li><li>tlmgr update –all    更新所有需要更新的宏包</li><li>tlmgr update package    更新特定宏包</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简介篇&quot;&gt;&lt;a href=&quot;#简介篇&quot; class=&quot;headerlink&quot; title=&quot;简介篇&quot;&gt;&lt;/a&gt;简介篇&lt;/h4&gt;&lt;h5 id=&quot;TeX简介&quot;&gt;&lt;a href=&quot;#TeX简介&quot; class=&quot;headerlink&quot; title=&quot;TeX简介&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="工具" scheme="https://2694048168.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="LaTeX" scheme="https://2694048168.github.io/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>Python数据处理</title>
    <link href="https://2694048168.github.io/Python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>https://2694048168.github.io/Python数据处理/</id>
    <published>2020-02-16T13:48:53.000Z</published>
    <updated>2020-03-09T07:31:39.510Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Data Wrangling with Python</strong></p><h5 id="什么是数据处理"><a href="#什么是数据处理" class="headerlink" title="什么是数据处理"></a>什么是数据处理</h5><p>数据处理是指将杂乱的或未加工的数据源转换成有用的信息。先寻找原始数据源，并判断其价值：这些数据集的数据质量有多好？它们与你的目标是否相关？能否找到更好的数据源？在对数据进行解析与清洗后，数据集变得可用，这时你可以利用工具和方法（如Python 脚本）来帮你分析数据，并以报告的形式展示结果。这样你可以将无人问津的数据变得清晰可用。</p><h5 id="有用的工具：-type、-dir和help"><a href="#有用的工具：-type、-dir和help" class="headerlink" title="有用的工具： type、 dir和help"></a>有用的工具： type、 dir和help</h5><p>&emsp;&emsp;type 可以帮你确定你的对象属于哪种数据类型。想在 Python 代码中做到这一点，将变量放到 type() 的括号里，当你用变量保存数据，并想知道变量里的数据是什么类型时，这一方法是非常有用的。</p><p>&emsp;&emsp;dir 会返回一个内置方法与属性的列表，帮你列出特定数据类型能做的所有事情。暂时忽略返回的列表中开头的那些项（以双下划线开头的那些字符串）。这些是 Python 使用的内部方法或私有方法。最有用的方法包含在返回列表的第二部分。许多方法的用途显而易见，或者说是自说明的（self-documenting）。</p><p>&emsp;&emsp;Python 内置方法是 help 方法。这一方法会返回对象、方法或模块的文档——虽然经常以技术性很强（有时很难懂）的文字书写。<br>你可以向 help 方法中传入任何对象、方法或模块，但如前所见，在传入方法时不应该把尾部的括号也包括进去。</p><h5 id="机器可读"><a href="#机器可读" class="headerlink" title="机器可读"></a>机器可读</h5><p>以易于机器理解的方式来存储数据的文件格式，通常被称作机器可读的（machine readable）</p><ul><li>逗号分隔值（Comma-Separated Values， CSV）<br>&emsp;&emsp;机器可读的文件格式是 CSV。 CSV 文件（简称为 CSV）是指将数据列用逗号分隔的文件。文件的扩展名是 .csv。另一种数据类型，叫作制表符分隔值（tab-separated values， TSV）数据，有时也与 CSV归为一类。 TSV 与 CSV 唯一的不同之处在于，数据列之间的分隔符是制表符（tab），而不是逗号。文件的扩展名通常是 .tsv，但有时也用 .csv 作为扩展名。从本质上来看， .tsv 文件与 .csv 文件在 Python 中的作用是相同的。如果文件的扩展名是 .tsv，那么里面包含的很可能是 TSV 数据。如果文件的扩展名是 .csv，那么里面包含的可能是 CSV 数据，但也可能是 TSV 数据。一定要打开文件查看一下，这样你可以在导入数据之前就明确所处理的数据类型。</li><li>JavaScript 对象符号（JavaScript Object Notation， JSON）<br>&emsp;&emsp;JSON 是数据传输最常用的格式之一。人们喜欢这一格式，是因为它结构清晰、易于阅读且方便解析。网站在向页面的 JavaScript 传输数据时， JSON 也是最常用的数据格式之一。许多网站都提供了支持 JSON 的 API，如果文件的扩展名是 .json，那里面包含的可能是 JSON 数据。如果文件扩展名是 .js，那可能是 JavaScript 件，但在少数情况下也可能是命名不规范的JSON 文件。</li><li>可扩展标记语言（eXtensible Markup Language， XML）<br>&emsp;&emsp;JSON如果文件的扩展名是 .xml，那么它是 XML 数据。如果文件扩展名是 .html或 .xhtml，有时也可以用 XML 解析器来解析。XML 是一种标记语言，也就是说，它具有包含格式化数据的文档结构。XML 文档本质上只是格式特殊的数据文件。</li></ul><h5 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h5><ul><li>联合国开放数据 ( <span class="exturl" data-url="aHR0cDovL2RhdGEudW4ub3JnLw==" title="http://data.un.org/">http://data.un.org/<i class="fa fa-external-link"></i></span> )</li><li>康奈尔大学 arXiv 项目 （ <span class="exturl" data-url="aHR0cHM6Ly9hcnhpdi5vcmcv" title="https://arxiv.org/">https://arxiv.org/<i class="fa fa-external-link"></i></span> ）</li><li>kaggle 数据集 (<span class="exturl" data-url="aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9kYXRhc2V0cw==" title="https://www.kaggle.com/datasets">https://www.kaggle.com/datasets<i class="fa fa-external-link"></i></span>)</li><li>Movielens 网站的电影评分 (<span class="exturl" data-url="aHR0cHM6Ly9ncm91cGxlbnMub3JnL2RhdGFzZXRzL21vdmllbGVucy8=" title="https://grouplens.org/datasets/movielens/">https://grouplens.org/datasets/movielens/<i class="fa fa-external-link"></i></span>)</li><li>机器学习 (<span class="exturl" data-url="aHR0cHM6Ly9kYXRhcmVwb3NpdG9yeS53b2xmcmFtY2xvdWQuY29tL2NhdGVnb3J5L01hY2hpbmUtTGVhcm5pbmcv" title="https://datarepository.wolframcloud.com/category/Machine-Learning/">https://datarepository.wolframcloud.com/category/Machine-Learning/<i class="fa fa-external-link"></i></span>)</li><li>KD掘金数据 (<span class="exturl" data-url="aHR0cHM6Ly93d3cua2RudWdnZXRzLmNvbS9kYXRhc2V0cy9pbmRleC5odG1s" title="https://www.kdnuggets.com/datasets/index.html">https://www.kdnuggets.com/datasets/index.html<i class="fa fa-external-link"></i></span>)</li><li>Socrata开放数据网络 (<span class="exturl" data-url="aHR0cHM6Ly9kYXRham9icy5jb20vZGF0YS1zY2llbmNlLXJlcG8v" title="https://datajobs.com/data-science-repo/">https://datajobs.com/data-science-repo/<i class="fa fa-external-link"></i></span>)</li><li>超级数据科学-机器学习 (<span class="exturl" data-url="aHR0cHM6Ly93d3cuc3VwZXJkYXRhc2NpZW5jZS5jb20vcGFnZXMvbWFjaGluZS1sZWFybmluZw==" title="https://www.superdatascience.com/pages/machine-learning">https://www.superdatascience.com/pages/machine-learning<i class="fa fa-external-link"></i></span>)</li></ul><h5 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h5><ul><li>数据无量纲化：将不同规格的数据转换到同一规格；不同分布的数据转换到某一特定分布</li><li>中心化处理，加减一个固定值</li><li>缩放处理Scale，除以一个规定值，取对数</li><li>数据归一化，数据收敛到0-1之间</li><li>数据标准化，数据按均值中心化，再按标准差缩放，数据就服从均值为0，方差为1的正态分布</li><li>字段缺失——替换、填充</li><li>处理分类型特征：编码和哑变量【文本与数值转换】</li><li>处理连续型特征：二值化和分段【连续离散化】</li></ul><h5 id="数据读入"><a href="#数据读入" class="headerlink" title="数据读入"></a>数据读入</h5><ul><li>csv<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Data Wrangling with Python&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;什么是数据处理&quot;&gt;&lt;a href=&quot;#什么是数据处理&quot; class=&quot;headerlink&quot; title=&quot;什么是数据处理&quot;&gt;&lt;/a&gt;什么是数据处理&lt;/h5&gt;&lt;p
      
    
    </summary>
    
      <category term="Python" scheme="https://2694048168.github.io/categories/Python/"/>
    
    
      <category term="数据处理" scheme="https://2694048168.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>文献阅读</title>
    <link href="https://2694048168.github.io/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    <id>https://2694048168.github.io/文献阅读/</id>
    <published>2020-02-10T08:26:55.000Z</published>
    <updated>2020-02-12T07:15:44.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="鄙人习惯"><a href="#鄙人习惯" class="headerlink" title="鄙人习惯"></a>鄙人习惯</h4><ol><li>使用Zotero Connector来收集chrome浏览器中检索到的文章</li><li>然后自动文章信息自动导入到本地Zotero客户端中</li><li>利用Foxit福晰阅读器来阅读下载的PDF格式文章</li><li>在Zotero中对应文章下建立markdown笔记，便于导出到博客</li><li>在Zotero中安装markdownhere4zotero插件来支持markdown格式</li><li>对参考文献的导出，在word中点击Zotero可以添加参考文献，支持多种样式格式</li><li>同时对于写LaTex文章，可以导出BibTeX或者BibLaTeX加以引入</li></ol><p><strong><em>提示：这并不是唯一选择，只要适合自己即可！</em></strong></p><h4 id="文献检索"><a href="#文献检索" class="headerlink" title="文献检索"></a>文献检索</h4><h5 id="检索工具"><a href="#检索工具" class="headerlink" title="检索工具"></a>检索工具</h5><ul><li>Google引擎、Baidu引擎、Bing引擎</li><li>中文检索库：中国知网、万方数据库、维普</li><li>英文检索库：Web of Science、谷歌学术、NCBI、Annual Reviews</li><li>学位论文检索：中国知网、CALIS、ProQuest</li><li>专利检索：万方数据库、中国专利信息网、国家知识产权</li></ul><h5 id="检索思路"><a href="#检索思路" class="headerlink" title="检索思路"></a>检索思路</h5><ul><li>普通检索<br>在各种数据库或者浏览器中直接检索关键词，然后筛选自己需要的文章！</li><li>高级检索<br>以主题、分类、作者等等进行检索，然后筛选自己需要的文章！</li><li>浏览检索<br>关注专业的核心期刊，对每一期刊都浏览查看，如Nature！</li><li>追溯检索<br>选择专业的一篇核心文章，然后追溯其参看文献文章！</li></ul><h5 id="文献筛选"><a href="#文献筛选" class="headerlink" title="文献筛选"></a>文献筛选</h5><ul><li>关注重点：最新文章、核心期刊</li><li>主次分明：英文为主，中文为辅</li><li>初步筛选：阅读标题和摘要</li><li>减少下载：最终筛选，决定需要才下载</li></ul><h5 id="重点文献"><a href="#重点文献" class="headerlink" title="重点文献"></a>重点文献</h5><ul><li>领域内经典文献</li><li>领域内大神或课题组的文章</li><li>领域内代表性学者的文章</li><li>核心文章</li><li>最新文章</li></ul><h4 id="文献阅读"><a href="#文献阅读" class="headerlink" title="文献阅读"></a>文献阅读</h4><h5 id="思想认识"><a href="#思想认识" class="headerlink" title="思想认识"></a>思想认识</h5><ul><li>文献是科研的基础</li><li>化被动为主动</li><li>注重阅读顺序</li><li>多多交流，质疑文献</li></ul><h5 id="文献专用词"><a href="#文献专用词" class="headerlink" title="文献专用词"></a>文献专用词</h5><ul><li>文献综述</li><li>有影响力的文献</li><li>期刊影响因子</li><li>引用次数</li><li>自引和他引</li><li>核心文献</li></ul><h5 id="阅读概述"><a href="#阅读概述" class="headerlink" title="阅读概述"></a>阅读概述</h5><ul><li>文章数量：江湖传言，硕士50篇，博士100篇</li><li>类型顺序：中文综述——中文硕博论文——英文综述——英文研究型文章</li><li>阅读概论：以网状结构而形成系统；以目标为导向专研核心文章</li><li>方法论：需求决定阅读方法</li><li>研究型文章结构：标题、摘要、前言、试验方法、图表、分析讨论、结论</li></ul><h5 id="笔记重点"><a href="#笔记重点" class="headerlink" title="笔记重点"></a>笔记重点</h5><ul><li>基本信息：题目、出处、著者、期卷等等</li><li>中心思想：概况目的、研究手段方法、结论</li><li>实验方法：实验方案、实验框架</li><li>英文学习：专业词汇、引言和讨论写法句式</li><li>查询需求：自己有质疑的地方</li><li>总结需求：文章重要观点、方法论</li></ul><h4 id="文献管理"><a href="#文献管理" class="headerlink" title="文献管理"></a>文献管理</h4><h5 id="思想认识-1"><a href="#思想认识-1" class="headerlink" title="思想认识"></a>思想认识</h5><ul><li>在科研项目中，查阅资料占据一半的时间和精力</li><li>文章一定要学会精读和速读</li><li>选择一款适合自己的文献管理软件，事半功倍</li><li>良好的笔记行为和良好的标记行为，节约时间</li></ul><h5 id="文献管理软件"><a href="#文献管理软件" class="headerlink" title="文献管理软件"></a>文献管理软件</h5><ul><li>EndNote：业内神器，商业收费</li><li>Mendeley ：社区功能，免费，需要梯子</li><li>Zotero：开源免费，支持浏览器插件</li><li>JabRef：开源免费，支持latex的BibTeX 格式</li><li>CNKI E-Study：知网推荐，支持浏览器插件</li><li>Papers：写论文神器，支持PDF</li><li>Citavi：论文帮手，瑞士军刀</li></ul><h5 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a>网址链接</h5><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25raS5uZXQv" title="https://www.cnki.net/">中国知网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy53YW5mYW5nZGF0YS5jb20uY24vaW5kZXguaHRtbA==" title="http://www.wanfangdata.com.cn/index.html">万方数据库<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5jcXZpcC5jb20v" title="http://www.cqvip.com/">维普数据库<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL2V0ZC5jYWxpcy5lZHUuY24v" title="http://etd.calis.edu.cn/">学位论文中心服务系统<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5wYXRlbnQuY29tLmNuLw==" title="http://www.patent.com.cn/">中国专利信息网<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5jbmlwYS5nb3YuY24v" title="http://www.cnipa.gov.cn/">国家知识产权<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tLw==" title="https://www.baidu.com/">baidu引擎<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL2xvZ2luLndlYm9ma25vd2xlZGdlLmNvbS8=" title="http://login.webofknowledge.com/">Web of Science<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi8=" title="https://www.ncbi.nlm.nih.gov/">NCBI<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20uaGsvP2hsPXpoLUNO" title="https://scholar.google.com.hk/?hl=zh-CN">谷歌学术<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3h1ZXNodS5iYWlkdS5jb20v" title="http://xueshu.baidu.com/">百度学术<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hYy5zY21vci5jb20v" title="https://ac.scmor.com/">谷歌学术镜像<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9jbi5iaW5nLmNvbS8=" title="https://cn.bing.com/">bing引擎<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay93ZWJocD9obD16aC1DTiZzb3VyY2VpZD1jbmhw" title="https://www.google.com.hk/webhp?hl=zh-CN&sourceid=cnhp">googe引擎<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5udWFscmV2aWV3cy5vcmcv" title="https://www.annualreviews.org/">Annual Reviews<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;鄙人习惯&quot;&gt;&lt;a href=&quot;#鄙人习惯&quot; class=&quot;headerlink&quot; title=&quot;鄙人习惯&quot;&gt;&lt;/a&gt;鄙人习惯&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;使用Zotero Connector来收集chrome浏览器中检索到的文章&lt;/li&gt;
&lt;li&gt;然后自动文章信息自
      
    
    </summary>
    
      <category term="读书" scheme="https://2694048168.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="文献检索、阅读、管理" scheme="https://2694048168.github.io/tags/%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2%E3%80%81%E9%98%85%E8%AF%BB%E3%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Shell笔记</title>
    <link href="https://2694048168.github.io/Shell%E7%AC%94%E8%AE%B0/"/>
    <id>https://2694048168.github.io/Shell笔记/</id>
    <published>2020-02-04T14:16:15.000Z</published>
    <updated>2020-03-25T14:50:41.208Z</updated>
    
    <content type="html"><![CDATA[<h4 id="笔记概述"><a href="#笔记概述" class="headerlink" title="笔记概述"></a>笔记概述</h4><h5 id="Shell-环境"><a href="#Shell-环境" class="headerlink" title="Shell 环境"></a>Shell 环境</h5><p>Linux 的 Shell 种类众多，常见的有：</p><ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>K Shell（/usr/bin/ksh）</li><li>Shell for Root（/sbin/sh）</li></ul><p>一般情况下Bash，指的就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。而且在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 #!/bin/sh，它同样也可以改为 #!/bin/bash。</p><p>#! 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p><h5 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h5><ul><li><p>以脚本方式运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./*.sh</span><br><span class="line">./*.sh</span><br></pre></td></tr></table></figure></li><li><p>用shell解释器运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh *.sh</span><br></pre></td></tr></table></figure></li></ul><h5 id="Shell-脚本注释"><a href="#Shell-脚本注释" class="headerlink" title="Shell 脚本注释"></a>Shell 脚本注释</h5><p>以 # 开头的行就是注释，会被解释器忽略，通过每一行加一个 # 号设置多行注释。<br>多行注释还可以使用以下格式：（EOF 也可以使用其他符号:如，！等等）<br>:&lt;&lt;EOF<br>注释内容…<br>注释内容…<br>注释内容…<br>EOF</p><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h4 id="核心语法"><a href="#核心语法" class="headerlink" title="核心语法"></a>核心语法</h4><h5 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h5><ul><li>变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样！</li><li>使用一个定义过的变量，只要在变量名前面加美元符号即可</li><li>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界</li><li>推荐给所有变量加上花括号，这是个好的编程习惯</li><li>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</li><li>使用 unset 命令可以删除变量。变量被删除后不能再次使用。unset 命令不能删除只读变量。</li></ul><p>运行shell时，会同时存在三种变量</p><ul><li>局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li>环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li>shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。</li></ul><h5 id="shell-字符串"><a href="#shell-字符串" class="headerlink" title="shell 字符串"></a>shell 字符串</h5><p>字符串是shell编程中最常用最有用的数据类型（数字和字符串），字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号字符串的限制</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><p>双引号的优点</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><p>字符串操作</p><ul><li>拼接字符串，建议使用双引号拼接，也可以单引号</li><li>获取字符串长度，在字符串变量前引用#号</li><li>提取子字符串，切片操作，注意第一个字符的索引值为 0</li><li>查找子字符串，查找字符 i 或 o 的位置，使用反引号：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string="runoob is a great site"</span><br><span class="line">echo `expr index "$string" io`  # 输出 4</span><br><span class="line"><span class="meta">#</span> 注意： 以上脚本中 ` 是反引号，而不是单引号 '，不要看错了哦。</span><br></pre></td></tr></table></figure></li></ul><h5 id="shell-数组"><a href="#shell-数组" class="headerlink" title="shell 数组"></a>shell 数组</h5><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><p>定义数组<br>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：数组名=(值1 值2 … 值n)</p><p>读取数组<br>读取数组元素值的一般格式是：${数组名[下标]}，将下标使用 @ 或 * 符号可以获取数组中的所有元素</p><p>获取数组的长度<br>获取数组长度的方法与获取字符串长度的方法相同，</p><h5 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h5><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……,其中 $0 为执行的文件名</p><p>shell中几个特殊字符用来处理参数：</p><!--Table--><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数</td></tr><tr><td>$-</td><td>显示Shell使用的当前选项，与set命令功能相同</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误</td></tr></tbody></table><p>$* 与 $@ 区别：相同点，都是引用所有参数；不同点，只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p><h5 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h5><p>Shell 和其他编程语言一样，支持多种运算符</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作，注意：</p><ul><li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 <code></code> 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><h6 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h6><!--Table--><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td>[ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true</td><td>[ $a != $b ] 返回 true。</td></tr></tbody></table><p>注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]！！！<br>注意：乘号(*)前边必须加反斜杠()才能实现乘法运算！！！</p><h6 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h6><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><!--Table--><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回 true。</td><td>[ $a -eq $b ] 返回 false。</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回 true。</td><td>[ $a -ne $b ] 返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td>[ $a -gt $b ] 返回 false。</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td>[ $a -lt $b ] 返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td>[ $a -ge $b ] 返回 false。</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td>[ $a -le $b ] 返回 true。</td></tr></tbody></table><h6 id="布尔运算符和逻辑运算符"><a href="#布尔运算符和逻辑运算符" class="headerlink" title="布尔运算符和逻辑运算符"></a>布尔运算符和逻辑运算符</h6><!--Table--><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>!</td><td>非运算，表达式为 true 则返回 false，否则返回 true。</td><td>[ ! false ] 返回 true。</td></tr><tr><td>-o</td><td>或运算，有一个表达式为 true 则返回 true。</td><td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td>-a</td><td>与运算，两个表达式都为 true 才返回 true。</td><td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr><tr><td>&amp;&amp;</td><td>逻辑的 AND</td><td>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h6 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h6><!--Table--><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为0，为0返回 true。</td><td>[ -z $a ] 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否为0，不为0返回 true。</td><td>[ -n “$a” ] 返回 true。</td></tr><tr><td>$</td><td>检测字符串是否为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td></tr></tbody></table><h6 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h6><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><!--Table--><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr><tr><td>-S file</td><td>判断某文件是否 socket。</td><td></td></tr><tr><td>-L file</td><td>检测文件是否存在并且是一个符号链接。</td><td></td></tr></tbody></table><h5 id="Shell-标准输出命令"><a href="#Shell-标准输出命令" class="headerlink" title="Shell 标准输出命令"></a>Shell 标准输出命令</h5><h6 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h6><p>Shell 的 echo 指令，用于字符串的输出。命令格式：echo string<br>您可以使用echo实现更复杂的输出格式控制。</p><p>echo输出的字符串总结</p><!--Table--><table><thead><tr><th>能否引用变量</th><th>能否引用转移符</th><th>能否引用文本格式符(如：换行符、制表符)</th></tr></thead><tbody><tr><td>单引号</td><td>否</td><td>否</td></tr><tr><td>双引号</td><td>能</td><td>能</td></tr><tr><td>无引号</td><td>能</td><td>能</td></tr></tbody></table><p>&gt; 重定向输出到某个位置，替换原有文件的所有内容<br>&gt;&gt; 重定向追加到某个位置，在原有文件的末尾添加内容</p><h6 id="printf-命令"><a href="#printf-命令" class="headerlink" title="printf 命令"></a>printf 命令</h6><p>printf 命令模仿 C 程序库（library）里的 printf() 程序。printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。<br>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \n。</p><p>printf 命令的语法：printf  format-string  [arguments…]<br>参数说明：</p><ul><li>format-string: 为格式控制字符串</li><li>arguments: 为参数列表。</li></ul><h5 id="Shell-test-命令"><a href="#Shell-test-命令" class="headerlink" title="Shell test 命令"></a>Shell test 命令</h5><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><p>数值测试</p><!--Table--><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>等于则为真</td></tr><tr><td>-ne</td><td>不等于则为真</td></tr><tr><td>-gt</td><td>大于则为真</td></tr><tr><td>-ge</td><td>大于等于则为真</td></tr><tr><td>-lt</td><td>小于则为真</td></tr><tr><td>-le</td><td>小于等于则为真</td></tr></tbody></table><p>符号含义</p><ul><li>eq  （equal的缩写），表示等于为真</li><li>ne    (not equal的缩写），表示不等于为真</li><li>gt     (greater than的缩写），表示大于为真</li><li>ge  （greater&amp;equal的缩写），表示大于等于为真</li><li>lt    （lower than的缩写），表示小于为真</li><li>le   （lower&amp;equal的缩写），表示小于等于为真</li></ul><p>字符串测试</p><!--Table--><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于则为真</td></tr><tr><td>!=</td><td>不相等则为真</td></tr><tr><td>-z</td><td>字符串    字符串的长度为零则为真</td></tr><tr><td>-n</td><td>字符串    字符串的长度不为零则为真</td></tr></tbody></table><p>文件测试</p><!--Table--><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-e 文件名</td><td>如果文件存在则为真</td></tr><tr><td>-r 文件名</td><td>如果文件存在且可读则为真</td></tr><tr><td>-w 文件名</td><td>如果文件存在且可写则为真</td></tr><tr><td>-x 文件名</td><td>如果文件存在且可执行则为真</td></tr><tr><td>-s 文件名</td><td>如果文件存在且至少有一个字符则为真</td></tr><tr><td>-d 文件名</td><td>如果文件存在且为目录则为真</td></tr><tr><td>-f 文件名</td><td>如果文件存在且为普通文件则为真</td></tr><tr><td>-c 文件名</td><td>如果文件存在且为字符型特殊文件则为真</td></tr><tr><td>-b 文件名</td><td>如果文件存在且为块特殊文件则为真</td></tr></tbody></table><p>另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：”!”最高，”-a”次之，”-o”最低。</p><h5 id="Shell-流程控制"><a href="#Shell-流程控制" class="headerlink" title="Shell 流程控制"></a>Shell 流程控制</h5><h6 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> if 语句语法格式：</span><br><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    commands</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> if else 语法格式：</span><br><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    commands</span><br><span class="line">else</span><br><span class="line">    commands</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> if else-if else 语法格式：</span><br><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h6 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> for循环一般格式为：</span><br><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h6 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。</span><br><span class="line"><span class="meta">#</span> 其格式为：</span><br><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h6 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。</span><br><span class="line"><span class="meta">#</span> 一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</span><br><span class="line"><span class="meta">#</span> until 语法格式:</span><br><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span> condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</span><br></pre></td></tr></table></figure><h6 id="Shell-case语句为多选择语句。"><a href="#Shell-case语句为多选择语句。" class="headerlink" title="Shell case语句为多选择语句。"></a>Shell case语句为多选择语句。</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</span><br><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><ul><li>取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数</li><li>匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;</li><li>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式</li><li>如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令</li><li>case … esac,与switch … case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始</li><li>用两个分号 ;; 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记</li></ul><h5 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h5><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shell中函数的定义格式如下：</span><br><span class="line">[ function ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [return int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li><li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li><li>函数返回值在调用该函数后通过 $? 来获得。</li><li>$? 仅对其上一条指令负责，一旦函数返回后其返回值没有立即保存入参数，那么其返回值将不再能通过 $? 获得。</li><li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。</li><li>调用函数仅使用其函数名即可。</li><li>函数参数，在Shell中，调用函数时可以向其传递参数。</li><li>在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</li><li>注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</li></ul><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本或函数的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td>$-</td><td>显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h5 id="Shell-输入输出重定向"><a href="#Shell-输入输出重定向" class="headerlink" title="Shell 输入输出重定向"></a>Shell 输入输出重定向</h5><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。<br>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到 file。</td></tr><tr><td>command &lt; file</td><td>将输入重定向到 file。</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file。</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并。</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><h5 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a>Shell 文件包含</h5><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。<br>Shell 文件包含的语法格式如下：</p><ul><li>. filename_路径         # 注意点号(.)和文件名中间有一空格</li><li>source filename_路径</li><li>注：被包含的文件 test1.sh 不需要可执行权限。</li></ul><h4 id="实用案例"><a href="#实用案例" class="headerlink" title="实用案例"></a>实用案例</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;笔记概述&quot;&gt;&lt;a href=&quot;#笔记概述&quot; class=&quot;headerlink&quot; title=&quot;笔记概述&quot;&gt;&lt;/a&gt;笔记概述&lt;/h4&gt;&lt;h5 id=&quot;Shell-环境&quot;&gt;&lt;a href=&quot;#Shell-环境&quot; class=&quot;headerlink&quot; title=&quot;S
      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://2694048168.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib笔记</title>
    <link href="https://2694048168.github.io/Matplotlib%E7%AC%94%E8%AE%B0/"/>
    <id>https://2694048168.github.io/Matplotlib笔记/</id>
    <published>2020-02-01T09:07:18.000Z</published>
    <updated>2020-03-09T05:36:47.468Z</updated>
    
    <content type="html"><![CDATA[<h4 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h4><p>绘制图形，使数据可视化，更加直观、客观和更具说服力。matplotlib是Python最底层的绘图库，类似于MATLAB一样的简单实用。<br>当然Python的绘图库还有更加高级的封装，例如plotpy、seaborn和基于JavaScript(JS)的前端展示Echarts。</p><!--超链接--><p><span class="exturl" data-url="aHR0cHM6Ly9tYXRwbG90bGliLm9yZy9nYWxsZXJ5L2luZGV4Lmh0bWw=" title="https://matplotlib.org/gallery/index.html">matplotlib 官网例子<i class="fa fa-external-link"></i></span></p><h4 id="图形的属性"><a href="#图形的属性" class="headerlink" title="图形的属性"></a>图形的属性</h4><ul><li>设置图形的大小</li><li>保存图形</li><li>调制刻度轴</li><li>添加图形描述信息</li><li>支持中文</li><li>绘制图形网格</li><li>设置颜色</li><li>添加文本水印</li><li>添加图例</li><li>添加文本注释</li></ul><h4 id="源代码实例"><a href="#源代码实例" class="headerlink" title="源代码实例"></a>源代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line"><span class="comment"># @author：云主宰苍穹</span></span><br><span class="line"><span class="comment"># @date：2020-02-05  18:56</span></span><br><span class="line"><span class="comment"># @introduction：对于matplotlib库的基本绘图pyplot简单使用</span></span><br><span class="line"><span class="comment"># @tips：对于每一个方法函数可以查看源代码，了解其使用情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入依赖</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">x = range(<span class="number">2</span>,<span class="number">27</span>,<span class="number">2</span>)</span><br><span class="line">y = [<span class="number">15</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">15</span>]</span><br><span class="line">y2 = [<span class="number">13</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">22</span>,<span class="number">19</span>,<span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形大小,dpi是分辨率</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">10</span>,<span class="number">7</span>), dpi = <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># matplotlib支持中文解决方案</span></span><br><span class="line"><span class="comment"># 查看源码，有font_manager里面属性fname</span></span><br><span class="line"><span class="comment"># 使用命令fc查看系统支持的字体路径(注意冒号前的空格)：fc-list :lang=zh</span></span><br><span class="line">my_font = font_manager.FontProperties( fname = <span class="string">r"C:/Windows/fonts/msyhbd.ttf"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整刻度轴</span></span><br><span class="line">plt.xticks(range(min(x),max(x)+<span class="number">1</span>))</span><br><span class="line">plt.yticks(range(<span class="number">1</span>,<span class="number">28</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加基本描述信息</span></span><br><span class="line">plt.xlabel(<span class="string">"时间"</span>, fontproperties = my_font)</span><br><span class="line">plt.ylabel(<span class="string">"温度"</span>, fontproperties = my_font)</span><br><span class="line"><span class="comment">#使用figtext标记x和y轴</span></span><br><span class="line">plt.figtext(<span class="number">0.9</span>, <span class="number">0.05</span>, <span class="string">"时间"</span>, fontproperties = my_font)</span><br><span class="line">plt.figtext(<span class="number">0.1</span>, <span class="number">0.9</span>, <span class="string">"温度"</span>, fontproperties = my_font)</span><br><span class="line">plt.title(<span class="string">"一天中室内温度值变化"</span>, fontproperties = my_font)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加网格，设置透明度</span></span><br><span class="line">plt.grid(alpha=<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文本水印</span></span><br><span class="line">plt.text(<span class="number">0.95</span>, <span class="number">0.5</span>, <span class="string">"云主宰苍穹"</span>, </span><br><span class="line">         fontsize=<span class="number">80</span>, color=<span class="string">'gray'</span>,</span><br><span class="line">         ha=<span class="string">'right'</span>, va=<span class="string">'bottom'</span>, alpha=<span class="number">0.5</span>, fontproperties = my_font)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形,设置颜色、线条属性、透明度</span></span><br><span class="line">plt.plot(x,y,label=<span class="string">"温度变化"</span>,color=<span class="string">"red"</span>)</span><br><span class="line">plt.plot(x,y2,label=<span class="string">"温度变化"</span>,color=<span class="string">"green"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图例信息，要在绘制图形命令后，loc表示位置，0为最佳选择</span></span><br><span class="line">plt.legend(prop = my_font,loc=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图形，保存格式有svg矢量图，png格式（默认格式），可以设置需要保存图形属性</span></span><br><span class="line">plt.savefig(<span class="string">"./pyplot.svg"</span>)</span><br><span class="line">plt.savefig(<span class="string">"./pyplot.png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><!--图片链接-->    <p><img src="/images/pyplot.png" alt="self"></p><h4 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h4><p>NumPy是使用Python进行科学计算的基本软件包</p><ul><li>强大的N维数组对象</li><li>复杂的（广播）功能</li><li>集成C / C ++和Fortran代码的工具</li><li>有用的线性代数，傅立叶变换和随机数功能</li><li>NumPy还可以用作通用数据的高效多维容器，这使NumPy能够无缝，快速地与各种数据库集成</li><li>NumPy已获得BSD许可证的许可，从而可以无限制地进行重用</li></ul><!--超链接--><p><span class="exturl" data-url="aHR0cHM6Ly9udW1weS5vcmcv" title="https://numpy.org/">numpy 网址<i class="fa fa-external-link"></i></span></p><h4 id="图形的属性-1"><a href="#图形的属性-1" class="headerlink" title="图形的属性"></a>图形的属性</h4><ul><li>设置图形的大小</li><li>保存图形</li><li>调制刻度轴</li><li>添加图形描述信息</li><li>支持中文</li><li>绘制图形网格</li><li>设置颜色</li><li>添加文本水印</li><li>添加图例</li><li>添加文本注释</li></ul><h4 id="源代码实例-1"><a href="#源代码实例-1" class="headerlink" title="源代码实例"></a>源代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h4><p>pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,built on top of the Python programming language.<br>pandas是一种快速，强大，灵活且易于使用的开源数据分析和处理工具。</p><!--超链接--><p><span class="exturl" data-url="aHR0cHM6Ly9wYW5kYXMucHlkYXRhLm9yZy8=" title="https://pandas.pydata.org/">pandas 网址<i class="fa fa-external-link"></i></span></p><h4 id="图形的属性-2"><a href="#图形的属性-2" class="headerlink" title="图形的属性"></a>图形的属性</h4><ul><li>设置图形的大小</li><li>保存图形</li><li>调制刻度轴</li><li>添加图形描述信息</li><li>支持中文</li><li>绘制图形网格</li><li>设置颜色</li><li>添加文本水印</li><li>添加图例</li><li>添加文本注释</li></ul><h4 id="源代码实例-2"><a href="#源代码实例-2" class="headerlink" title="源代码实例"></a>源代码实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;matplotlib&quot;&gt;&lt;a href=&quot;#matplotlib&quot; class=&quot;headerlink&quot; title=&quot;matplotlib&quot;&gt;&lt;/a&gt;matplotlib&lt;/h4&gt;&lt;p&gt;绘制图形，使数据可视化，更加直观、客观和更具说服力。matplotlib是P
      
    
    </summary>
    
      <category term="Python" scheme="https://2694048168.github.io/categories/Python/"/>
    
    
      <category term="matplotlib" scheme="https://2694048168.github.io/tags/matplotlib/"/>
    
      <category term="numpy" scheme="https://2694048168.github.io/tags/numpy/"/>
    
      <category term="pandas" scheme="https://2694048168.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>A_goood_lecture</title>
    <link href="https://2694048168.github.io/A-goood-lecture/"/>
    <id>https://2694048168.github.io/A-goood-lecture/</id>
    <published>2020-01-31T09:56:13.000Z</published>
    <updated>2020-02-19T08:00:44.165Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Some-Old-Truths-to-Help-You-Overcome-Tough-Times"><a href="#Some-Old-Truths-to-Help-You-Overcome-Tough-Times" class="headerlink" title="Some Old Truths to Help You Overcome Tough Times"></a>Some Old Truths to Help You Overcome Tough Times</h4><p>&emsp;&emsp;Unfortunately， life is not a bed of roses. We are going through life facing sad experiences. Moreover， we are grieving various kinds of loss： a friendship， a romantic relationship or a house. Hard times may hold you down at what usually seems like the most inopportune time， but you should remember that they won‘t last forever.</p><p>&emsp;&emsp;When our time of mourning is over， we press forward， stronger with a greater understanding and respect for life. Furthermore， these losses make us mature and eventually move us toward future opportunities for growth and happiness. I want to share these ten old truths I‘ve learned along the way.</p><p>&emsp;&emsp;Fear is both useful and harmful. This normal human reaction is used to protect us by signaling danger and preparing us to deal with it. Unfortunately， people create inner barriers with a help of exaggerating fears. My favorite actor Will Smith once said， “Fear is not real. It is a product of thoughts you create. Do not misunderstand me. Danger is very real. But fear is a choice.” I do completely agree that fears are just the product of our luxuriant imagination.</p><p>&emsp;&emsp;If you are surrounded by problems and cannot stop thinking about the past， try to focus on the present moment. Many of us are weighed down by the past or anxious about the future. You may feel guilt over your past， but you are poisoning the present with the things and circumstances you cannot change. Value the present moment and remember how fortunate you are to be alive. Enjoy the beauty of the world around and keep the eyes open to see the possibilities before you. Happiness is not a point of future and not a moment from the past， but a mindset that can be designed into the present.</p><p>&emsp;&emsp;Sometimes it is easy to feel bad because you are going through tough times. You can be easily caught up by life problems that you forget to pause and appreciate the things you have. Only strong people prefer to smile and value their life instead of crying and complaining about something.</p><p>&emsp;&emsp;No matter how isolated you might feel and how serious the situation is， you should always remember that you are not alone. Try to keep in mind that almost everyone respects and wants to help you if you are trying to make a good change in your life， especially your dearest and nearest people. You may have a circle of friends who provide constant good humor， help and companionship. If you have no friends or relatives， try to participate in several online communities， full of people who are always willing to share advice and encouragement.</p><p>&emsp;&emsp;Today many people find it difficult to trust their own opinion and seek balance by gaining objectivity from external sources. This way you devalue your opinion and show that you are incapable of managing your own life. When you are struggling to achieve something important you should believe in yourself and be sure that your decision is the best. You live in your skin， think your own thoughts， have your own values and make your own choices.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Some-Old-Truths-to-Help-You-Overcome-Tough-Times&quot;&gt;&lt;a href=&quot;#Some-Old-Truths-to-Help-You-Overcome-Tough-Times&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="读书" scheme="https://2694048168.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="认识人生" scheme="https://2694048168.github.io/tags/%E8%AE%A4%E8%AF%86%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python3学习</title>
    <link href="https://2694048168.github.io/Python3%E5%AD%A6%E4%B9%A0/"/>
    <id>https://2694048168.github.io/Python3学习/</id>
    <published>2020-01-30T07:08:35.000Z</published>
    <updated>2020-03-25T14:49:24.777Z</updated>
    
    <content type="html"><![CDATA[<h4 id="笔记概述"><a href="#笔记概述" class="headerlink" title="笔记概述"></a>笔记概述</h4><p>pip常用命令</p><ul><li>python -m pip install –upgrade pip    # 升级pip</li><li>pip install package_name    # 安装包</li><li>pip uninstall package_name    # 卸载包</li><li>pip list    # 查看本地安装的包</li><li>pip show –files package_name    #  查看包是否安装</li><li>pip list –outdated    # 查看本地需要升级的包</li><li>pip install –upgrade package_name    # 升级包</li><li>pip freeze &gt; packages.txt    # 将所有包信息输出重定向到.txt文件</li><li>pip install/uninstall -r packages.txt    # 批量安装或者卸载包<br>添加Anaconda的TUNA镜像</li><li>conda config –add channels <span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2FuYWNvbmRhL3BrZ3MvZnJlZS8=" title="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<i class="fa fa-external-link"></i></span>    # </li><li>conda config –set show_channel_urls yes     # 设置搜索时显示通道地址</li></ul><p>&emsp;&emsp;使用Python的pip安装包时，默认是Python提供的官网网址下载包，而服务器在国外，国内下载速度极慢，经常出现超时。故而我们可以使用国内一些pypi镜像，有两种方式，一种是临时指定pypi源，一种是永久修改pypi源。<br><strong>国内pypi源</strong></p><ul><li>阿里云 <span class="exturl" data-url="aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9weXBpL3NpbXBsZS8=" title="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/<i class="fa fa-external-link"></i></span> </li><li>清华大学 <span class="exturl" data-url="aHR0cHM6Ly9weXBpLnR1bmEudHNpbmdodWEuZWR1LmNuL3NpbXBsZS8=" title="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/<i class="fa fa-external-link"></i></span> </li><li>中国科技大学 <span class="exturl" data-url="aHR0cHM6Ly9weXBpLm1pcnJvcnMudXN0Yy5lZHUuY24vc2ltcGxlLw==" title="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/<i class="fa fa-external-link"></i></span> </li><li>豆瓣(douban) <span class="exturl" data-url="aHR0cDovL3B5cGkuZG91YmFuLmNvbS9zaW1wbGUv" title="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/<i class="fa fa-external-link"></i></span> </li><li>中国科学技术大学 <span class="exturl" data-url="aHR0cDovL3B5cGkubWlycm9ycy51c3RjLmVkdS5jbi9zaW1wbGUv" title="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/<i class="fa fa-external-link"></i></span></li></ul><p><strong>临时使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class="line"><span class="comment"># 永久设置全局pypi镜像源命令</span></span><br><span class="line">pip config set <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><strong>永久使用</strong><br>Windows系统<br>1 Win + R 打开【运行】窗口，输入%HOMEPATH%，自动跳转到用户目录<br>2 在打开的目录下新建一个目录，命名为pip<br>3 进入pip目录，新建配置文件，命名为pip.ini，注意Windows下配置文件后缀为.ini<br>4 打开配置文件pip.ini，输入pypi源，如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><p><strong>Linux系统</strong><br>1 在终端使用如下命令，新建pip配置文件<br>vi ~/.pip/pip.config<br>2 在配置文件中输入pypi源，内容同上配置文件</p><p>&emsp;&emsp;脚本语言的第一行内容：#!/usr/bin/python3，目的就是指出，你想要这个文件中的代码用什么可执行程序去运行解释它，就这么简单。这条语句是告诉操作系统执行这个脚本的时候，调用 /usr/bin 下的 python3 解释器去执行。</p><p>&emsp;&emsp;而对于#!/usr/bin/env python3 这种用法是为了防止操作系统用户没有将 python3 装在默认的 /usr/bin 路径里。当系统看到这一行的时候，首先会到 env 设置里查找 python3 的安装路径，再调用对应路径下的解释器程序完成操作。#!/usr/bin/python3 相当于写死了 python3 路径;而#!/usr/bin/env python3 会去环境设置寻找 python3 目录，推荐这种写法。</p><p>Python3 下载</p><ul><li>Python3 最新源码，二进制文档，新闻资讯等可以在 Python 的官网查看到：<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy8=" title="https://www.python.org/">Python 官网：<i class="fa fa-external-link"></i></span></li><li>你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb2Mv" title="https://www.python.org/doc/">Python文档下载地址：<i class="fa fa-external-link"></i></span></li></ul><p>Python 几个重要的环境变量：</p><table><thead><tr><th align="center">变量名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">PYTHONPATH</td><td align="center">PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找</td></tr><tr><td align="center">PYTHONSTARTUP</td><td align="center">Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码</td></tr><tr><td align="center">PYTHONCASEOK</td><td align="center">加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写</td></tr><tr><td align="center">PYTHONHOME</td><td align="center">模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，两个模块库容易切换</td></tr></tbody></table><p>Python 运行方式</p><ul><li>交互式：终端解释器、jupyter</li><li>脚本式：特别在Linux上，如shell一样</li><li>IDE式：使用集成开发环境IDE</li></ul><p>小提示<br>使用交互式 ipython 运行 Pythonipython 是一个 python 的交互式 shell，比默认的 python shell 好用得多，支持变量自动补全，自动缩进，支持 bash shell 命令，内置了许多很有用的功能和函数。此 ipython 中的 i 代表 “交互(interaction)”。<br><span class="exturl" data-url="aHR0cHM6Ly9pcHl0aG9uLm9yZy9pbnN0YWxsLmh0bWw=" title="https://ipython.org/install.html">ipython官方地址：<i class="fa fa-external-link"></i></span></p><p>编码声明</p><ul><li>在第二行：# -<em>- coding: utf-8 -</em>- 这是Emacs的编码声明，这样写可以被Emacs编辑器和Pyhton解释器都兼容。</li><li>对于使用Vim的程序员这样： vim: set fileencoding=<utf-8> </utf-8></li></ul><p>help() 函数可以打印输出一个函数的文档字符串<br>type() 函数是用于求一个未知数据类型对象，type 主要用于判断未知数据类型<br>dir() 函数可以找到模块内定义的所有名称。以一个字符串列表的形式返回:</p><p>&emsp;&emsp;Python 解释器可不止一种哦，有 CPython、IPython、Jython、PyPy 等。<br>顾名思义，CPython 就是用 C 语言开发的了，是官方标准实现，拥有良好的生态，所以应用也就最为广泛了。<br>而 IPython 是在 CPython 的基础之上在交互式方面得到增强的解释器(<span class="exturl" data-url="aHR0cDovL2lweXRob24ub3JnLynjgII=" title="http://ipython.org/)。">http://ipython.org/)。<i class="fa fa-external-link"></i></span><br>Jython 是专为 Java 平台设计的 Python 解释器(<span class="exturl" data-url="aHR0cDovL3d3dy5qeXRob24ub3JnLynvvIzlroPmioo=" title="http://www.jython.org/)，它把">http://www.jython.org/)，它把<i class="fa fa-external-link"></i></span> Python 代码编译成 Java 字节码执行。<br>PyPy 是 Python 语言（2.7.13和3.5.3）的一种快速、兼容的替代实现(<span class="exturl" data-url="aHR0cDovL3B5cHkub3JnLynvvIzku6XpgJ/luqblv6vokZfnp7DjgII=" title="http://pypy.org/)，以速度快著称。">http://pypy.org/)，以速度快著称。<i class="fa fa-external-link"></i></span></p><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br>记住：空行也是程序代码的一部分。</p><p>实例：Python 计算笛卡尔积<br>&emsp;&emsp;计算多个集合的笛卡尔积，有规律可循，算法和代码也不难，但是很多语言都没有提供直接计算笛卡尔积的方法，需要自己写大段大段的代码计算笛卡尔积，python 提供了一种最简单的计算笛卡称积的方法(只需要一行代码)，详见下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @file   : Cartesian.py</span></span><br><span class="line"><span class="comment"># @author : shlian</span></span><br><span class="line"><span class="comment"># @date   : 2018/5/29</span></span><br><span class="line"><span class="comment"># @version: 1.0</span></span><br><span class="line"><span class="comment"># @desc   : 用python实现求笛卡尔积</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cartesian</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._data_list=[]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_data</span><span class="params">(self,data=[])</span>:</span> <span class="comment">#添加生成笛卡尔积的数据列表</span></span><br><span class="line">        self._data_list.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self)</span>:</span> <span class="comment">#计算笛卡尔积</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> itertools.product(*self._data_list):</span><br><span class="line">            print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    car=cartesian()</span><br><span class="line">    car.add_data([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    car.add_data([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">    car.add_data([<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>])</span><br><span class="line">    car.build()</span><br></pre></td></tr></table></figure><h4 id="核心语法"><a href="#核心语法" class="headerlink" title="核心语法"></a>核心语法</h4><h5 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h5><ul><li>python中单引号和双引号使用完全相同。</li><li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li><li>转义符 ‘&#39;</li><li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n会显示，并不是换行。</li><li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</li><li>字符串可以用 + 运算符连接在一起，用 * 运算符重复，紧跟的数字为复制的次数</li><li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li><li>Python中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</li><li>索引值以 0 为开始值，-1 为从末尾的开始位置</li><li>截取字符串中的一部分，遵循左闭右开原则</li></ul><h5 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h5><ul><li>在 python 用 import 或者 from…import 来导入相应的模块。</li><li>将整个模块(somemodule)导入，格式为： import somemodule</li><li>从某个模块中导入某个函数,格式为： from somemodule import somefunction</li><li>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</li><li>将某个模块中的全部函数导入，格式为： from somemodule import *</li></ul><h5 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h5><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li><li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）</li><li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）</li></ul><h5 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h5><ul><li>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</li><li>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</li><li>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</li><li>列表截取的语法格式如下：变量[头下标:尾下标]</li><li>索引值以 0 为开始值，-1 为从末尾的开始位置。</li></ul><h5 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h5><ul><li>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。</li><li>元组中的元素类型也可以不相同：</li><li>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取</li><li>其实，可以把字符串看作一种特殊的元组。</li><li>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</li><li>一般来说，函数的返回值一般为一个。而函数返回多个值的时候，是以元组的方式返回的。</li></ul><h5 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h5><ul><li>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</li><li>基本功能是进行成员关系测试和删除重复元素。</li><li>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</li></ul><h5 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h5><ul><li>字典（dictionary）是Python中另一个非常有用的内置数据类型。</li><li>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</li><li>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</li><li>键(key)必须使用不可变类型。</li><li>在同一个字典中，键(key)必须是唯一的。</li></ul><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li>定义一个由自己想要功能的函数：</li><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul><p>语法<br>Python 定义函数使用 def 关键字，一般格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def 函数名（参数列表）:</span><br><span class="line">    函数体</span><br><span class="line">return</span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>python 使用 lambda 来创建匿名函数。<br>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</p><ul><li>lambda 只是一个表达式，函数体比 def 简单很多。</li><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</li><li>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li></ul><p>语法<br>lambda 函数的语法只包含一个语句，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><h5 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h5><p>为此Python提供了一个办法，把这些定义存放在文件中，为一些脚本或者交互式的解释器实例使用，这个文件被称为模块。<br>模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。模块可以被别的程序引入，以使用该模块中的函数等功能。</p><p><strong>name</strong>属性<br>一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用<strong>name</strong>属性来使该程序块仅在该模块自身运行时执行。<br>说明： 每个模块都有一个<strong>name</strong>属性，当其值是’<strong>main</strong>‘时，表明该模块自身在运行，否则是被引入。<br>说明：<strong>name</strong> 与 <strong>main</strong> 底下是双下划线<br>dir() 函数<br>内置的函数 dir() 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:</p><p>包</p><ul><li>包是一种管理 Python 模块命名空间的形式，采用”点模块名称”。</li><li>比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。</li><li>使用模块的时候，不用担心不同模块间的全局变量相互影响一样，用点模块名称这种形式不用担心不同库之间的模块重名的情况。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;笔记概述&quot;&gt;&lt;a href=&quot;#笔记概述&quot; class=&quot;headerlink&quot; title=&quot;笔记概述&quot;&gt;&lt;/a&gt;笔记概述&lt;/h4&gt;&lt;p&gt;pip常用命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python -m pip install –upgrade pip    # 升
      
    
    </summary>
    
      <category term="Python" scheme="https://2694048168.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://2694048168.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow环境安装</title>
    <link href="https://2694048168.github.io/TensorFlow%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://2694048168.github.io/TensorFlow环境安装/</id>
    <published>2019-08-29T06:19:47.000Z</published>
    <updated>2020-03-25T14:52:10.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Install-TensorFlow-with-pip"><a href="#Install-TensorFlow-with-pip" class="headerlink" title="Install TensorFlow with pip"></a>Install TensorFlow with pip</h3><p><strong>Install the tensorflow with python3 and the pip3 on Ubuntu</strong><br><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcvaW5zdGFsbC9waXA=" title="https://www.tensorflow.org/install/pip">the page of installation of tensorflow<i class="fa fa-external-link"></i></span></p><h3 id="TensorFlow-2-0-RC-is-available"><a href="#TensorFlow-2-0-RC-is-available" class="headerlink" title="TensorFlow 2.0 RC is available"></a>TensorFlow 2.0 RC is available</h3><ul><li>tensorflow==2.0.0-rc0 —Preview TF 2.0 RC build for CPU-only (unstable)</li><li>tensorflow-gpu==2.0.0-rc0 —Preview TF 2.0 RC build with GPU support (unstable, Ubuntu and Windows)</li></ul><h4 id="Available-packages"><a href="#Available-packages" class="headerlink" title="Available packages"></a>Available packages</h4><ul><li>tensorflow —Latest stable release for CPU-only</li><li>tensorflow-gpu —Latest stable release with GPU support (Ubuntu and Windows)</li><li>tf-nightly —Preview nightly build for CPU-only (unstable)</li><li>tf-nightly-gpu —Preview nightly build with GPU support (unstable, Ubuntu and Windows)</li></ul><h4 id="System-requirements"><a href="#System-requirements" class="headerlink" title="System requirements"></a>System requirements</h4><ul><li>pip 19.0 or later</li><li>Ubuntu 16.04 or later (64-bit)</li><li>macOS 10.12.6 (Sierra) or later (64-bit) (no GPU support)</li><li>Windows 7 or later (64-bit) (Python 3 only)</li><li>Raspbian 9.0 or later</li></ul><h4 id="Hardware-requirements"><a href="#Hardware-requirements" class="headerlink" title="Hardware requirements"></a>Hardware requirements</h4><ul><li>Starting with TensorFlow 1.6, binaries use AVX instructions which may not run on older CPUs.</li><li>Read the GPU support guide to set up a CUDA®-enabled GPU card on Ubuntu or Windows.</li></ul><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p><strong>The following are the necessary basic conditions.</strong></p><ul><li>Install the python3</li><li>Install the pip3</li><li>Install tensorflow or tensorflow-gpu</li><li>If install the tensorflow-gpu, then install the drive of NVIDIA and CUDA</li></ul><p><strong>The following options are for reference only.</strong></p><ul><li>Install the virtualenv</li><li>Install the Anaconda</li><li>Install the IDE-PyCharm for Python </li></ul><h4 id="Install-the-Python-TensorFlow-development-environment-on-your-system"><a href="#Install-the-Python-TensorFlow-development-environment-on-your-system" class="headerlink" title="Install the Python-TensorFlow development environment on your system"></a>Install the Python-TensorFlow development environment on your system</h4><p><strong>Detection system environment</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br><span class="line">pip3 --version</span><br><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><p><strong>Installation system environment</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3-dev python3-pip</span><br><span class="line">sudo pip3 install -U virtualenv  <span class="comment"># system-wide install</span></span><br></pre></td></tr></table></figure><p><strong>Create a new virtual environment by choosing a Python interpreter and making a ./venv directory to hold it:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --system-site-packages -p python3 ./venv</span><br></pre></td></tr></table></figure><p><strong>Activate the virtual environment using a shell-specific command:</strong></p><ul><li>source ./venv/bin/activate  # sh, bash, ksh, or zsh</li></ul><p><strong>When virtualenv is active, your shell prompt is prefixed with (venv).</strong><br><strong>Install packages within a virtual environment without affecting the host system setup. Start by upgrading pip:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip list  <span class="comment"># show packages installed within the virtual environment</span></span><br></pre></td></tr></table></figure><p><strong>And to exit virtualenv later:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate  <span class="comment"># don't exit until you're done using TensorFlow</span></span><br></pre></td></tr></table></figure><p><strong>Install the TensorFlow pip package</strong><br><strong>Choose one of the following TensorFlow packages to install from PyPI:</strong><br><span class="exturl" data-url="aHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L3RlbnNvcmZsb3cv" title="https://pypi.org/project/tensorflow/">the page of PyPI<i class="fa fa-external-link"></i></span></p><ul><li>tensorflow —Latest stable release for CPU-only (recommended for beginners)</li><li>tensorflow-gpu —Latest stable release with GPU support (Ubuntu and Windows)</li><li>tf-nightly —Preview nightly build for CPU-only (unstable)</li><li>tf-nightly-gpu —Preview nightly build with GPU support (unstable, Ubuntu and Windows)</li><li>tensorflow==2.0.0-rc0 —Preview TF 2.0 RC build for CPU-only (unstable)</li><li>tensorflow-gpu==2.0.0-rc0 —Preview TF 2.0 RC build with GPU support (unstable, Ubuntu and Windows)</li></ul><p><strong>Verify the install:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source ./venv/bin/activate</span><br><span class="line">python3</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">print(tf.__tf.version__)</span><br><span class="line">print(tf.__tf.path__)</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcvaW5zdGFsbC9ncHU=" title="https://www.tensorflow.org/install/gpu">the page of installation of tensorflow supported the GPU<i class="fa fa-external-link"></i></span></p><p>如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要python2.7，而应用B需要python3怎么办？这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。这样就能很好的解决在同一个系统中为每一个应用所依赖的对应的Python开发版本的问题。</p><p>Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用Miniconda这个较小的发行版（仅包含conda和 Python）。</p><p>PyCharm是一种Python IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，比如调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。此外，该IDE提供了一些高级功能，以用于支持Django框架下的专业Web开发。</p><p>NVIDIA公司（纳斯达克代码：NVDA）是全球可编程图形处理技术领袖。与ATI（后被AMD收购）齐名，专注于打造能够增强个人和专业计算平台的人机交互体验的产品。公司的图形和通信处理器拥有广泛的市场，已被多种多样的计算平台采用，包括个人数字媒体PC、商用PC、专业工作站、数字内容创建系统、笔记本电脑、军用导航系统和视频游戏控制台等。NVIDIA全球雇员数量超过4000人。全球各地众多OEM厂商、显卡制造商、系统制造商、消费类电子产品公司都选择NVIDIA的处理器作为其娱乐和商用解决方案的核心组件。在PC应用领域（例如制造、科研、电子商务、娱乐和教育等），NVIDIA公司获奖不断的图形处理器可以提供出色的性能和鲜锐的视觉效果。其媒体和通信处理器能够执行宽带连接和通信应用中要求十分苛刻的多媒体处理任务，并在音频应用能力方面取得突破。</p><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。 CUDA™是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。 它包含了CUDA指令集架构（ISA）以及GPU内部的并行计算引擎。 开发人员现在可以使用C语言来为CUDA™架构编写程序，C语言是应用最广泛的一种高级编程语言。所编写出的程序可以在支持CUDA™的处理器上以超高性能运行。CUDA3.0已经开始支持C++和FORTRAN。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Install-TensorFlow-with-pip&quot;&gt;&lt;a href=&quot;#Install-TensorFlow-with-pip&quot; class=&quot;headerlink&quot; title=&quot;Install TensorFlow with pip&quot;&gt;&lt;/a&gt;Insta
      
    
    </summary>
    
      <category term="Artificial Intelligence" scheme="https://2694048168.github.io/categories/Artificial-Intelligence/"/>
    
    
      <category term="TensorFlow" scheme="https://2694048168.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Chrome和搜狗输入法</title>
    <link href="https://2694048168.github.io/Ubuntu%E5%AE%89%E8%A3%85Chrome%E5%92%8C%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <id>https://2694048168.github.io/Ubuntu安装Chrome和搜狗输入法/</id>
    <published>2019-08-28T08:17:01.000Z</published>
    <updated>2020-02-19T08:14:08.904Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装谷歌浏览器"><a href="#安装谷歌浏览器" class="headerlink" title="安装谷歌浏览器"></a>安装谷歌浏览器</h4><p><strong>install google-chrome-stable</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加源</span><br><span class="line">sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加公钥</span><br><span class="line">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 更新源</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装google-chrome-stable</span><br><span class="line">sudo apt-get install google-chrome-stable </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 终端启动google-chrome或者搜索chrome即可</span><br><span class="line">google-chrome</span><br><span class="line"><span class="meta">#</span> 启动后将google-chrome锁定菜单栏即可</span><br></pre></td></tr></table></figure><p><img src="/images/google-chrome.png" alt="self"></p><h4 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h4><p><strong>install pinyin-sogou</strong><br>基本思路：</p><ul><li>添加fcitx的键盘输入法系统，因为sogou是基于fcitx的，而系统默认的是iBus</li><li>安装sogou输入法</li><li>设置系统参数及一些注意点<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加源</span><br><span class="line">sudo add-apt-repository ppa:fcitx-team/nightly</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 更新源</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装fcitx</span><br><span class="line">sudo apt-get install fcitx</span><br><span class="line">sudo apt-get install fcitx-config-gtk</span><br><span class="line">sudo apt-get install fcitx-table-all</span><br><span class="line">sudo apt-get install fcitx-im-switch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 对于出现错误，软件依赖有问题，使用一下命令</span><br><span class="line">sudo apt-get install -f</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 下载pinyin-sogou for Linux</span><br><span class="line"><span class="meta">#</span> 网址：https://pinyin.sogou.com/linux/</span><br><span class="line">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置参数</span><br><span class="line"><span class="meta">#</span> setting——language support——将ibus修改为fcitx</span><br><span class="line"><span class="meta">#</span> 搜索并配置fcitx-configuration，去掉当前选择框的勾，将sogou输入法设为默认即可</span><br><span class="line"><span class="meta">#</span> 重新启动shutdown -r now 或者 reboot即可</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/pinying-soguo.png" alt="self"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装谷歌浏览器&quot;&gt;&lt;a href=&quot;#安装谷歌浏览器&quot; class=&quot;headerlink&quot; title=&quot;安装谷歌浏览器&quot;&gt;&lt;/a&gt;安装谷歌浏览器&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;install google-chrome-stable&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://2694048168.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统磁盘分区和文件系统</title>
    <link href="https://2694048168.github.io/Linux%E7%B3%BB%E7%BB%9F%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://2694048168.github.io/Linux系统磁盘分区和文件系统/</id>
    <published>2019-08-27T15:42:56.000Z</published>
    <updated>2020-02-19T08:10:20.891Z</updated>
    
    <content type="html"><![CDATA[<h4 id="硬盘基础理论知识"><a href="#硬盘基础理论知识" class="headerlink" title="硬盘基础理论知识"></a>硬盘基础理论知识</h4><ul><li>硬盘的作用：存储数据文件，物理硬件设备</li><li>外部结构<br>  正面板：      固定面板，产地，容量，日期，转数，品牌，条形码，电压，透气孔，内六角螺丝等。<br>  反面板：绿色控制电路板，上面有芯片，电容，电阻，缓存等。<br>  buffer写入缓冲区，cache读取缓存区。<br>  侧面：电源接口，跳线，数据接口（ide sata sas scsi）。</li><li>内部结构<br>  磁盘片：2-14片，每个面都可以放数据。<br>  主轴组件：里面有轴承，马达电机。<br>  磁头组件：磁头，机械手臂，传动轴。<br>  前置控制电路，数据转换器，永久磁铁，步进电机（控制磁头径向运动）。<br>  核心组件：磁头及盘片。<br><img src="/images/%E7%A1%AC%E7%9B%98%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" alt="self"></li><li>传统硬盘<br>&emsp;&emsp;所有机械硬盘的原理相同。盘片被磁性材料覆盖，盘片上的磁性粒子被极化以表示一个二进制信息单元（或比特）。这种方式相对便宜，因此相对于其它存储技术而言，这是一种很受欢迎的存储大量数据的方式，软盘和磁带也是使用的这种方式。</li><li>固态硬盘<br>&emsp;&emsp;SSD盘并不像传统硬盘那样采用磁性材料来存储数据，而是采用基础单位被称为cell（存储单元）的NAND flash来存储数据。NAND Flash是一种非易失性随机访问存储介质。</li></ul><p>&emsp;&emsp;硬盘存储数据是根据电、磁转换原理实现的。硬盘由一个或几个表面镀有磁性物质的金属或玻璃等物质盘片以及盘片两面所安装的磁头和相应的控制电路组成，其中盘片和磁头密封在无尘的金属壳中。硬盘工作时，盘片以设计转速高速旋转，设置在盘片表面的磁头则在电路控制下径向移动到指定位置然后将数据存储或读取出来。磁盘读数据时,将磁盘上的磁粒子极性转换成脉冲信号，然后通过数据转换器转换成电脑可以识别的数据。</p><p>&emsp;&emsp;写数据：系统向硬盘写入数据时，磁头中“写数据”电流产生磁场使盘片表面磁性物质状态发生改变，并在写电流磁场消失后仍能保持，这样数据就存储下来了；读数据：系统从硬盘中读数据时，磁头经过盘片指定区域，盘片表面磁场使磁头产生感应电流或线圈阻抗产生变化，经相关电路处理后还原成数据。</p><p><strong>上电启动过程：</strong><br>&emsp;&emsp;计算机在按下power键以后，开始执行主板bios程序。进行完一系列检测和配置以后。开始按bios中设定的系统引导顺序引导系统。假定现在是硬盘。Bios执行完自己的程序后如何把执行权交给硬盘呢？交给硬盘后又执行存储在哪里的程序呢？<br>MBR位于整个硬盘的 0 柱面 0磁头 1 扇区(可以看作是硬盘的第一个扇区)，bios在执行自己固有的程序以后就会jump到mbr中的第一条指令。将系统的控制权交由mbr来执行。</p><p><strong>磁盘的读写过程：</strong><br>&emsp;&emsp;系统将文件存储到磁盘上时，按柱面、磁头、扇区的方式进行，即最先是第1磁道的第一磁头下（也就是第1盘面的第一磁道）的所有扇区，然后，是同一柱面的下一磁头，……，一个柱面存储满后就推进到下一个柱面，直到把文件内容全部写入磁盘。简单来说磁盘读写数据时，按照柱面来读写数据的，可能会先读一个盘面的某一磁道的数据，读完之后，再向下读取相投磁道不同盘面的数据，直到所有盘面相同磁道的数据被读取完毕，切换到下一个柱面，这个切换的过程叫寻道，寻道要靠不仅电机控制，让磁头做移动，这是机械运动，因此很慢。</p><h4 id="硬盘分类和分区"><a href="#硬盘分类和分区" class="headerlink" title="硬盘分类和分区"></a>硬盘分类和分区</h4><p>&emsp;&emsp;对于安装操作系统来说，无论是安装微软的Windows操作系统还是开源的Linux操作系统，硬盘分区都是整个操作系统安装过程中最为棘手的，同时也是最为重要的环节之一，当然现在安装操作系统都是有自动分区功能的，这是一种便捷方式吧。不过对于初学者，特别是学习Linux操作系统的人来说，这不是一个好消息。接下来，跟着我一起来学习一下安装Linux操作系统时手动硬盘分区的方法。</p><p>&emsp;&emsp;在进行对硬盘分区之前，我们先来要了解一下硬盘的相关分类，硬盘一般分为IDE硬盘、SCSI硬盘和SATA硬盘三种，在Linux操作系统中，IDE接口的硬盘被称为hd，SCSI和SATA接口的硬盘则被称为sd，其中IDE硬盘基本上已经淘汰，现在市面上最常见的就是SATA接口的硬盘，第1块硬盘称为sda，第2块硬盘称为sdb，依此类推。<br>&emsp;&emsp;同时对于一块硬盘来说，最多有4个主分区，主分区以外的分区称为扩展分区（逻辑分区），硬盘可以没有扩展分区，但是一定要有主分区，在主分区中要有一个激活分区用来启动Windows系统，在扩展分区中可以建立若干个逻辑分区，因此，最合理的分区方式应该最多分三个主分区，一个扩展分区，这样可以有效地利用有限的主分区，然后在扩展分区中建立逻辑分区，这便是Windows操作系统最常用的硬盘分区，一般都是C、D、E、F四个驱动器。对于Windows的用户来说，有几个分区就有几个驱动器，并且每个分区都会获得一个字母标识符，然后就可以选用这个字母来指定在这个分区上的文件和目录，它们的文件结构都是独立的，非常好理解。</p><p>&emsp;&emsp;在Linux操作系统中每一个硬盘总共最多有 16个分区，硬盘上的4个主分区，分别标识为sdal、sda2、sda3和sda4，逻辑分区则从sda5开始标识一直到sda16。<br>&emsp;&emsp;但对初上手Ubuntu的用户，可就有点恼人了。因为对Ubuntu用户来说无论有几个分区，分给哪一个目录使用，它归根到底就只有一个根目录，一个独立且唯一的文件结构。Ubuntu中每个分区都是用来组成整个文件系统的一部分，因为它采用了一种叫“载入”的处理方式，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这是要载入的一个分区将使它的存储空间在一个目录下获得。下面来看看Ubuntu的驱动器是如何标识的。如下图所示：<br>&emsp;&emsp;简单来说，sd:表示的是SCSI硬盘，是硬盘中的其中一种，性能要好于IDE硬盘，a:表示你机器上的第一块硬盘，如果还有其他的硬盘，会显示b，一次类推。1、2、5表示：第一个分区，第二个分区，第五个分区。注意：扩展分区是从5开始的所以sda5就是扩展分区，sda1、sda2是主分区。</p><p>&emsp;&emsp;对于IDE硬盘，驱动器标识符为“hd[a-d][1-16]其中“hd”表明分区所在设备的类型，这里是指IDE硬盘。[a-d]为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘），[1-4]代表分区，前四个分区用数字1到4表示，他们是主分区或扩展分区，从5开始就是逻辑分区。例如：hda3表示第一个IDE硬盘上的第三个主分区或扩展分区，hdb2表示为第二个IDE硬盘上的第三个主分区或扩展分区。对于SCSI硬盘则标识为“sd[a-p][1-16],SCSI硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样。</p><!--table--><table><thead><tr><th align="center">硬件</th><th align="center">设备文件名</th></tr></thead><tbody><tr><td align="center">IDE硬盘</td><td align="center">/dev/ha/[a-d]</td></tr><tr><td align="center">SCSI/SATA/USB硬盘</td><td align="center">/dev/sd/[a-p]</td></tr><tr><td align="center">光驱</td><td align="center">/dev/cdrom或者/dev/sr0</td></tr><tr><td align="center">软盘</td><td align="center">/dev/fd[0-1]</td></tr><tr><td align="center">打印机(25针)</td><td align="center">/dev/lp[0-2]</td></tr><tr><td align="center">打印机(USB)</td><td align="center">/dev/usb/lp[0-15]</td></tr><tr><td align="center">鼠标</td><td align="center">/dev/mouse</td></tr></tbody></table><h4 id="Linux硬盘分区"><a href="#Linux硬盘分区" class="headerlink" title="Linux硬盘分区"></a>Linux硬盘分区</h4><p>&emsp;&emsp;Ubuntu Linux可以把分区作为挂载点，载入目录，其中最常用的硬盘大小（500G-1000G）分配目录推荐如下表所示：</p><!--table--><table><thead><tr><th align="center">目录</th><th align="center">建议大小</th><th align="center">格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">/</td><td align="center">150G-200G</td><td align="center">ext4</td><td align="center">根目录</td></tr><tr><td align="center">swap</td><td align="center">物理内存两倍</td><td align="center">swap</td><td align="center">交换空间</td></tr><tr><td align="center">/boot</td><td align="center">1G左右</td><td align="center">ext4</td><td align="center">空间起始位置</td></tr><tr><td align="center">/tmp</td><td align="center">5G左右</td><td align="center">ext4</td><td align="center">系统的临时文件</td></tr><tr><td align="center">/home</td><td align="center">剩余全部</td><td align="center">ext4</td><td align="center">用户工作目录</td></tr></tbody></table><p><strong>备注说明：</strong></p><ul><li>swap：交换空间，交换分区相当于Windows中的“虚拟内存”，如果内存低的话（1-4G），物理内存的两倍，高点的话（8-16G）要么等于物理内存，要么物理内存+2g左右。</li><li>/boot：建议应该大于400MB或1GB，Linux的内核及引导系统程序所需要的文件，比如 vmlinuz initrd.img文件都位于这个目录中。在一般情况下，GRUB或LILO系统引导管理器也位于这个目录；启动撞在文件存放位置，如kernels，initrd，grub。</li><li>/tmp：系统的临时文件，一般系统重启不会被保存，故而对于服务器来说这个分区是不需要的，只是在个人桌面版使用时才分配。</li><li>/home：用户工作目录；个人配置文件，如个人环境变量等；所有账号分配一个工作目录。由于Linux权限的问题，一般普通用户都是在/home/有一个自己的文件目录，所有的工作都在这个文件目录下。</li></ul><p>&emsp;&emsp;对于一般的Linux操作系统在进行硬盘分区时，只需要将一块硬盘的空间起始位置划分出/boot分区进行Linux系统的启动引导，容量根据具体的Linux发行版而定，一般都在200-300MB左右；然后在继续划分出swap交换分区，进行虚拟内存的分配，容量一般是物理内存的两倍；最后将硬盘所剩的容量全部作为根分区/即可。<br>&emsp;&emsp;Linux必须的分区：/根分区；swap分区：虚拟内存，大小应该为内存两倍，但是大于2G之后容量再增长不会给系统带来任何帮助，速度与硬盘速度一样；boot分区：系统启动分区，200M，任何操作系统要启动都需要一定的空余空间，若没有boot分区，所有数据都会放在根分区下，若根分区用完，则Linux无法正常启动。</p><h4 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h4><p><img src="/images/linuxFileContent.png" alt="self"></p><!--table--><table><thead><tr><th align="center">目录名</th><th align="center">目录结构</th></tr></thead><tbody><tr><td align="center">/bin/</td><td align="center">存放系统命令的目录，普通用户和超级用户都可以执行，放在/bin下命令在但用户模式下也可以执行</td></tr><tr><td align="center">/sbin/</td><td align="center">保存和系统环境设置相关的命令，只有超级用户可以使用这些命令进行系统环境设置，但是有些命令可以允许普通用户查看</td></tr><tr><td align="center">/usr/bin/</td><td align="center">存放系统命令的目录，普通用户和超级用户都可以执行，这些命令和系统启动无关，在单用户模式下不能执行</td></tr><tr><td align="center">/usr/sbin/</td><td align="center">存放根文件系统不必要的系统管理命令，例如多数服务程序。只有超级用户客户使用（注：在 Linux系统中，在所以sbin目录中保存的命令只有超级用户可以使用，bin目录中保存的命令所有用户都可以使用）</td></tr><tr><td align="center">/boot/</td><td align="center">系统启动目录，保存系统启动相关的文件，如内核文件和启动引导程序文件等</td></tr><tr><td align="center">/dev/</td><td align="center">设备文件保存位置，在Linux中，所有内容都以文件形式保存，包括硬件，这个目录就是用来保存所有硬件设备文件的</td></tr><tr><td align="center">/etc/</td><td align="center">配置文件保存位置，系统内所有采用默认安装方式（RPM安装）的服务的配置文件全部都保存在这个目录当中，如用户账户和密码，服务的启动脚本，常用服务的配置文件等</td></tr><tr><td align="center">/home/</td><td align="center">普通用户的家目录，建立每个用户时，每个用户要有一个默认的登录位置，这个位置就是这个用户的家目录，所有普通用户的家目录就是在/home下建立一个和用户名相同的目录，如用户liwei的家目录就是/home/liwei</td></tr><tr><td align="center">/lib/</td><td align="center">系统调用的函数库保存位置</td></tr><tr><td align="center">/lost+found/</td><td align="center">当系统以外崩溃或机器意外关机，而产生的一些文件碎片放在这里，当系统启动的过程中fsck工具会检查这里，并修复已经损坏的文件系统，这个目录只在每个分区中出现，例如/lost+found/就是根分区的备份恢复目录，/boot/lost+found就是/boot/分区的备份恢复目录</td></tr><tr><td align="center">/media/</td><td align="center">挂载目录，系统建议是用来挂载媒体设备的，例如软盘和光盘</td></tr><tr><td align="center">/mnt/</td><td align="center">挂载目录，建议挂载额外设备，如U盘，移动硬盘和其他操作系统的分区</td></tr><tr><td align="center">/misc/</td><td align="center">挂载目录，系统建议是用来挂载NFS服务的共享目录（注：系统虽然准备了三个默认的挂载目录，但是只要是一个已经建立好的空目录就可以作为挂载点）</td></tr><tr><td align="center">/opt/</td><td align="center">第三方安装的软件保存的位置，这个目录就是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中，但现在大家更习惯把软件放置到/usr/local/目录当中，也就是说/usr/local/目录也可以用来安装软件</td></tr><tr><td align="center">/proc/</td><td align="center">虚拟文件系统，该目录中的数据并不保存在硬盘中，而是保存在内存中，主要保存系统的内核，进程，外部设备状态和网络状态灯</td></tr><tr><td align="center">/sys/</td><td align="center">虚拟文件系统，和/proc目录相似，都是保存在内存当中的，主要是保存内核相关信息</td></tr><tr><td align="center">/root/</td><td align="center">超级用户的家目录，普通用户家目录在/home/下，超级用户的家目录直接在根目录/下</td></tr><tr><td align="center">/srv/</td><td align="center">服务数据目录，一些系统服务启动之后，可以在这个目录中保存所需要的数据</td></tr><tr><td align="center">/tmp/</td><td align="center">临时目录，系统存放临时文件的目录，该目录下所有用户都可以访问和写入，建议每次开机都把该目录清空</td></tr><tr><td align="center">/usr/</td><td align="center">系统软件资源目录，usr不是user的缩写，而是unix software resource的缩写，所以不是存放用户数据，而是存放系统软件资源的目录，系统中安装的软件大多数保存在这个目录下</td></tr><tr><td align="center">/var/</td><td align="center">动态数据保存位置，主要保存缓存，日志以及软件运行所产生的文件</td></tr></tbody></table><p><strong>备注说明：</strong></p><ul><li>bin是binary的缩写,代表着二进制,放在里面的都是可执行的二进制文件，在Linux中就是命令</li><li>sbin前面的s代表super(超级)的意思</li><li>bin下的命令所有用户都可以使用,且可以在单用户模式使用</li><li>sbin下的命令只有超级用户可以使用</li><li>usr/bin不能在单用户模式下使用，单用户模式与Windows下的安全模式差不多,一般用于修复作用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;硬盘基础理论知识&quot;&gt;&lt;a href=&quot;#硬盘基础理论知识&quot; class=&quot;headerlink&quot; title=&quot;硬盘基础理论知识&quot;&gt;&lt;/a&gt;硬盘基础理论知识&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;硬盘的作用：存储数据文件，物理硬件设备&lt;/li&gt;
&lt;li&gt;外部结构&lt;br&gt;  正
      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://2694048168.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu-Linux安装</title>
    <link href="https://2694048168.github.io/Ubuntu-Linux%E5%AE%89%E8%A3%85/"/>
    <id>https://2694048168.github.io/Ubuntu-Linux安装/</id>
    <published>2019-08-26T08:40:44.000Z</published>
    <updated>2020-03-26T14:35:40.666Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h4><ul><li><p>Ubuntu镜像<br>&emsp;&emsp;强烈推荐国内清华大学的镜像网站下载Ubuntu的镜像，下载速度最快，本人在十分钟之内就下载好了Ubuntu14.04.6的镜像，然后因为网络原因以及一些软件的镜像问题，不建议使用Ubuntu官网下载镜像，本人也在Ubuntu官网下载过镜像，速度肯定没有国内的镜像快，有时候需要2个小时左右才能下载成功。<br><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLyM=" title="https://mirrors.tuna.tsinghua.edu.cn/#">清华大学镜像下载点击这里<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3JlbGVhc2VzLnVidW50dS5jb20vP19nYT0yLjIxMTc1MjUzMC42MzE2NzY3ODUuMTU2NjgwNjg4MC0xMDY0ODc1MTk2LjE1NjY4MDY4ODA=" title="http://releases.ubuntu.com/?_ga=2.211752530.631676785.1566806880-1064875196.1566806880">Ubuntu官网镜像下载点击这里<i class="fa fa-external-link"></i></span></p></li><li><p>虚拟机<br>&emsp;&emsp;本人为了学习之便，是在Windows系统下安装了一个虚拟软件VWware Workstation14版本，然后新建了一个Ubuntu64位的虚拟机，选择稍后安装操作系统，将下载好的Ubuntu镜像挂载到这个虚拟机上，然后开机安装Ubuntu。</p></li></ul><h4 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h4><p>&emsp;&emsp;点击开机之后，等待一会，就会显示欢迎界面，选择自己安装的语言支持并开始安装Ubuntu。建议选择语言为英文。<br><img src="/images/welcome.png" alt="self"><br>&emsp;&emsp;然后进入一下的准备界面，检测硬件配置成功，选择在安装过程中不更新和不下载第三方软件，这样在安装过程中后节约我们的时间，然后点击继续按键。如果有需要什么软件或者更新，在安装系统完成之后在自行安装。<br><img src="/images/preparing.png" alt="self"><br>&emsp;&emsp;点击继续按钮之后，进入磁盘管理界面，选择格式化磁盘，然后点击现在安装。之后会提醒是否格式化磁盘，点击继续确认。然后会进行用户和密码的设置界面，输入登录的用户名和密码，这要自己记住，用于登录Ubuntu系统。<br><img src="/images/installation.png" alt="self"><br><img src="/images/write.png" alt="self"><br>&emsp;&emsp;接下来将会进入时区选择和键盘选择界面，保持默认即可，一步步点击继续。如果出现虚拟机界面显示不全，鼠标点击不到继续按钮，可以使用组合Alt键和鼠标左键，对界面进行移动。<br><img src="/images/time.png" alt="self"><br><img src="/images/keyboard.png" alt="self"><br>&emsp;&emsp;接下来进入安装Ubuntu系统界面，这个安装的过程需要时间等待。安装完成之后，会提醒重启Ubuntu系统，将挂载的镜像文件取消连接，然后按下回车键，等待一会进入登录界面，然后在输入用户和密码进行登录即可。<br><img src="/images/ubuntu.png" alt="self"><br><img src="/images/restart.png" alt="self"><br><img src="/images/guizai.png" alt="self"><br><img src="/images/login.png" alt="self"></p><h4 id="配置Ubuntu"><a href="#配置Ubuntu" class="headerlink" title="配置Ubuntu"></a>配置Ubuntu</h4><p>&emsp;&emsp;对于第一次使用Linux操作系统的人而言，强烈建议使用bash终端进行一些配置，因为这不仅从Windows转变为Linux的习惯的需要，而且这在刚开始的时候，强迫自己使用终端命令，久而久之，熟能生巧，这样能很快的熟悉Linux的文件系统和常用命令。可以使用组合键Ctrl+Alt+T快速的打开一个终端shell。<br>&emsp;&emsp;最开始的练习，可以做一些基础的命令，比如查看系统的硬件信息和查找软件并查看软件信息命令，修改主机名、主机域名和IP地址映射、网卡信息命令，配置ssh远程登录和防火墙的信息命令。<br>&emsp;&emsp;设置Linux Ubuntu的超级管理员root的密码。在终端输入以下命令，然后先输入登录用户的密码，然后再设置root的密码，再验证root密码，每一次输密码都是不会显示的（不回显）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;VMWare Tools安装——实现主机和虚拟机之间的复制粘贴。首先在菜单中点击虚拟机（该虚拟机必须是开启的），然后点击安装（或者重新安装） VMWare Tools。然后在打开的页面下把VMware Tool拷贝到桌面（任何路径的文件夹下都可以，自己要知道在哪里并找得到）。然后打开终端，进入刚才放入VMware Tool的文件路径，进行解压，输入命令（tar -zxvf VMwareTools压缩包），桌面将出现一个名为 vmware-tools-distrib的文件夹，进入到该目录vmware-tools-distrib，最后执行安装命令sudo ./vmware-install.pl，遇到有询问的地方，直接输入yes，然后其余地方全部回车即可，安装完成之后，重启主机，这样主机和虚拟机之间就可以直接复制粘贴了。<br><img src="/images/vmwaretools.png" alt="self"><br><strong>修改静态IP，找到文件并作如下修改</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/network/interfaces</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改如下部分：</span><br><span class="line">auto eth0                    # 网卡名</span><br><span class="line">iface eth0 inet static       # 静态IP</span><br><span class="line">address 192.168.92.110       # IPv4地址</span><br><span class="line">gateway 192.168.92.1         # 网段网关</span><br><span class="line">netmask 255.255.255.0        # 子网掩码</span><br><span class="line">dns-nameserver 119.29.29.29  # 自动添加公网DNS解析</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改dns解析，因为以前是dhcp解析，所以会自动分配dns服务器地址。而一旦设置为静态ip后就没有自动获取到的dns服务器了，要自己设置一个，如果网卡信息里面添加了DNS解析，这里就不需要了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改文件</span><br><span class="line">sudo vim /etc/resolv.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 写上一个公网的DNS</span><br><span class="line">nameserver 8.8.8.8             # Google的DNS服务器，解析速度慢</span><br><span class="line">nameserver 114.114.114.114     # 114DNS </span><br><span class="line">nameserver 114.114.114.115     # 114DNS  </span><br><span class="line">nameserver 223.5.5.5           # 阿里DNS</span><br><span class="line">nameserver 223.6.6.6           # 阿里DNS  </span><br><span class="line">nameserver 180.76.76.76        # 百度DNS  </span><br><span class="line">nameserver 208.67.220.220      # OpenDNS  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 避免重启DNS还原（不进行此步开机后DNS会还原）</span><br><span class="line">sudo nano /etc/resolvconf/resolv.conf.d/base</span><br><span class="line"><span class="meta">#</span> 添加DNS:</span><br><span class="line">nameserver 8.8.8.8          </span><br><span class="line">nameserver 114.114.114.114  </span><br><span class="line">nameserver 114.114.114.115  </span><br><span class="line">nameserver 223.5.5.5        </span><br><span class="line">nameserver 223.6.6.6        </span><br><span class="line">nameserver 180.76.76.76     </span><br><span class="line">nameserver 208.67.220.220   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 开启防火墙</span><br><span class="line">ufw enable</span><br><span class="line"><span class="meta">#</span> 关闭防火墙</span><br><span class="line">ufw disable</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;更换软件源，一般来说，Ubuntu的官网软件源对于国内来说访问，过于缓慢，强烈建议使用国内的软件源，比如阿里的、网易的，或者清华大学的。<br><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvdWJ1bnR1Lw==" title="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华大学软件镜像源帮助点击这里<i class="fa fa-external-link"></i></span><br><strong>首先备份软件源文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看系统的版本号或者系统代号，便于配置相适应的镜像源</span><br><span class="line"><span class="meta">#</span> Ubuntu 12.04 (LTS)代号为precise</span><br><span class="line"><span class="meta">#</span> Ubuntu 14.04 (LTS)代号为trusty</span><br><span class="line"><span class="meta">#</span> Ubuntu 16.04 (LTS)代号为xenial</span><br><span class="line"><span class="meta">#</span> Ubuntu 18.04 (LTS)代号为bionic</span><br><span class="line">lsb_release -c</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 清华大学的Ubuntu14.04软件镜像源</span><br><span class="line"><span class="meta">#</span> 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 预发布软件源，不建议启用</span><br><span class="line"><span class="meta">#</span> deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新软件镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 编译c/c++所需要的软件包也都会被安装。在Ubuntu中编译c/c++程序,只需要安装该软件包。</span><br><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><p><img src="/images/terminshell.png" alt="self"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装准备&quot;&gt;&lt;a href=&quot;#安装准备&quot; class=&quot;headerlink&quot; title=&quot;安装准备&quot;&gt;&lt;/a&gt;安装准备&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ubuntu镜像&lt;br&gt;&amp;emsp;&amp;emsp;强烈推荐国内清华大学的镜像网站下载Ubuntu的镜像，下载
      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="https://2694048168.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow简介</title>
    <link href="https://2694048168.github.io/TensorFlow%E7%AE%80%E4%BB%8B/"/>
    <id>https://2694048168.github.io/TensorFlow简介/</id>
    <published>2019-08-26T07:13:36.000Z</published>
    <updated>2020-03-25T14:52:41.933Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AI神器"><a href="#AI神器" class="headerlink" title="AI神器"></a>AI神器</h4><p>&emsp;&emsp;<strong>TensorFlow是一个由Google开源的适用于人工智能（Artificial Intelligence, AI）和机器学习（Machine Learning, ML）的数据流图计算神器。</strong><br><strong>Introduction to TensorFlow</strong><br>&emsp;&emsp;TensorFlow makes it easy for beginners and experts to create machine learning models for desktop, mobile, web, and cloud.<br><strong>TensorFlow ecosystem</strong><br>&emsp;&emsp;TensorFlow provides a collection of workflows to develop and train models using Python, JavaScript, or Swift, and to easily deploy in the cloud, on-prem, in the browser, or on-device no matter what language you use.</p><p><span class="exturl" data-url="aHR0cDovL3d3dy50ZW5zb3JmbHkuY24v" title="http://www.tensorfly.cn/">TensorFlow中文社区点击这里<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcv" title="https://www.tensorflow.org/">TensorFlow官方网站点击这里<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3c=" title="https://github.com/tensorflow">TensorFlowGitHub网站点击这里<i class="fa fa-external-link"></i></span></p><h4 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h4><p>&emsp;&emsp;TensorFlow™ 是一个采用数据流图（data flow graphs），常用于数值计算的开源软件库，在人工智能领域的计算方面应用的比较多。节点（Nodes）在图中表示数学操作，图中的线（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以在多种平台上展开计算，具有跨平台的性质。例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。<br>&emsp;&emsp;TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域，这一点也是TensorFlow的一个优点。</p><h4 id="Data-Flow-Graph"><a href="#Data-Flow-Graph" class="headerlink" title="Data Flow Graph"></a>Data Flow Graph</h4><p>那么你肯定有疑问，到底什么是数据流图（Data Flow Graph）呢?<br>&emsp;&emsp;数据流图用“结点”（nodes）和“线”(edges)的有向图来描述数学计算。“节点” 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点/输出（push out）的终点，或者是读取/写入持久变量（persistent variable）的终点。“线”表示“节点”之间的输入/输出关系。这些数据“线”可以输运“size可动态调整”的多维数据数组，即“张量”（tensor）。张量从图中流过的直观图像是这个工具取名为“Tensorflow”的原因。一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。<br><img src="/images/tensors_flowing.gif" alt="self"></p><h4 id="TensorFlow的特征"><a href="#TensorFlow的特征" class="headerlink" title="TensorFlow的特征"></a>TensorFlow的特征</h4><h5 id="高度的灵活性"><a href="#高度的灵活性" class="headerlink" title="高度的灵活性"></a>高度的灵活性</h5><p>&emsp;&emsp;TensorFlow 不是一个严格的“神经网络”库。只要你可以将你的计算表示为一个数据流图，你就可以使用Tensorflow。你来构建图，描写驱动计算的内部循环。我们提供了有用的工具来帮助你组装“子图”（常用于神经网络），当然用户也可以自己在Tensorflow基础上写自己的“上层库”。定义顺手好用的新复合操作和写一个python函数一样容易，而且也不用担心性能损耗。当然万一你发现找不到想要的底层数据操作，你也可以自己写一点c++代码来丰富底层的操作。</p><h5 id="真正的可移植性（Portability）"><a href="#真正的可移植性（Portability）" class="headerlink" title="真正的可移植性（Portability）"></a>真正的可移植性（Portability）</h5><p>&emsp;&emsp;Tensorflow 在CPU和GPU上运行，比如说可以运行在台式机、服务器、手机移动设备等等。想要在没有特殊硬件的前提下，在你的笔记本上跑一下机器学习的新想法？Tensorflow可以办到这点。准备将你的训练模型在多个CPU上规模化运算，又不想修改代码？Tensorflow可以办到这点。想要将你的训练好的模型作为产品的一部分用到手机app里？Tensorflow可以办到这点。你改变主意了，想要将你的模型作为云端服务运行在自己的服务器上，或者运行在Docker容器里？Tensorfow也能办到。Tensorflow就是这么拽 :)</p><h5 id="将科研和产品联系在一起"><a href="#将科研和产品联系在一起" class="headerlink" title="将科研和产品联系在一起"></a>将科研和产品联系在一起</h5><p>&emsp;&emsp;过去如果要将科研中的机器学习想法用到产品中，需要大量的代码重写工作。那样的日子一去不复返了！在Google，科学家用Tensorflow尝试新的算法，产品团队则用Tensorflow来训练和使用计算模型，并直接提供给在线用户。使用Tensorflow可以让应用型研究者将想法迅速运用到产品中，也可以让学术性研究者更直接地彼此分享代码，从而提高科研产出率。</p><h5 id="自动求微分"><a href="#自动求微分" class="headerlink" title="自动求微分"></a>自动求微分</h5><p>&emsp;&emsp;基于梯度的机器学习算法会受益于Tensorflow自动求微分的能力。作为Tensorflow用户，你只需要定义预测模型的结构，将这个结构和目标函数（objective function）结合在一起，并添加数据，Tensorflow将自动为你计算相关的微分导数。计算某个变量相对于其他变量的导数仅仅是通过扩展你的图来完成的，所以你能一直清楚看到究竟在发生什么。</p><h5 id="多语言支持"><a href="#多语言支持" class="headerlink" title="多语言支持"></a>多语言支持</h5><p>&emsp;&emsp;Tensorflow 有一个合理的c++使用界面，也有一个易用的python使用界面来构建和执行你的graphs。你可以直接写python/c++程序，也可以用交互式的ipython界面来用Tensorflow尝试些想法，它可以帮你将笔记、代码、可视化等有条理地归置好。当然这仅仅是个起点——我们希望能鼓励你创造自己最喜欢的语言界面，比如Go，Java，Lua，Javascript，或者是R。</p><h5 id="性能最优化"><a href="#性能最优化" class="headerlink" title="性能最优化"></a>性能最优化</h5><p>&emsp;&emsp;比如说你又一个32个CPU内核、4个GPU显卡的工作站，想要将你工作站的计算潜能全发挥出来？由于Tensorflow 给予了线程、队列、异步操作等以最佳的支持，Tensorflow 让你可以将你手边硬件的计算潜能全部发挥出来。你可以自由地将Tensorflow图中的计算元素分配到不同设备上，Tensorflow可以帮你管理好这些不同副本。</p><h4 id="TensorFlow说明"><a href="#TensorFlow说明" class="headerlink" title="TensorFlow说明"></a>TensorFlow说明</h4><p><strong>谁可以用 TensorFlow?</strong><br>&emsp;&emsp;任何人都可以用Tensorflow。学生、研究员、爱好者、极客、工程师、开发者、发明家、创业者等等都可以在Apache 2.0 开源协议下使用Tensorflow。<br>&emsp;&emsp;Tensorflow 还没竣工，它需要被进一步扩展和上层建构。我们刚发布了源代码的最初版本，并且将持续完善它。我们希望大家通过直接向源代码贡献，或者提供反馈，来建立一个活跃的开源社区，以推动这个代码库的未来发展。<br><strong>为啥Google要开源这个神器?</strong><br>&emsp;&emsp;如果Tensorflow这么好，为啥不藏起来而是要开源呢？答案或许比你想象的简单：我们认为机器学习是未来新产品和新技术的一个关键部分。在这一个领域的研究是全球性的，并且发展很快，却缺少一个标准化的工具。通过分享这个我们认为是世界上最好的机器学习工具库之一的东东，我们希望能够创造一个开放的标准，来促进交流研究想法和将机器学习算法产品化。Google的工程师们确实在用它来提供用户直接在用的产品和服务，而Google的研究团队也将在他们的许多科研文章中分享他们对Tensorflow的使用。</p><p>[注]本篇博客来自于TensorFolw中文社区。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;AI神器&quot;&gt;&lt;a href=&quot;#AI神器&quot; class=&quot;headerlink&quot; title=&quot;AI神器&quot;&gt;&lt;/a&gt;AI神器&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;TensorFlow是一个由Google开源的适用于人工智能（Artificial 
      
    
    </summary>
    
      <category term="Artificial Intelligence" scheme="https://2694048168.github.io/categories/Artificial-Intelligence/"/>
    
    
      <category term="TensorFlow" scheme="https://2694048168.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop的高可用HA部署</title>
    <link href="https://2694048168.github.io/Hadoop%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8HA%E9%83%A8%E7%BD%B2/"/>
    <id>https://2694048168.github.io/Hadoop的高可用HA部署/</id>
    <published>2019-08-18T14:20:24.000Z</published>
    <updated>2020-02-19T08:06:12.723Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>&emsp;&emsp;有基础的读者，可以直接跳到第三章：环境搭建。前面两章都是一些相关的理论基础和准备工作。而对于完全是第一次搭建Hadoop高可用HA集群的读者，强烈建议花几分钟看一看这些理论基础和准备工作，便于后面更好地理解和搭建集群环境。</p><h4 id="理论分析"><a href="#理论分析" class="headerlink" title="理论分析"></a>理论分析</h4><p>&emsp;&emsp;本章将从进程间的通信机制RPC，Hadoop基础理论和ZooKeeper基础理论来阐述，首先对此有一定的理论理解基础，便于后面的环境快速搭建。<br>&emsp;&emsp;关于RPC、Hadoop和ZooKeeper的基础理论和角色说明，都只是简单的阐述一些基础理论和几个常见的角色，而不是只有这些角色，想要更加深入了解每一个模块的机制，了解每一个模块的工作机制和其对应的角色功能，可以查看Apache关于Hadoop的官方文档说明。</p><h5 id="RPC通信机制"><a href="#RPC通信机制" class="headerlink" title="RPC通信机制"></a>RPC通信机制</h5><p>&emsp;&emsp;Hadoop内部的所有通信机制都是采用RPC通信，每一个进程都有对应的RPC通信端口，与TCP和UDP的通信端口不同。注意区分RPC内部通信端口和HTTP通信端口。<br>&emsp;&emsp;RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。<br>&emsp;&emsp;RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。<br>&emsp;&emsp;有多种 RPC模式和执行。最初由 Sun 公司提出。IETF ONC 宪章重新修订了 Sun 版本，使得 ONC RPC 协议成为 IETF 标准协议。现在使用最普遍的模式和执行是开放式软件基础的分布式计算环境（DCE）。</p><h5 id="Hadoop基础理论"><a href="#Hadoop基础理论" class="headerlink" title="Hadoop基础理论"></a>Hadoop基础理论</h5><p>&emsp;&emsp;Hadoop就是一个分布式计算的解决方案，也就是帮助我们把一个任务分到很多台计算机来计算。Hadoop是Apache基金会开源的一个框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。<br><span class="exturl" data-url="aHR0cDovL2hhZG9vcC5hcGFjaGUub3JnLw==" title="http://hadoop.apache.org/">Apache关于Hadoop简介点击这里<i class="fa fa-external-link"></i></span><br><strong>Hadoop1.x版本：分布式文件系统(HDFS)和分布式计算框架(MapReduce)</strong><br><strong>Hadoop2.x版本：分布式文件系统(HDFS)、分布式计算框架(MapReduce)和分布式资源调度(YARN)</strong><br><strong>Hadoop3.x版本：HDFS+MapReduce+YARN，在2.x版本上进行一系列的更改。<span class="exturl" data-url="aHR0cHM6Ly9oYWRvb3AuYXBhY2hlLm9yZy9kb2NzL3IzLjAuMC8=" title="https://hadoop.apache.org/docs/r3.0.0/">详细的更改文档请点击这里<i class="fa fa-external-link"></i></span></strong><br>&emsp;&emsp;分布式文件系统HDFS是主从架构模型系统，一个HDFS集群和GFS文件系统集群一样有Master和Slave两种角色，而HDFS的Master就是NameNode(NN)，在HDFS中还有一个SecondaryNameNode角色，Slave就是DataNode(DN)，其NameNode的作用就是管理整个文件系统的命令空间（储存数据的索引）和客户端对文件的访问（建立文件系统与外界进行交流），而Slave的作用就是以块的形式真正的储存数据。块(Block)是分布式文件系统的文件储存的逻辑单元，每一个块有对个副本（在不同的DataNode）上以达到容错效果。<br>&emsp;&emsp;分布式计算框架MapReduce是一个并行的编程计算框架，主要思想是将一个任务拆分为多个Mapper和Reducer阶段，从而达到一个输入一个输出，而却是分布式的计算处理，提高效率和利用率。<br>&emsp;&emsp;分布式资源调度YARN可以理解类似HDFS理解，也是一个主从架构模型，一个YARN有ResouceManager和NodeManager，分别映射YARN物理节点的主节点（资源调度和分配）和计算节点（常与DataNode一起）。ResourceManager节点的功能由Secheduler和ApplicationManager协调完成。NodeManager对应集群中的计算节点，但是他的功能仅仅只是抽象本节点的资源(如cpu，内存，磁盘，网络)并且定时向ResourceManager的Secheduler汇报。</p><h5 id="ZooKeeper基础理论"><a href="#ZooKeeper基础理论" class="headerlink" title="ZooKeeper基础理论"></a>ZooKeeper基础理论</h5><p>&emsp;&emsp;ZooKeeper是一个分布式的协调框架，主要的分布式特性：顺序一致性、原子性、单一视图、可靠性、实时性。<br>&emsp;&emsp;简单来说ZooKeeper使得分布式程序能够通过一个共享的、树形结构的名字空间来进行相互协调，组成这个树形结构的数据节点被称作ZNode，它们之间的层级关系就像文件系统的目录结构一样；构建集群，也就是Zookeeper服务的可复制性，一般3-5(奇数)台机器就可以构建一个Zookeeper的集群，只要确保一半以上的服务器能够正常工作，整个机器就能够正常对外服务。相互之间可以进行通信，在内存中维护当前服务器状态，客户可以与任意一台服务器建立TCP连接进行通信，当与此服务器连接断开之后，客户端会自动连接到集群中的其他服务器继续工作；顺序访问，客户端的每一个更新请求ZooKeeper都会分配一个全局唯一的递增编号，通过这个编号可以确保事物操作的先后顺序；高性能，ZooKeeper将全量数据存储于内存之中，并直接服务于客户端的所有非事物请求，因此在读操作的应用上优势更为明显。可以在千台服务器组成的读写比例大约为10:1的分布系统上表现优异。<br>&emsp;&emsp;ZooKeeper的角色说明，主要有Leader(领导者)，其作用是为客户端提供读和写的服务，负责投票的发起和决议，更新系统状态；Follower（跟随者），其作用是为客户端提供读服务，如果是写服务则转发给Leader。在选举过程中参与投票；Observe（观察者），其作用是为客户端提供读服务器，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与“过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3版本以以后版本的新增角色。Client（客户端）    连接zookeeper服务器的使用着，请求的发起者。独立于zookeeper服务器集群之外的角色。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>&emsp;&emsp;本章将从Hadoop的高可用HA搭建理论，主机的分配和角色分配，软件和硬件准备来进行阐述，做到环境搭建前的准备工作，以便于后面有条不紊的进行。</p><h5 id="搭建理论"><a href="#搭建理论" class="headerlink" title="搭建理论"></a>搭建理论</h5><p>&emsp;&emsp;Hadoop高可用HA的部署，需要有2个NameNode，一个是活跃状态active的，一个是备用状态standby的，两个NameNode需要有一个管理员来协调管理，来决定决定谁处于active状态，谁处于standby状态，如果处于active状态的的NameNode宕机了，立即启动standby状态的NameNode转换为active状态，而这个具有协调功能的管理员就是ZooKeeper。<br>&emsp;&emsp;这样配置一主一从的主备NameNode之间通过一组JournalNode(JournalNode是Hadoop层面的，主流使用JournalNode集群进行数据共享)同步元数据信息，一条数据只要成功写入多数JournalNode即认为写入成功。通常配置奇数个JournalNode。同时为了满足高可用HA，那么，只有一个管理员ZooKeeper也不行，万一这个管理员坏了呢。所以需要配置一个ZooKeeper集群，同样只有一个JournalNode也不行，要配置多个JournalNode。</p><h5 id="角色分配"><a href="#角色分配" class="headerlink" title="角色分配"></a>角色分配</h5><p><strong>集群规划</strong></p><!--Table--><table><thead><tr><th align="center">主机名</th><th align="center">IP地址</th><th align="center">软件安装</th><th align="center">部署后运行的进程</th></tr></thead><tbody><tr><td align="center">master01</td><td align="center">192.168.92.2</td><td align="center">JDK、Hadoop</td><td align="center">NN、RM、ZKFC</td></tr><tr><td align="center">master02</td><td align="center">192.168.92.2</td><td align="center">JDK、Hadoop</td><td align="center">NN、RM、ZKFC</td></tr><tr><td align="center">slave01</td><td align="center">192.168.92.2</td><td align="center">JDK、Hadoop、ZooKeeper</td><td align="center">DN、DM、JN</td></tr><tr><td align="center">slave02</td><td align="center">192.168.92.2</td><td align="center">JDK、Hadoop、ZooKeeper</td><td align="center">DN、DM、JN</td></tr><tr><td align="center">slave03</td><td align="center">192.168.92.2</td><td align="center">JDK、Hadoop、ZooKeeper</td><td align="center">DN、DM、JN</td></tr></tbody></table><p><strong>备注说明：</strong></p><ul><li>192.168.92.1作为这个集群网关的IP地址</li><li>NN：指的是NameNode；DN：指的是DataNode；JN：指的是JournalNode</li><li>RM：指的是ResourceManager；DM：指的是NodeManager</li><li>ZKFC：指的是ZKFailoverController</li></ul><h5 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h5><p><strong>JDK</strong><br><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS9kb3dubG9hZHMvaW5kZXguaHRtbA==" title="https://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle的JDK下载官网点击这里<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2luc3RhbGwv" title="https://openjdk.java.net/install/">OpenJDK下载官网点击这里<i class="fa fa-external-link"></i></span><br>jdk-8u201-linux-x64.tar.gz<br><strong>Hadoop</strong><br><span class="exturl" data-url="aHR0cHM6Ly9oYWRvb3AuYXBhY2hlLm9yZy9yZWxlYXNlcy5odG1s" title="https://hadoop.apache.org/releases.html">Apache的Hadoop各个版本下载点击这里<i class="fa fa-external-link"></i></span><br>hadoop-2.7.7.tar.gz<br>hadoop-3.2.0.tar.gz<br><span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLmNsb3VkZXJhLmNvbS9jZGg1L2NkaC81Lw==" title="https://archive.cloudera.com/cdh5/cdh/5/">CDH的Hadoop各个版本下载点击这里<i class="fa fa-external-link"></i></span><br>&emsp;&emsp;在Chrome浏览器中，直接使用快捷键Ctrl+g启动页面搜索，输入hadoop回车即可查找到相关信息。注意版本的匹配问题（Hadoop版本、JDK版本和ZooKeeper版本之间的匹配支持问题）<br>hadoop-2.6.0-cdh5.13.2.tar.gz<br>hadoop-2.5.0-cdh5.2.0.tar.gz<br><strong>ZooKeeper</strong><br><span class="exturl" data-url="aHR0cDovL21pcnJvci5iaXQuZWR1LmNuL2FwYWNoZS96b29rZWVwZXIv" title="http://mirror.bit.edu.cn/apache/zookeeper/">Apache的ZooKeeper各个版本下载点击这里<i class="fa fa-external-link"></i></span><br>apache-zookeeper-3.5.5.tar.gz<br>zookeeper-3.4.14.tar.gz</p><h5 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h5><p><strong>新建主机</strong></p><ul><li>master01——root——password——staticIP——domain——firewalld</li><li>master02——root——password——staticIP——domain——firewalld</li><li>slave01——root——password——staticIP——domain——firewalld</li><li>slave02——root——password——staticIP——domain——firewalld</li><li>slave03——root——password——staticIP——domain——firewalld</li></ul><p><strong>备注说明：</strong><br>&emsp;&emsp;每一台主机配置好登录的用户名和密码，静态IP地址，主机名与IP地址的域名绑定，网卡信息的修改和防火墙的关闭(可以按需要关闭端口，也可以整个关闭防火墙)。<br><strong>配置免密登录</strong><br>&emsp;&emsp;先在每一台主机上执行生成RSA算法的秘钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen –t rsa</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从master01以root用户登录master01、master02、slave01、slave02、slave03免密。在master01主机上进行一下操作命令即可，其他主机类似操作即可，实现所有主机之间相互免密登录，都是在内部的局域网下，安全问题不考虑，这样操作方便，不需要考虑各个进行之间的通信问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@master01</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@master02</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@slave01</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@slave02</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@slave03</span><br></pre></td></tr></table></figure><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>&emsp;&emsp;本章将从JDK的安装配置，Hadoop的安装配置和ZooKeeper的安装配置来进行阐述，一步一步地按照集群的规划来部署好我们规划中的集群。</p><h5 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h5><p><strong>本节从JDK的下载、解压、环境变量和集群分发方面进行阐述</strong></p><h6 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h6><p>&emsp;&emsp;将下载好的jdk版本上传到master01主机上(当前操作所在路径root用户目录下~)，指定解压到/usr/，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u201-linux-x64.tar.gz -C /usr/</span><br></pre></td></tr></table></figure><h6 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h6><p>&emsp;&emsp;编辑系统的环境变量配置，将jdk添加到环境变量中，用vi/vim打开/etc/profile，并添加一下内容，然后保存退出，并重新生效一下环境变量。命令以内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> VI/VIM命令</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加一下内容</span><br><span class="line">JAVA_HOME=/home/java/jdk1.8.0_131</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export JRE_HOME</span><br><span class="line">export PATH</span><br><span class="line">export CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 保存退出后重新生效环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h6 id="集群分发"><a href="#集群分发" class="headerlink" title="集群分发"></a>集群分发</h6><p>配置好master01主机上的JDK后进行集群分发到master02、slave01、slave02和slave03。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp –r /usr/jdk1.8.0_201/ root@master02:/usr/</span><br><span class="line">scp –r /usr/jdk1.8.0_201/root@slave01:/usr/</span><br><span class="line">scp –r /usr/jdk1.8.0_201/root@slave02:/usr/</span><br><span class="line">scp –r /usr/jdk1.8.0_201/root@slave03:/usr/</span><br></pre></td></tr></table></figure><p>分发master01主机上的环境变量配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp –r /etc/profile root@master02:~/</span><br><span class="line">scp –r /etc/profile root@slaver01:~/</span><br><span class="line">scp –r /etc/profile root@slaver02:~/</span><br><span class="line">scp –r /etc/profile root@slaver03:~/</span><br></pre></td></tr></table></figure><h5 id="ZooKeeper安装"><a href="#ZooKeeper安装" class="headerlink" title="ZooKeeper安装"></a>ZooKeeper安装</h5><p><strong>本节从ZooKeeper的下载、解压、环境变量和集群分发方面进行阐述</strong></p><h6 id="下载解压-1"><a href="#下载解压-1" class="headerlink" title="下载解压"></a>下载解压</h6><p>&emsp;&emsp;将下载好的ZooKeeper版本上传到slaver01主机上(当前操作所在路径root用户目录下~)，指定解压到/usr/，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz -C /usr/</span><br></pre></td></tr></table></figure><h6 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h6><p>&emsp;&emsp;编辑系统的环境变量配置，将ZooKeeper(ZK)添加到环境变量中，用vi/vim打开/etc/profile，并添加一下内容，然后保存退出，并重新生效一下环境变量。命令以内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> VI/VIM命令</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在末尾添加</span><br><span class="line">export ZOOKEEPER_HOME=/usr/zookeeper-3.4.14</span><br><span class="line">export PATH=$ZOOKEEPER_HOME/bin:$PATH</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 保存退出后重新生效环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h6 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h6><p>&emsp;&emsp;ZooKeeper的配置文件全部在$ZOOKEEPER_HOME/conf下，首先进入到这里配置文件路径下，然后查看所有的配置文件，对应着一个一个地配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入ZK配置文件路径</span><br><span class="line">cd $ZKHOME/conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重命名配置文件</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 打开配置文件</span><br><span class="line">vim zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改内容</span><br><span class="line">dataDir=$ZKHOME/tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在最后添加内容</span><br><span class="line">server.1=slave01:2888:3888</span><br><span class="line">server.2=slave02:2888:3888</span><br><span class="line">server.3=slave03:2888:3888</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 保存退出后重新生效环境变量</span><br><span class="line">source /etc/profile </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 再在dataDir设置的位置创建一个空文件myid</span><br><span class="line">touch dataDir/myid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 最后向该文件写入唯一ID编码</span><br><span class="line">echo 1 &gt; $ZKHOME/tmp/myid</span><br></pre></td></tr></table></figure><h6 id="集群分发-1"><a href="#集群分发-1" class="headerlink" title="集群分发"></a>集群分发</h6><p>配置好slave01主机上的zookeeper后进行集群分发到slave02和slave03。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 集群分发</span><br><span class="line">scp –r /usr/zookeeper-3.4.14/ root@slave02:/usr/</span><br><span class="line">scp –r /usr/zookeeper-3.4.14/ root@slave03:/usr/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 特别注意：修改slave02、slave03对应dataDir设置的位置/tmp/myid内容</span><br><span class="line"><span class="meta">#</span> 在slave02：</span><br><span class="line">echo 2 &gt; $ZKHOME/tmp/myid</span><br><span class="line"><span class="meta">#</span> slave03：</span><br><span class="line">echo 3 &gt; $ZKHOME/tmp/myid</span><br></pre></td></tr></table></figure><p>分发slaver01主机上的环境变量配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 集群分发</span><br><span class="line">scp –r /etc/profile root@slaver02:~/</span><br><span class="line">scp –r /etc/profile root@slaver03:~/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 可以用命令启动zookeeper</span><br><span class="line">zkServer.sh start来启动</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 用命令来查看三个ZK集群上，哪个是leader，哪两个是follower</span><br><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure><h5 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h5><p><strong>本节从Hadoop的下载、解压、添加环境变量、修改配置文件和集群分发方面进行阐述</strong></p><h6 id="下载解压-2"><a href="#下载解压-2" class="headerlink" title="下载解压"></a>下载解压</h6><p>&emsp;&emsp;将下载好的hadoop版本上传到master01进行解压(当前操作所在路径root用户目录下~)，指定解压到/usr/。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-2.7.7.tar.gz -C /usr/</span><br></pre></td></tr></table></figure><h6 id="环境变量-2"><a href="#环境变量-2" class="headerlink" title="环境变量"></a>环境变量</h6><p>&emsp;&emsp;用编辑器打开系统环境配置文件，用VI/VIM打开/etc/profile，然后添加一下内容，方便后面直接使用一些hadoop的shell命令，当然也是可以不用配置的，直接找到hadoop的shell命令所在路径，然后再执行shell命令，这样有时候不是很方便。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim打开/etc/profile</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 文件尾部添加内容</span><br><span class="line">export HADOOP_HOME=/usr/hadoop-2.7.7</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><h6 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h6><p>&emsp;&emsp;hadoop2.x的配置文件全部在$HADOOP_HOME/etc/hadoop下，首先进入到这里配置文件路径下，然后查看所有的配置文件，对应着一个一个地配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入hadoop配置文件路径</span><br><span class="line">cd $HADOOP_HOME/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改hadoop-env.sh</span><br><span class="line">export JAVA_HOME=$JAVA_HOME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改slaves文件，添加如下内容，作用是指定hadoop的datanode节点。</span><br><span class="line">slave01</span><br><span class="line">slave02</span><br><span class="line">slave03</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改mapred-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!-- 指定mr框架为yarn方式 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>修改配置文件core-site.xml</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改core-site.xml(其他property不改)</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!-- 指定hdfs的nameservice为mycluster --&gt;</span><br><span class="line">  &lt;!-- mycluster 后面配置hdfs.site要用到 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;mycluster&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 指定hadoop临时目录 --&gt;</span><br><span class="line">  &lt;!-- 需要提前在指定路径创建好空目录tmp --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/usr/hadoop-2.7.7/tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 指定zookeeper地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;slave01:2181,slave02:2181,slave03:2181&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>修改配置文件hdfs-site.xml</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改hdfs-site.xml(其他property不改)</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!--指定hdfs的nameservice为mycluster需要和core-site.xml中的保持一致 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.nameservices&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;mycluster&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- ns1下面有两个NameNode，分别是nn1，nn2 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.ha.namenodes.mycluster&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master01,master02&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- nn1的RPC通信地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.namenode.rpc-address.mycluster.nn1&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master01:8020&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- nn1的http通信地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.namenode.http-address.mycluster.nn1&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master01:50070&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- nn2的RPC通信地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.namenode.rpc-address.mycluster.nn2&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master02:8020&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- nn2的http通信地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.namenode.http-address.mycluster.nn2&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master02:50070&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;qjournal://slave01:8485;slave02:8485;slave03:8485/mycluster&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/usr/hadoop-2.7.7/journaldata&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 开启NameNode失败自动切换 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 配置失败自动切换实现方式 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.client.failover.proxy.provider.mycluster&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 配置隔离机制方法--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;sshfence&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 配置sshfence隔离机制超时时间 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;30000&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>修改配置文件yarn-site.xml</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改yarn-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">  &lt;!-- 开启RM高可用 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 指定RM的cluster id --&gt;</span><br><span class="line">  &lt;!-- 该cluster-id不能与nameService相同--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;yrc&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 指定RM的名字 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;rm1,rm2&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 分别指定RM的地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master01&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master02&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 启用RM重启的功能--&gt;</span><br><span class="line">  &lt;property&gt;  </span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.recovery.enabled&lt;/name&gt;  </span><br><span class="line">    value&gt;true&lt;/value&gt; </span><br><span class="line">  &lt;!--description&gt;启用RM重启的功能，默认为false&lt;/description--&gt;</span><br><span class="line">  &lt;/property&gt; </span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;  </span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.store.class&lt;/name&gt;  </span><br><span class="line">  &lt;value&gt;org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore&lt;/value&gt; </span><br><span class="line">  &lt;!--description&gt;用于状态存储的类，采用ZK存储状态类&lt;/description--&gt;</span><br><span class="line">  &lt;/property&gt; </span><br><span class="line">  </span><br><span class="line">  &lt;!-- 指定zk集群地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;slave01:2181,slave02:2181,slave03:2181&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.webapp.address.rm1&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">  &lt;!--description&gt;提供给web页面访问的地址，可以查看任务状况等信息&lt;/description--&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.webapp.address.rm2&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hostbb:8088&lt;/value&gt;</span><br><span class="line">  &lt;!--description&gt;提供给web页面访问的地址，可以查看任务状况等信息&lt;/description--&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 配置通讯的地址和端口，有多少个RM就配置多少组property --&gt;</span><br><span class="line">  &lt;!-- RM1--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.scheduler.address.rm1&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master01:8030&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.resource-tracker.address.rm1&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master01:8031&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.address.rm1&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master01:8032&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.admin.address.rm1&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master01:8033&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- RM2 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.scheduler.address.rm2&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master02:8030&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.resource-tracker.address.rm2&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master02:8031&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.address.rm2&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master02:8032&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.admin.address.rm2&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master02:8033&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h6 id="集群分发-2"><a href="#集群分发-2" class="headerlink" title="集群分发"></a>集群分发</h6><p>配置好master01主机上的hadoop后进行集群分发到master02、slave01、slave02和slave03。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp –r /usr/hadoop-2.7.7/ root@master02:/usr/</span><br><span class="line">scp –r /usr/hadoop-2.7.7/root@slave01:/usr/</span><br><span class="line">scp –r /usr/hadoop-2.7.7/root@slave02:/usr/</span><br><span class="line">scp –r /usr/hadoop-2.7.7/root@slave03:/usr/</span><br></pre></td></tr></table></figure><p>分发master01主机上的环境变量配置文件，这个环境变量记得每次配置完成后都要集群分发一次，并重新生效，也可以整个所有集群环境搭建好了之后，只需要集群分发一次并生效即可。</p><h4 id="集群检测"><a href="#集群检测" class="headerlink" title="集群检测"></a>集群检测</h4><h5 id="格式化HDFS"><a href="#格式化HDFS" class="headerlink" title="格式化HDFS"></a>格式化HDFS</h5><p>在master01上执行分布式文件系统HDFS的格式化命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><p>格式化后会在根据core-site.xml中的hadoop.tmp.dir配置生成个文件，这里我配置的是$HADOOP_HOME/tmp，然后将$HADOOP_HOME/tmp拷贝到#master02的$HADOOP_HOME下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式化主从NameNode</span><br><span class="line">scp -r tmp/ master02:$HADOOP_HOME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 建议使用命令进行主从NameNode格式化</span><br><span class="line"><span class="meta">#</span> 在执行此命令前先启动master01的namenode：sbin/hadoop-daemon.sh start namenode </span><br><span class="line">hdfs namenode -bootstrapStandby</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 格式化ZKFC</span><br><span class="line"><span class="meta">#</span> 格式化ZKFC(在master01上执行即可)</span><br><span class="line">hdfs zkfc -formatZK</span><br><span class="line"><span class="meta">#</span> 或者直接到hadoop的bin和sbin下调相应命令</span><br><span class="line">bin/hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure><h5 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在zookeeper的三个节点上执行命令启动zookeeper</span><br><span class="line">zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 然后在master01上执行启动HDFS、YARN</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure><h5 id="集群检测-1"><a href="#集群检测-1" class="headerlink" title="集群检测"></a>集群检测</h5><p><strong>检测进程</strong><br>&emsp;&emsp;在每一台主机上执行jps命令，查看运行在Java虚拟机KVM的进程。可以采用批量化命令，即打开远程连接软件的交互窗口，只输入一次命令在所有主机上都运行该命令，然后根据每一台主机运行后的进程和我们预先的进程是否一致，若相同则集群成功了。<br><strong>检测浏览器访问</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看分布式文件系统HDFS</span><br><span class="line">http://192.168.92.2:50070</span><br><span class="line">NameNode 'master01:9000' (active)</span><br><span class="line">http://192.168.92.3:50070</span><br><span class="line">NameNode 'master02:9000' (standby)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查看分布式资源调度YARN任务信息（ResourceManager运行节点的IP）</span><br><span class="line">http://192.168.92.2:8088(端口号是上面文件中配置的,默认是8088)</span><br></pre></td></tr></table></figure><p><strong>测试集群的高可用性</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 先向hdfs上传一个文件</span><br><span class="line">hadoop fs -put /etc/profile /</span><br><span class="line">hadoop fs -ls /</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 然后再kill掉active的NameNode</span><br><span class="line">kill -9 &lt;pid of NN&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 通过浏览器访问：http://192.168.92.3:50070</span><br><span class="line"><span class="meta">#</span> NameNode 'master02:9000' (active)</span><br><span class="line"><span class="meta">#</span> 这个时候master02上的NameNode变成了active</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在执行命令,发现刚才上传的文件依然存在</span><br><span class="line">hadoop fs -ls /</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 手动启动那个挂掉的NameNode</span><br><span class="line">sbin/hadoop-daemon.sh start namenode</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 通过浏览器访问：http://192.168.92.2:50070</span><br><span class="line">NameNode 'weekend01:9000' (standby)</span><br></pre></td></tr></table></figure><h4 id="出错问题QA"><a href="#出错问题QA" class="headerlink" title="出错问题QA"></a>出错问题QA</h4><p><strong>Q：不能完成主备NameNode节点之间的自动切换？</strong><br>A：查看配置hdfs-site.xml密匙文件位置是否配置正确！</p><p><strong>Q：出现找不到命令的情况？</strong><br>A：看环境变量是否配置好了，或者直接到hadoop的bin和sbin下调相应命令！</p><p><strong>Q：出现访问不了哪一个节点？</strong><br>A：节点之间是要相互通信的，所以要检查在各节点之间配置ssh免密登陆！</p><p><strong>Q：出现找不到主机名错误提示？</strong><br>A：查看主机名与IP的映射域名文件/etc/hosts是否配置准确！注意配置文件/etc/sysconfig/network配置的是该主机的主机名！</p><p><strong>Q：运行过程中出现莫名其妙错误？</strong><br>A：首先应该检查一下集群的必要进程是否还在，有可能莫名其妙的在后台挂掉了！</p><p><strong>Q：浏览器访问出现端口冲突？</strong><br>A：所有进行的HTTP端口或者RPC通信端口采用默认方式，如果有冲突则修改端口即可！</p><p><strong>Q：感觉看到不是很懂的，感觉有错误的？</strong><br>A：首先本篇文章要求读者有一定的Linux基础和Hadoop集群基础，然后可能版本的原因，部分配置信息有不同，详情请以官方配置文档为主！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;有基础的读者，可以直接跳到第三章：环境搭建。前面两章都是一些相关的理论基础和准备工作。而对于完全是第一次搭建Hado
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://2694048168.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://2694048168.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>计算机语言简介</title>
    <link href="https://2694048168.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/"/>
    <id>https://2694048168.github.io/计算机语言简介/</id>
    <published>2019-08-17T12:58:42.000Z</published>
    <updated>2020-03-25T14:49:49.010Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>&emsp;&emsp;在如今信息发达的时代，科技日新月异，计算机和Internet网络的发展也成为人们日常生活的重要部分。学习一两门计算机编程语言也如当初学习英文一样的火热，随着人工智能AI和云计算的不断发展，Python语言和Scala语言已经成为这两个领域里面最为火热的编程语言了，可以预知未来学习计算机编程语言的人也一样会如同学习英文一样的成为一种新常态，并且成为一种稳定的常态。以下笔者将以自己的学习认知，简单的阐述一下计算机编程语言的发展。</p><!--图片链接--><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80.png" alt="self"></p><h4 id="编程语言简介"><a href="#编程语言简介" class="headerlink" title="编程语言简介"></a>编程语言简介</h4><p>&emsp;&emsp;计算机语言，英文名Computer Language，或者Programming Language，指的是人与计算机进行交互的一种语言，就如我们学习外语一样的，只是一种形式工具，主要与计算机交流的是我们的思想，将我们自己的思想以计算机能识别的语言赋予他，就形成了程序。<br>&emsp;&emsp;而实现我们的思想的一系列的问题的就是向计算机发送指令，对于通信的双方而言，指令的格式，组成字符，数字数据，语法等一系列的标准就很重要了，而我们学习的就是这一系列的标准，从而能将自己的思想赋予计算机，让计算机能智能化、自动化的为我们服务。随着这一思想的不断演化发展，就逐步形成了一种新的语言，即就是计算机语言！<br>&emsp;&emsp;1946年，于宾夕法尼亚大学，莫克利(JohnW.Mauchly)和艾克特(J.PresperEckert)发明了世界上第一台通用计算机，命名为“ENIAC”。那时候程序员必须手动控制计算机，当时唯一想到利用程序设计语言来解决问题的人是德国工程师楚泽(konradzuse)。</p><h4 id="计算机语言发展简史"><a href="#计算机语言发展简史" class="headerlink" title="计算机语言发展简史"></a>计算机语言发展简史</h4><p>&emsp;&emsp;计算机是一系列的硬件构成的能完成强大功能的一个结合体，他唯一能够识别的就是逻辑运算，即0和1，所以最初的计算机交互语言是以二进制的机器语言，由于太难理解与记忆，人们就定义了一系列的助记符帮助理解与记忆，就逐渐产生了汇编语言，但是汇编还是不好理解与记忆，就逐渐发展了高级语言。随着C、Fortran等结构化高级语言的诞生，使程序员可以离开机器层次，通过更加抽象的层次来表达自己的思想，同时也诞生的三种重要控制结构，即就是顺序结构、选择结构、循环结构，以及一些基本数据类型都能够很好的让程序员以接近问题本质的方式去描述、抽象问题。但随着需要处理的问题规模的不断扩大，一般的程序设计模型无法克服错误随着代码的扩大而级数般的扩大，这个时候就出现了一种新的思考程序设计方式和程序设计模型，即就是面向对象程序设计，同时也诞生了一批支持这种设计模型的计算机语言，例如C++、Java、Python等。<br>&emsp;&emsp;简而言之，计算机语言从最初的机器语言（二进制），发展到使用助记符的汇编语言，再到更易理解的高级语言，包括C、C++、Java、C#、Python等等。计算机程序的设计模型从结构化的编程，再到面向对象的编程。当然计算机只能识别二进制语言，那么很明显在其他计算机语言与机器语言之间就有着一个桥梁，起着翻译一样的功能，使得通信双方能够交流，而这个翻译官就是编译器。而由于编译的原理不一样，我们将计算机语言分为编译性语言（例如C、C++）和解释性语言（Shell、Python）。</p><!--图片链接--><p><img src="/images/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80.png" alt="self"></p><h4 id="三代计算机编程语言"><a href="#三代计算机编程语言" class="headerlink" title="三代计算机编程语言"></a>三代计算机编程语言</h4><h5 id="第一代计算机编程语言"><a href="#第一代计算机编程语言" class="headerlink" title="第一代计算机编程语言"></a>第一代计算机编程语言</h5><p>&emsp;&emsp;第一代的计算机语言就是机器语言，即就是0\1组成的代码，人们通过0\1与计算机进行交互与数据交换，这样的编程实在是太难，对于大多数人来说都是十分的困难的，随着其时间的发展，就逐步演化了第二代计算机语言。不过这是计算机的基础，因为计算机硬件只能识别0\1的二进制，无论后面的计算机语言如何发展，最总在计算机内能够执行的只能是0\1的二进制编码，故而后面所有的计算机语言都需要一个翻译的东西，将其翻译为二进制的编码执行，这个起着翻译官作用的就是编译器！</p><h5 id="第二代计算机编程语言"><a href="#第二代计算机编程语言" class="headerlink" title="第二代计算机编程语言"></a>第二代计算机编程语言</h5><p>&emsp;&emsp;由于第一代计算机语言的学习难度系数极高，就发展出使用一些助记符来帮助人们编程，这就是第二代编程语言——汇编语言，使人们与计算机进行交流沟通时便捷一些，人们学习编程起来也比较容易，这种使用英文助记符来帮助人们进行编程，再由编译器翻译为0\1的代码，这样计算机就能识别了。但是随着信息技术的不断发展，汇编语言已经不能够满足大部分人们的需求，就催生了第三代计算机编程语言。</p><h5 id="第三代计算机编程语言"><a href="#第三代计算机编程语言" class="headerlink" title="第三代计算机编程语言"></a>第三代计算机编程语言</h5><p>&emsp;&emsp;所谓的第三代计算机编程语言，就是大家经常熟知的一些编程语言。而对于计算机高级语言的发展分为两个阶段，以 1980 年为分界线，前一阶段属于结构化语言或者称为面向过程的语言，后一阶段属于面向对象的语言。<br>&emsp;&emsp;然而对于什么叫面向过程，什么叫面向对象？这是很难解释的一个问题，故而暂时不需要深入理解，简单来说就是编程时的两种设计思想。<br>&emsp;&emsp;面向过程语言中最经典、最重要的就是C语言。Fortran、Basic 和 Pascal 语言基本上已经很少有人使用了。但是C语言一直在用，因为C语言是计算机领域最重要的一门语言，其在liunx编程和嵌入式编程有极大的地位。但是C语言也有缺陷，它的缺陷只有在学完面向对象语言之后才能体会到。<br>&emsp;&emsp;故而从 20 世纪 80 年代开始又产生了另外一种“以面向对象”为思想的语言，其中最重要、最复杂的就是 C++。C++ 从易用性和安全性两个方面对C语言进行了升级。C++ 是一种较复杂、难学的语言，但是一旦学会了则非常有用。因为 C++ 太复杂，所以后来就对 C++ 进行了改装，产生了两种语言，一个是 Java，另一个是 C#。Java 语言是现在最流行的语言之一。C# 则是微软公司看 Java 很流行而写的一个与 Java 语法相似的语言。因为 Java 和 C# 几乎是一模一样的，所以你只需要学习其中的一种语言就可以了。<br>&emsp;&emsp;同时随着近年来的人工智能和云计算的火热发展，Python语言和Scala语言成为人工智能和云计算Hadoop框架的重要编程语言，逐渐成为时代的主流编程语言。在计算机的领域里，还有一些专用的计算机编程语言，不如网页设计的三要素：HTML、CSS和JavaScript ，这三者就是专用的计算机编程语言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在如今信息发达的时代，科技日新月异，计算机和Internet网络的发展也成为人们日常生活的重要部分。学习一两门计算机
      
    
    </summary>
    
      <category term="C&amp;C++" scheme="https://2694048168.github.io/categories/C-C/"/>
    
    
      <category term="编程语言" scheme="https://2694048168.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言简介</title>
    <link href="https://2694048168.github.io/C%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/"/>
    <id>https://2694048168.github.io/C语言简介/</id>
    <published>2019-08-17T12:47:51.000Z</published>
    <updated>2020-03-25T14:50:09.141Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>&emsp;&emsp;计算机语言，英文名Computer Language，或者Programming Language，指的是人与计算机进行交互的一种语言，就如我们学习外语一样的，只是一种形式工具，主要与计算机交流的是我们的思想，将我们自己的思想以计算机能识别的语言赋予他，就形成了程序。<br>&emsp;&emsp;实现我们的思想的一系列的问题的就是向计算机发送指令，对于通信的双方而言，指令的格式，组成字符，数字数据，语法等一系列的标准就很重要了，而我们学习的就是这一系列的标准，从而能将自己的思想赋予计算机，让计算机能智能化、自动化的为我们服务。</p><h4 id="计算机语言发展历史"><a href="#计算机语言发展历史" class="headerlink" title="计算机语言发展历史"></a>计算机语言发展历史</h4><p>&emsp;&emsp;1946年，于宾夕法尼亚大学，莫克利(JohnW.Mauchly)和艾克特(J.PresperEckert)发明了世界上第一台通用计算机，命名为“ENIAC”。那时候程序员必须手动控制计算机，当时唯一想到利用程序设计语言来解决问题的人是德国工程师楚泽(konradzuse)。<br>&emsp;&emsp;计算机是一系列的硬件构成的能完成强大功能的一个结合体，他唯一能够识别的就是逻辑运算，即0和1，所以最初的计算机交互语言是以二进制的机器语言，由于太难理解与记忆，人们就定义了一系列的助记符帮助理解与记忆，就逐渐产生了汇编语言，但是汇编还是不好理解与记忆，就逐渐发展了高级语言。随着C、Fortran等结构化高级语言的诞生，使程序员可以离开机器层次，通过更加抽象的层次来表达自己的思想，同时也诞生的三种重要控制结构，即就是顺序结构、选择结构、循环结构，以及一些基本数据类型都能够很好的让程序员以接近问题本质的方式去描述、抽象问题。但随着需要处理的问题规模的不断扩大，一般的程序设计模型无法克服错误随着代码的扩大而级数般的扩大，这个时候就出现了一种新的思考程序设计方式和程序设计模型，即就是面向对象程序设计，同时也诞生了一批支持这种设计模型的计算机语言，例如C++、Java、Python等。<br>&emsp;&emsp;简而言之，计算机语言从最初的机器语言（二进制），发展到使用助记符的汇编语言，再到更易理解的高级语言，包括C、C++、Java、C#、Python等等。计算机程序的设计模型从结构化的编程，再到面向对象的编程。当然计算机只能识别二进制语言，那么很明显在其他计算机语言与机器语言之间就有着一个桥梁，起着翻译一样的功能，使得通信双方能够交流，而这个翻译官就是编译器。而由于编译的原理不一样，我们将计算机语言分为编译性语言（例如C、C++）和解释性语言（Shell、Python）。</p><h4 id="C语言简介"><a href="#C语言简介" class="headerlink" title="C语言简介"></a>C语言简介</h4><p><strong>C语言产生以及发展</strong></p><!--图片链接--><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95.png" alt="self"></p><ul><li>1967年，剑桥大学的Martin Richards对CPL语言进行简化产生了BCPL（Basic Combined Programming Language）语言。</li><li>1970年，美国贝尔实验室的 Ken Thompson，以BCPL语言为基础，设计出很简单且很接近硬件的B语言（取BCPL的首字母）。并且他用B语言写了第一个UNIX操作系统，就这样如今强大的Unix/Liunx操作系统来源就诞生了。</li><li>1971年，同样酷爱Space Travel的Dennis M.Ritchie为了能早点儿玩上游戏，加入了Thompson的开发项目，合作开发UNIX。他的主要工作是改造B语言，使其更成熟。1972年，美国贝尔实验室的 D.M.Ritchie 在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。</li><li>1973年初，C语言的主体完成。Thompson和Ritchie迫不及待地开始用它完全重写了UNIX，随着UNIX的发展，C语言自身也在不断地完善，直到今天，各种版本的UNIX内核和周边工具仍然使用C语言作为最主要的开发语言，其中还有不少继承Thompson和Ritchie之手的代码。</li><li>1977年，Dennis M.Ritchie发表了不依赖于具体机器系统的C语言编译文本《可移植的C语言编译程序》。这样C语言的可移植加增强了，比起机器语言和汇编语言，C更加不依赖于计算机硬件了。</li><li>C语言继续发展，在1982年，美国国家标准协成立C标准委员会，建立C语言的标准。1989年，ANSI发布了第一个完整的C语言标准——ANSI X3.159—1989，简称“C89”，不过人们也习惯称其为“ANSI C”。</li><li>1999年，在做了一些必要的修正和完善后，ISO发布了新的C语言标准，命名为ISO/IEC 9899：1999，简称“C99”。</li><li>在2011年12月8日，ISO又正式发布了新的标准，称为ISO/IEC9899: 2011，简称为“C11”。</li><li>K&amp;R C，1978年，丹尼斯·里奇和布莱恩·柯林汉合作出版了《C程序设计语言》的第一版。书中介绍的C语言标准也被C语言程序员称作“K&amp;R C”，这本书就成为了C语言的开山之宝，同时K&amp;R也被称为C语言之父。</li><li>在二十世纪六十年代以后，逐渐产生了对如今影响最大的三个技术，那就是C语言、Unix\Liunx操作系统和TCP\IP网络协议，这三者完美的配合，构架了现在几乎所有的IT领域。</li></ul><h4 id="C语言的应用领域"><a href="#C语言的应用领域" class="headerlink" title="C语言的应用领域"></a>C语言的应用领域</h4><!--图片链接--><p><img src="/images/C%E8%AF%AD%E8%A8%80.png" alt="self"></p><ul><li>嵌入式编程<br>&emsp;&emsp;对于嵌入式，大家都不会感到陌生，我们生活日常中的大部分电子产品都有着它的身影。对于微控制器还是微处理器等等嵌入式的一系列控制都可以用C语言来编写，因为C语言接近硬件，同时可移植性比汇编语言好。比如笔者学习AT89C51单片机和STM32时，都是使用C语言来编写设备驱动程序，ARM公司的Keil软件学习的。</li><li>编写其他高级语言<br>&emsp;&emsp;对于学习计算机语言，笔者认为C语言是一门非常好的入门语言，当学习了C语言后，拥有了C语言的计算思维，再去学习其他的高级语言就非常容易理解和学习，因为有了面向对象的编程思想后，所有其他高级语言都是在C语言之上进行抽象与封装，所有就会感到十分熟悉。同时关于基本的数据结构都差不多。</li><li>编写操作系统与服务器<br>&emsp;&emsp;我们熟知的Liunx操作系统就完全是C语言编写的，Java的虚拟机JVM就是用C和汇编写的，Web服务器Apache也是用C语言写的。毕竟C语言的执行速度更接近硬件，所有一些大型的游戏平台以及引擎都是用C语言写的。同时那些大型的软件也都会在相应部分加入C语言编写，包括数据库、图形图像处理等软件。</li></ul><h4 id="C语言源代码"><a href="#C语言源代码" class="headerlink" title="C语言源代码"></a>C语言源代码</h4><!--Code--><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**Function：标准C语言程序</span></span><br><span class="line"><span class="comment">**Author：@云主宰苍穹</span></span><br><span class="line"><span class="comment">**Date：2019-02-27</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//# 预处理符号标识</span></span><br><span class="line"><span class="comment">//include 包含头文件.h &lt;&gt;包含系统头文件  ""包含自定义头文件</span></span><br><span class="line"><span class="comment">//std-standard标准  i-input输入 o-output输出  stdio标准输入输出库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int 主函数返回值类型  main主函数 (参数列表，多个参数以逗号分隔)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"><span class="comment">//&#123;&#125;里面是一个语句块，代码块，函数体</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//printf格式化输出函数，在stdio.h头文件中</span></span><br><span class="line"><span class="comment">//""双引号里面的是一个字符串， 一条语句以；分号结束标志</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"HelloWorld!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 标志结束一个函数体，在main函数中标志结束程序</span></span><br><span class="line"><span class="comment">//0函数返回值，必须与函数返回值类型匹配</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;计算机语言，英文名Computer Language，或者Programming Language，指的是人与计算机
      
    
    </summary>
    
      <category term="C&amp;C++" scheme="https://2694048168.github.io/categories/C-C/"/>
    
    
      <category term="C语言" scheme="https://2694048168.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Windows系统下载安装GCC编译器</title>
    <link href="https://2694048168.github.io/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85GCC%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://2694048168.github.io/Windows系统下载安装GCC编译器/</id>
    <published>2019-08-17T12:22:12.000Z</published>
    <updated>2020-02-19T08:00:02.022Z</updated>
    
    <content type="html"><![CDATA[<h5 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h5><p>&emsp;&emsp;对于学习计算机高级语言，编译器是必须要了解的，GCC是一款针对C语言的最佳编译器，随着计算机语言的发展，GCC也逐渐支持C++等其他的高级语言。笔者认为GCC是一款优秀的编译器，特别对于学习Liunx和嵌入式的人来说，了解GCC编译器的工具链是十分必要的！笔者以下以Windows系统下的GCC开源MinGW的下载、安装、环境变量的配置以及检测安装十分成功来阐述GCC编译器，希望对于新手有所帮助！</p><h5 id="Windows系统下GCC版本MinGW下载"><a href="#Windows系统下GCC版本MinGW下载" class="headerlink" title="Windows系统下GCC版本MinGW下载"></a>Windows系统下GCC版本MinGW下载</h5><p>&emsp;&emsp;进入MinGW的官网，进行对GCC版本的下载（需要联网下载，以下的安装过程都需要联网下载一些必须要的组件包），如下图所示：</p><!--超链接--><p><span class="exturl" data-url="aHR0cHM6Ly9vc2RuLm5ldC9wcm9qZWN0cy9taW5ndy9yZWxlYXNlcy8=" title="https://osdn.net/projects/mingw/releases/">MinGW官网下载点击这里<i class="fa fa-external-link"></i></span></p><!--图片链接--><p><img src="/images/GCC%E4%B8%8B%E8%BD%BD%E5%AE%98%E7%BD%91.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E9%80%89%E6%8B%A9%E6%9C%80%E4%BD%B3%E7%89%88%E6%9C%AC.jpeg" alt="self"></p><h5 id="Windows系统下GCC版本MinGW安装"><a href="#Windows系统下GCC版本MinGW安装" class="headerlink" title="Windows系统下GCC版本MinGW安装"></a>Windows系统下GCC版本MinGW安装</h5><!--图片链接--><p><img src="/images/GCC%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E5%AE%89%E8%A3%85GCC%E7%89%88%E6%9C%AC.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E7%AD%89%E5%BE%85%E5%AE%89%E8%A3%85%E4%B8%8B%E8%BD%BD.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8GCC.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E7%82%B9%E5%87%BB%E5%AE%89%E8%A3%85%E7%BC%96%E8%AF%91%E5%99%A8.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/GCC%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.jpeg" alt="self"></p><h5 id="Windows系统下GCC版本系统环境变量的配置"><a href="#Windows系统下GCC版本系统环境变量的配置" class="headerlink" title="Windows系统下GCC版本系统环境变量的配置"></a>Windows系统下GCC版本系统环境变量的配置</h5><!--图片链接--><p><img src="/images/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpeg" alt="self"></p><h5 id="Windows系统下GCC版本的安装成功检查"><a href="#Windows系统下GCC版本的安装成功检查" class="headerlink" title="Windows系统下GCC版本的安装成功检查"></a>Windows系统下GCC版本的安装成功检查</h5><!--图片链接--><p><img src="/images/GCC%E6%A3%80%E6%B5%8B.jpeg" alt="self"></p><h5 id="make-amp-makefile"><a href="#make-amp-makefile" class="headerlink" title="make &amp; makefile"></a>make &amp; makefile</h5><p>&emsp;&emsp;Linux 环境下使用GUN make来构建和管理自己的工程，这是一个合格的专业程序猿必备技能。在 Linux（unix ）环境下使用GNU 的make工具能够比较容易的构建一个属于你自己的工程，整个工程的编译只需要一个命令就可以完成编译、连接以至于最后的执行。不过这需要我们投入一些时间去完成一个或者多个称之为Makefile 文件的编写。<br>&emsp;&emsp;Makefile 文件描述了整个工程的编译、连接等规则。其中包括：工程中的哪些源文件需要编译以及如何编译、需要创建哪些库文件以及如何创建这些库文件、如何最后产生我们想要的可执行文件。尽管看起来可能是很复杂的事情，但是为工程编写Makefile 的好处是能够使用一行命令来完成“自动化编译”，一旦提供一个（通常对于一个工程来说会是多个）正确的 Makefile。编译整个工程你所要做的事就是在shell 提示符下输入make命令。整个工程完全自动编译，极大提高了效率。<br>&emsp;&emsp;make是一个命令工具，它解释Makefile 中的指令。在Makefile文件中描述了整个工程所有文件的编译顺序、编译规则。Makefile 有自己的书写格式、关键字、函数。像C 语言有自己的格式、关键字和函数一样。而且在Makefile 中可以使用系统shell所提供的任何命令来完成想要的工作。Makefile在绝大多数的IDE 开发环境中都在使用，已经成为一种工程的编译方法。</p><p><span class="exturl" data-url="aHR0cHM6Ly9zZWlzbWFuLmdpdGh1Yi5pby9ob3ctdG8td3JpdGUtbWFrZWZpbGUvaW50cm9kdWN0aW9uLmh0bWw=" title="https://seisman.github.io/how-to-write-makefile/introduction.html">学习makefile<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9tYWtlL21hbnVhbC9tYWtlLmh0bWw=" title="https://www.gnu.org/software/make/manual/make.html">GUN make<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;对于学习计算机高级语言，编译器是必须要了解的，GCC是一款针对C语言的最佳编译器，随着计算机语言的发展，GCC也逐渐
      
    
    </summary>
    
      <category term="工具" scheme="https://2694048168.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="GCC" scheme="https://2694048168.github.io/tags/GCC/"/>
    
  </entry>
  
  <entry>
    <title>CodeBlocks下载安装</title>
    <link href="https://2694048168.github.io/CodeBlocks%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
    <id>https://2694048168.github.io/CodeBlocks下载安装/</id>
    <published>2019-08-17T12:00:13.000Z</published>
    <updated>2020-02-19T08:01:19.642Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>&emsp;&emsp;在计算机高级语言之中，笔者认为C语言是计算机高级语言中最为经典的入门语言。其强大的计算机思维以及计算思维，许多关于计算机的知识，笔者认为C语言是所有高级语言中最为接近底层硬件，更能帮助我们理解计算机的程序。笔者认为codeblocks集成开发环境是非常适合新手进行练习的，codeblocks不仅仅拥有其他集成开发环境IDE的基础优点，同时也是开源的、免费的，其安装的体积不是很大，不像VS系列的需要很大的储存空间和运行内存需求，故而笔者在使用多款关于C\C++集成开发环境后，强烈建议新手选择codeblocks作为入门的一款集成开发环境。</p><h4 id="code-blocks下载"><a href="#code-blocks下载" class="headerlink" title="code::blocks下载"></a>code::blocks下载</h4><p>&emsp;&emsp;Code::Blocks 是一个开放源码的全功能的跨平台C/C++集成开发环境。 Code::Blocks是开放源码软件。Code::Blocks由纯粹的C++语言开发完成，它使用了著名的图形界面库wxWidgets(2.6.2 unicode)版。对于追求完美的C++程序员，再也不必忍受Eclipse的缓慢。<br>&emsp;&emsp;对于codeblocks可以在其官网进行下载对应操作系统版本的安装软件，无论是Liunx\Unix，还是Mac，或者Windows操作系统都支持codeblocks的安装，本博文以Windows为例子下载安装，Linux系统的安装更加简单，大家可以借鉴一下安装就OK了。</p><!--超链接--><p><span class="exturl" data-url="aHR0cDovL3d3dy5jb2RlYmxvY2tzLm9yZy9kb3dubG9hZHM=" title="http://www.codeblocks.org/downloads">codeblocks官网下载点击这里<i class="fa fa-external-link"></i></span></p><!--图片链接--><p><img src="/images/codeblocks%E5%AE%98%E7%BD%91.jpeg" alt="self"></p><h4 id="code-blocks安装"><a href="#code-blocks安装" class="headerlink" title="code::blocks安装"></a>code::blocks安装</h4><p><strong>下载对应的版本软件，进行对应的安装，以下以Windows系统为例，下载的安装程序如图所示：</strong></p><!--图片链接--><p><img src="/images/Windows%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F.jpeg" alt="self"><br><strong>双击执行程序，进行安装，Windows系统下，一步一步的next就可以安装成功！！！</strong><br><strong>安装成功后，打开codeblocks软件后界面如下：</strong></p><!--图片链接--><p><img src="/images/codeblocks%E7%95%8C%E9%9D%A2.jpeg" alt="self"><br><strong>小提示：</strong></p><ul><li>注意选择安装的位置路径！不要将软件安装在系统盘C盘！</li><li>注意选择软件的使用权限！安装软件以管理员身份运行软件！</li><li>注意软件没有集成的编译器和调试器！需要在自己电脑安装GCC编译器！</li><li>建议自己安装GCC编译器和GDB调试器！需要在网络上找一个可用的GDB调试器！</li></ul><h4 id="创建第一个程序"><a href="#创建第一个程序" class="headerlink" title="创建第一个程序"></a>创建第一个程序</h4><p>&emsp;&emsp;点击codeblocks软件界面的，File菜单，在弹出的子菜单下选择New，在选择一个Project，创建一个工程，选择ConsoleApplication，创建一个控制台应用程序。<br>&emsp;&emsp;选择创建工程的编写语言，这里选择C语言，点击Next，继续填写工程的名称以及保存的位置，Next后，继续选择编译器以及需要的Debug版本以及Release版本，最后点击Finish完成，创建好工程，codeblocks自动为我们创建好了一个main主函数入口（笔者的软件界面经过主题美好了，做了一些修改，故而有一些不一样的地方，但是不影响软件的使用！！！），如下图所示：</p><!--图片链接--><p><img src="/images/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E5%B7%A5%E7%A8%8B%E5%90%8D%E7%A7%B0.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%A5%E5%8F%8A%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B%E5%90%8E%E7%9A%84%E7%95%8C%E9%9D%A2.jpeg" alt="self"></p><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p>&emsp;&emsp;选择codeblocks软件界面的Build菜单，下拉选择Build，创建整个工程，直到软件的编译器提示无错误为止（如下图所示），就可以进行运行程序了！！！我们的第一个HelloWorld经典程序就问世了，您好，世界！</p><!--图片链接--><p><img src="/images/%E7%BC%96%E8%AF%91%E5%B7%A5%E7%A8%8B.jpeg" alt="self"></p><!--图片链接--><p><img src="/images/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="self"></p><h4 id="对于GCC编译器和GDB调试器"><a href="#对于GCC编译器和GDB调试器" class="headerlink" title="对于GCC编译器和GDB调试器"></a>对于GCC编译器和GDB调试器</h4><p>在Windows下下载安装MinGW开源GCC编译器，详情请查看本博客文章：Windows系统下载安装GCC编译器<br>然后在codeblocks里面更改编译器的设置，如下图所示：</p><!--图片链接--><p><img src="/images/gcc%E7%BC%96%E8%AF%91%E5%99%A8.png" alt="self"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在计算机高级语言之中，笔者认为C语言是计算机高级语言中最为经典的入门语言。其强大的计算机思维以及计算思维，许多关于计
      
    
    </summary>
    
      <category term="工具" scheme="https://2694048168.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="CodeBlocks" scheme="https://2694048168.github.io/tags/CodeBlocks/"/>
    
  </entry>
  
  <entry>
    <title>全球科技通史-吴军</title>
    <link href="https://2694048168.github.io/%E5%85%A8%E7%90%83%E7%A7%91%E6%8A%80%E9%80%9A%E5%8F%B2-%E5%90%B4%E5%86%9B/"/>
    <id>https://2694048168.github.io/全球科技通史-吴军/</id>
    <published>2019-08-17T11:44:02.000Z</published>
    <updated>2020-02-19T08:15:58.178Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>吴军博士的《全球科技通史》一书从科技视角俯瞰历史，从历史视角理解科技，便于我们更加深刻的理解科技的发展史和其本质。<br>《全球科技通史》一书从钱颖一教授的推荐序——从科技视角俯瞰历史，从历史视角理解科技，本书的前言——科技的本质。以人类发展的历史为主线，从远古科技，到古代科技，再到近代科技，最后到现代科技，用十章的内容讲述了全人类全球范围内的科技发展通史，让读者从另一个维度来认识和思考科技的发展和其本质。</p><h4 id="推荐序"><a href="#推荐序" class="headerlink" title="推荐序"></a>推荐序</h4><p><strong>从科技视角俯瞰历史，从历史视角理解科技</strong></p><p>吴军博士的《全球科技通史》帮助我们从历史视角思考科学和技术的过去和未来，值得推荐。<br>科学是发现自然规律，技术是对改造世界有用的发明。<br>科学方法论的起点是“怀疑一切”。</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>科技的地位和作用</p><ul><li>从空间维度看，在文明过程中独一无二，是一种进步的力量。</li><li>从时间维度看，是世界上唯一能获得叠加性进步的力量。</li></ul><p>科技发展的历史必然性</p><ul><li>从能量角度看，宇宙的本源就是能量，物质就是由能量构成的。</li><li>从信息角度看，人类的实践本质上就是获取能量并利用能量改变周围的环境。</li></ul><h4 id="远古科技"><a href="#远古科技" class="headerlink" title="远古科技"></a>远古科技</h4><p>人类和其他动物的一个本质区别就是前者有能力主动改变周围的环境，这通常归结为智力因素。<br>人类让自己的活动产生多余的能量(除去维持自身生长和生存所需的)，从根本上只有两个方法：开源和节流。<br>文化和文明是不一样的概念</p><ul><li>文明(civilization)——城市、文字记载和金属工具</li><li>文化(culture)——人类定居、农业和畜牧业</li></ul><p>气候的骤变对很多物种来说都是灭顶之灾，太阳的活动映射地球获取能量的变化，从而使得地球的生物随着能量而演变，人类也就随之进化，逐步定居，开始出现了文明的曙光。而这时的科技主要围绕两个核心：</p><ul><li>获取更多的能量便于生存</li><li>总结、记录并传授经验便于有效改变生存环境 </li></ul><h5 id="黎明之前"><a href="#黎明之前" class="headerlink" title="黎明之前"></a>黎明之前</h5><p>没有文字记载的史前时期和有了文字记载的文明时期。<br>历史研究在一定程度上就是解码遗留下来的历史痕迹信息。<br>文明的程度可以根据人类自身获取能量的水平和在生活中使用能量的水准来衡量。<br>在人类史上，火的使用不仅在使用能量上的一次巨大飞跃，也是人类进化和开启文明不可或缺的环节。<br>形成大规模部落是人类从史前文明向早期文明过度的必要条件。<br>史前人类是非常野蛮的，随着文明的开始，人类渐渐将自身暴力基因的作用压制了下去。<br>人类区别于其他物种的根本之处在于大脑的结构略有不同，主要表现在两个方面。第一，人脑有多个思维中枢；第二，人脑的沟通能力。<br>语言既可以被认为是人类（主动）发明的，也可以视为人类（被动)进化的必然结果。</p><p>斯坦福大学教授伊恩·莫里斯(Lan Morris)在他的《文明的度量》书中指出，只有当人类活动所创造的能量是他每天所消耗能量的两倍以上时，才有可能制作日用品，修建房屋，驯养动物，然后才能进一步发展，否则只能勉强维持生存和繁衍后代。<br>我们现在的生活不也是一样的嘛，唯有更加的努力，唯有每一天所创造的价值超过自己所消费的价值时，才可能谈进一步的发展，否则也只能勉强地生存下去。</p><h5 id="文明曙光"><a href="#文明曙光" class="headerlink" title="文明曙光"></a>文明曙光</h5><p>人类历史上第一次重大的科技革命源于农业，因为农业是早期文明地区赖以生存的基础。<br>农业阶段是早期人类发展的必经阶段，人类无法越过农业阶段，从游牧状态直接进入工业文明。<br>狩猎的谋生方式虽然在单位时间里获取能量的效率较高，但是在一个地区能过获得的总能量有限；而农耕则相反，它能获得更高的总能量，从而养活更多的人口。<br>阳光和水是农业的基础，这就是为什么早期文明均诞生在亚热带或者温带的大河流域。<br>定居下来的人不得不每日辛勤地耕作，以保证每年在收获时获得足够多的能量，来维持部落的生存和发展。从这个意义上说，人类被自己驯化的农作物拴在了那片土地上。<br>通常，发明的过程可以简单地分为两个阶段——发现阶段和发明阶段，现象（或者原理）被发现和利用原理发明出新方法、新工具。<br>从0到1的时间有时比我们想象的更加漫长。<br>远古的文明都源于便于灌溉的大河流域。最古老的文明中心——古埃及的尼罗河流域和美索不达米亚。<br>农业的发展是文明的基础，人类只有在获得稳定的农业收成之后，才有足够的剩余能量供应给非农业人口，进而建立城市，创造文明。<br>早期文明</p><ul><li>以古埃及和中华文明为代表的单纯的农耕文明，在文明中心有大一统的王朝。</li><li>以美索不达米亚和古希腊文明为代表的城邦文明，商业发达。</li></ul><p>抽象的数字和进制的发明是人类科学史上的第一次重大发明，折射出人类在科学上的重要成就。<br>信息编码的本质就是将自然界中的实体和我们大脑中的一个概念或者符号对应起来。<br>为了方便记录，图画被逐渐简化为象形的符号，这便是文字的雏形。简化的过程是漫长的，因为从形象思维到抽象思维不是一件容易的事情。文字的传播包括横向传播和纵向传播。<br>天文学，几何学起源于古埃及和美索不达米亚(古巴比伦)。<br>人类在谋生技艺上的积累和进步，逐渐使得一部分人可以从事获取食物之外的工作，并让少数人从体力劳动中解放出来，专门从事于艺术、科学和宗教活动。</p><h4 id="古代科技"><a href="#古代科技" class="headerlink" title="古代科技"></a>古代科技</h4><p>一个先有鸡还是先有蛋的问题，唯一的破局方法就是经历一个较长的积累过程，然后就会得到时间的答案。</p><h5 id="农耕文明"><a href="#农耕文明" class="headerlink" title="农耕文明"></a>农耕文明</h5><p>冶金时代——青铜时代。冶金水平是早期文明程度的标尺。<br>很多时候，文明水平不能看开始时间的早晚，而要看鼎盛时期的水平。<br>作为农业革命的副产品，手工业就随之发展起来了。<br>发明的本质不在于是否第一个发现了现象，而是找到一套行之有效的、确定的方法，保证成功率。<br>城市出现的意义很重大，因为伴随城市出现的是社会等级的划分，以及随后出现的政府。初始化是文明的标志，也是结果。</p><h5 id="文明复兴"><a href="#文明复兴" class="headerlink" title="文明复兴"></a>文明复兴</h5><p>纵观人类文明史，科学、文化的发展与信息源的丰富、传播方式的进步息息相关。<br>在某种意义上说，科学的诞生始于泰勒斯和毕达哥拉斯。<br>毕达哥拉斯将世界上的规律分为可感知的和可理喻的。所谓可感知就是实验科学得到的结果，而可理喻的则是数学中通过推理得到的结论。<br>人的思维很难摆脱直接经验的束缚。人类的认识受到时代的局限。<br>科学的突破常常需要很长的时间积累，然后才能完成这样一次爆发。<br>人类文明进步不仅取决于科技发明本身，还取于对这些发明的传承和广泛的传播，而无论是传承还是传播，都有依赖于对科技成就的完整记录。<br>大学的诞生，巴黎大学——牛津大学——剑桥大学。<br>文艺复兴时代和随后的启蒙时代。<br>科学对于技术发展的作用是非常明显的，信息对科学发展的作用是巨大的。</p><h4 id="近代科技"><a href="#近代科技" class="headerlink" title="近代科技"></a>近代科技</h4><p>文艺复兴之后，世界科技的中心从阿拉伯回到了欧洲。人类历史上的科学启蒙时代，笛卡尔总结的科学方法论。<br>知识精英阶层和民众在掌握信息方面的差距依然很大。<br>人类的发明从一种自发状态进入一种自觉状态。工业革命之前，人类的发明是靠长期的经验积累，这个过程十分漫长。在科学启蒙时代之后，以瓦特为代表的发明家主动利用科学原理进行发明，从而改变人类生活的发明在短时间内不断涌现。</p><h5 id="科学启蒙"><a href="#科学启蒙" class="headerlink" title="科学启蒙"></a>科学启蒙</h5><p>科学方法论——法国数学家、哲学家笛卡尔。</p><ul><li>第一，不盲从，不接受任何自己不清楚的真理。</li><li>第二，对于复杂的问题，尽量分解为对个简单的小问题来研究，一个个分开解决。</li><li>第三，解决这些小问题时，应该按照先易后难的次序，逐步解决。</li><li>第四，解决每一个小问题之后，再综合起来，看看是否彻底解决了原来的问题。</li></ul><p>笛卡尔将科学发展的规律总结为：</p><ul><li>1、提出问题</li><li>2、进行试验</li><li>3、从实验中得到结论并解释</li><li>4、将结论推广并且普遍化</li><li>5、在实践中找出新的问题</li></ul><p>哈维的《心血运动论》、哥白尼的《天体运行论》、牛顿的《自然哲学的数学原理》、达尔文的《物种起源》，并称为改变历史的科学巨著。</p><p>荷兰科学家华伦海特提出的“华氏温度”，瑞典天文学家安德斯·摄尔修斯提出了“摄氏温度”。<br>牛顿构建了近代三大科学体系，即以微积分为核心的近代数学、以牛顿三大定律为基础的经典物理学、以万有引力定律为基础的天文学。<br>在牛顿之后，人类才有意识地利用科学知识指导实践，这才使得自近代以来的科技进步不断加速。</p><h5 id="工业革命"><a href="#工业革命" class="headerlink" title="工业革命"></a>工业革命</h5><p>瓦特后来改进蒸汽机的想法不是来自实验，而是来自理论。<br>瓦特的成功树立了榜样——通过自己的发明创造，在改变世界的同时，也改变了自己的命运。<br>十九世纪后，生物学的突然加速，主要有两个原因：一个是仪器的进步，特别是显微镜的进步和普及；另一个则是学术界此时普遍开始自觉运用科学方法论。<br>能量守恒定律、细胞学说和进化论被恩格斯成为十九世纪的三大科学发现，不仅仅是对物理学、生物学和医学本身的重大意义，同时也确立了唯物论的科学基础。<br>对于一项发明来说，最后那个把发明变成产品的人，远比最早想到发明雏形的人重要的多。</p><h5 id="新工业"><a href="#新工业" class="headerlink" title="新工业"></a>新工业</h5><p>石油——有机化学的发展——橡胶发展——内燃机和发动机——飞机发展——武器发展——通识教育改革<br>世界上很多的重大发明都是时代的产物。</p><p>美国教育家艾略特成功将哈佛大学从一个以教授拉丁文为主的近代私塾，变成了世界一流的综合性大学。</p><h4 id="现代科技"><a href="#现代科技" class="headerlink" title="现代科技"></a>现代科技</h4><p>随着对微观世界以及遥远宇宙认识的不断加深，人类发现过去所了解的关于世界的规律不过是更广泛、更具有普遍意义的规律的特例而已。</p><h5 id="原子时代"><a href="#原子时代" class="headerlink" title="原子时代"></a>原子时代</h5><p>1905年——爱因斯坦的奇迹年，近代物理学。<br>1666年——牛顿的奇迹年，经典物理学。</p><p>迈特纳和弗里施在《自然》杂志上发表了他们的发现，并提出了“核裂变”的概念。这篇论文一共只有两页，却有划时代的意义，因为它找到了自然界存在的巨大的力量。</p><p>核反应证明了爱因斯坦的质能转换，包括核裂变和核聚变。<br>核裂变的本质是将大质量数的原子通过裂变损失质量、释放能量。<br>核聚变的本事是通过将多个氢、氦和锂这样的小质量数的原子聚合成一个大质量数的原子，更有效地释放能量。</p><h5 id="信息时代"><a href="#信息时代" class="headerlink" title="信息时代"></a>信息时代</h5><p>世界科技常常呈现出平稳快速发展和相对停滞交替的状态。<br>系统论研究的是复杂系统内部的关系。<br>控制论研究的是在一个动态的系统中，如何在很多内外部的不确定因素下，保存平衡状态的方法。<br>信息论研究的是信息的处理和通信理论，人类可以准确的度量信息的多少。</p><p>摩尔定律和安迪-比尔定律<br>摩尔定律：1965年，摩尔预测集成电路的性能每年翻一番。1975年，摩尔将预测修改为每两年翻一番。后来人们把翻番的时间改为18个月。<br>安迪-比尔定律：大概意思就是微软等软件公司的新软件总是要比从前的软件耗费更多的硬件资源，以至于完全覆盖了因特尔等硬件公司带来的硬件性能的提升。</p><h5 id="未来世界"><a href="#未来世界" class="headerlink" title="未来世界"></a>未来世界</h5><p><strong>癌症的预测性检测</strong><br><strong>基因编辑的成就与争议</strong><br><strong>可控核聚变还要多久</strong><br><strong>“新生产关系”区块链</strong><br><strong>利用量子通信实现数据安全</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;吴军博士的《全球科技通史》一书从科技视角俯瞰历史，从历史视角理解科技，便于我们更加深刻的理解科技的发展史和其本质。&lt;br&gt;《全球科技通史》一
      
    
    </summary>
    
      <category term="读书" scheme="https://2694048168.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="吴军" scheme="https://2694048168.github.io/tags/%E5%90%B4%E5%86%9B/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://2694048168.github.io/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://2694048168.github.io/Linux常用命令/</id>
    <published>2019-08-17T10:49:38.000Z</published>
    <updated>2020-02-19T08:08:58.845Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Liunx-Command"><a href="#Liunx-Command" class="headerlink" title="Liunx-Command"></a>Liunx-Command</h4><h5 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h5><p><strong>命令 [-选项] [参数]     例如：ls -la /etc</strong></p><h6 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h6><ul><li>个别命令使用不遵循此格式</li><li>当有多个选项是，可以写在一起</li><li>简化选项与完整选项   (如-a等于–all)</li><li>Liunx中对大小写敏感    </li></ul><h5 id="目录处理命令：ls"><a href="#目录处理命令：ls" class="headerlink" title="目录处理命令：ls"></a>目录处理命令：ls</h5><p>名称：ls<br>英文：list<br>功能：显示目录文件<br>选项：</p><ul><li>-a(all)  显示目录下所有文件，包括以.开头的隐藏文件</li><li>-l(long)  以详细信息显示</li><li>-d(directory) 查看目录属性   </li><li>-R     以递归的形式连同子目录中的内容一起列出</li></ul><p>注释：在Ubuntu下，目录是蓝色高亮显示，可执行程序是绿色高亮显示，压缩包是红色高亮显示</p><h5 id="Linux文件"><a href="#Linux文件" class="headerlink" title="Linux文件"></a>Linux文件</h5><h6 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h6><ul><li>-表示普通文件</li><li>d表示目录</li><li>l表示软链接</li><li>b块设备文件</li><li>c字符设备文件</li><li>s socket文件</li><li>网络套接字</li><li>p管道文件</li></ul><h6 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h6><ul><li>r(read)——表示有可读权限 </li><li>w(write)——表示有可写权限</li><li>e(execute)——表示有可执行权限</li><li>- ——表示没有该权限</li><li>u(user)——文件的所有者</li><li>g(group)——文件的所属组 </li><li>o(other)——文件的其他人</li></ul><p><strong>例如：-rw-r–r–</strong><br>&emsp;&emsp;表示此二进制普通文件的所有者对该文件可读(r)可写(w)不可执行(-)，所属组对该文件可读(r)不可写(-)不可执行(-)，其他人对该文件可读(r)不可写(-)不可执行(-)。    </p><h5 id="目录处理命令：mkdir"><a href="#目录处理命令：mkdir" class="headerlink" title="目录处理命令：mkdir"></a>目录处理命令：mkdir</h5><p>名称：mkdir<br>英文：make directories<br>功能：创建新目录<br>选项：-p  递归创建</p><h5 id="目录处理命令：cd"><a href="#目录处理命令：cd" class="headerlink" title="目录处理命令：cd"></a>目录处理命令：cd</h5><p>名称：cd<br>英文：change directory<br>功能：切换目录，进入指定目录<br>注意：”.“表示当前目录，”..“表示上一级目录，“/”表示根目录    </p><h5 id="目录处理命令：pwd"><a href="#目录处理命令：pwd" class="headerlink" title="目录处理命令：pwd"></a>目录处理命令：pwd</h5><p>名称：pwd<br>英文：print working directory<br>功能：显示当前目录的完全路径<br>注意：路径有绝对路径和相对路径两种<br>路径：是指用来标识一个文件在操作系统的文件系统中存储位置的<br>全路径=路径+文件名：pathname=path+file_name<br>绝对路径：路径是从绝对位置开始的，譬如Windows中从某一个盘符开始c，Liunx中从根目录/开始<br>相对路径：指明路径的时候，是从当前所在的位置开始的    </p><h5 id="目录处理命令：cp"><a href="#目录处理命令：cp" class="headerlink" title="目录处理命令：cp"></a>目录处理命令：cp</h5><p>名称：cp<br>英文：copy<br>功能：复制文件或者目录<br>语法：cp -r/p 原文件或目录 目标目录<br>选项：[-r]:复制目录   [-p]保留文件属性    </p><h5 id="目录处理命令：mv"><a href="#目录处理命令：mv" class="headerlink" title="目录处理命令：mv"></a>目录处理命令：mv</h5><p>英文：move<br>功能：剪切文件，改名<br>语法：mv 原文件或目录 目标目录    </p><h5 id="目录处理命令：rm"><a href="#目录处理命令：rm" class="headerlink" title="目录处理命令：rm"></a>目录处理命令：rm</h5><p>英文：remove<br>功能：删除文件<br>选项：[-r]：删除目录  [-f]：强制执行    </p><h5 id="文件处理命令："><a href="#文件处理命令：" class="headerlink" title="文件处理命令："></a>文件处理命令：</h5><p>touch：功能：创建空文件<br>cat：显示文件内容<br>more:分页显示文件内容<br>&lt;空格或者f：翻一页   Enter：一行一行   q或Q：退出&gt;<br>less：分页显示内容&lt;可以向上翻页  可以搜索关键词：/word  n：next&gt;<br>head -n 行数 filename：显示文件前几行&lt;默认十行&gt;<br>tail -n 行数 filename：显示文件后几行&lt;默认十行&gt;<br>[-f]：动态显示文件末尾内容，一般用于监控服务器的日志文件内容    </p><h5 id="文件处理命令：ln"><a href="#文件处理命令：ln" class="headerlink" title="文件处理命令：ln"></a>文件处理命令：ln</h5><p>英文：link<br>功能：生成链接文件<br>选项：[-s]:生成软链接  无选项则是生成硬链接<br>语法：ln -s 原文件 目标文件<br>硬链接计数——是指一个磁盘文件被链接的次数，当一个文件的硬链接计数为零时，则表示文件完全从磁盘中删除    </p><h5 id="权限管理命令：chmod"><a href="#权限管理命令：chmod" class="headerlink" title="权限管理命令：chmod"></a>权限管理命令：chmod</h5><p>英文：change the permssions mode of a file<br>功能：改变文件或目录的权限<br>注意：</p><ul><li>权限数字表示：r——4、w——2、x——1</li><li>例如：chmod 777 filename</li><li>只有root、文件所有者才能修改文件权限</li><li>[-R]：递归修改&lt;目录下所有文件权限&gt;</li></ul><p>&emsp;&emsp;在Linux中，可读、可写和可执行的权限对于文件和目录而言有着不同的意义，下面的两个表格简述了三种权限对于文件和目录的不同功能意思以及对应的可用的Linux常用命令。</p><!--Table--><table><thead><tr><th align="center">字母</th><th align="center">权限</th><th align="center">文件</th><th align="center">目录</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">可读</td><td align="center">可查看文件内容</td><td align="center">可列出目录中内容</td></tr><tr><td align="center">w</td><td align="center">可写</td><td align="center">可修改文件内容</td><td align="center">可在目录中创建、删除文件</td></tr><tr><td align="center">x</td><td align="center">可执行</td><td align="center">可执行文件(脚本)</td><td align="center">可以进入目录</td></tr></tbody></table><table><thead><tr><th align="center"></th><th align="center">权限</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">文件</td><td align="center">r</td><td align="center">cat/more/head/tail/less</td></tr><tr><td align="center">文件</td><td align="center">w</td><td align="center">vi/vim</td></tr><tr><td align="center">文件</td><td align="center">x</td><td align="center">script cammand</td></tr><tr><td align="center">目录</td><td align="center">r</td><td align="center">ls</td></tr><tr><td align="center">目录</td><td align="center">w</td><td align="center">touch/mkdir/rmdir/rm</td></tr><tr><td align="center">目录</td><td align="center">x</td><td align="center">cd</td></tr></tbody></table><h5 id="权限管理命令："><a href="#权限管理命令：" class="headerlink" title="权限管理命令："></a>权限管理命令：</h5><p>名称：chown<br>英文：change file ownership<br>功能：改变文件或目录的所有者<br>语法：chown user filename<br>注意：只有root才能修改chown chgrp<br>名称：chgrp<br>功能：改变文件或目录的所属组<br>英文：change file group ownership<br>语法：chgrp group filename    </p><h5 id="权限管理命令-umask"><a href="#权限管理命令-umask" class="headerlink" title="权限管理命令:umask"></a>权限管理命令:umask</h5><p>英文：the user file-creation mask<br>路径：shell内置命令<br>语法：umask -S<br>选项：-S:以rwx形式显示新建文件缺省权限<br>功能：显示、设置新建文件的缺省权限<br>掩码：777-022=755&lt;老版本的liunx中有掩码概念&gt;    </p><h5 id="帮助命令：man"><a href="#帮助命令：man" class="headerlink" title="帮助命令：man"></a>帮助命令：man</h5><p>英文：manual&lt;手册页&gt;</p><h5 id="关机命令：shutdown"><a href="#关机命令：shutdown" class="headerlink" title="关机命令：shutdown"></a>关机命令：shutdown</h5><p>选项：</p><ul><li>[-h]:关机，语法：shutdown -h now </li><li>[-r]：重启，语法：shutdown -r now</li></ul><h5 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h5><p>which——查看命令所在位置，例如：which ls/<br>tree——以树的形式查看目录内容，例如：tree /etc /</p><h5 id="网络命令："><a href="#网络命令：" class="headerlink" title="网络命令："></a>网络命令：</h5><ul><li><p>write<br>Linux write命令用于传讯息给其他使用者<br>使用权限：所有使用者<br>语法：write user [ttyname]<br>参数说明：<br>user : 预备传讯息的使用者帐号<br>ttyname : 如果使用者同时有两个以上的 tty 连线，可以自行选择合适的 tty 传讯息</p></li><li><p>wall<br>Linux wall命令会将讯息传给每一个 mesg 设定为 yes 的上线使用者。当使用终端机介面做为标准传入时, 讯息结束时需加上 EOF (通常用 Ctrl+D)<br>使用权限：所有使用者<br>语法：wall [ message ]</p></li><li><p>ping<br>Linux ping命令用于检测主机<br>执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。<br>语法：ping [-dfnqrRv][-c&lt;完成次数&gt;][-i&lt;间隔秒数&gt;][-I&lt;网络界面&gt;][-l&lt;前置载入&gt;][-p&lt;范本样式&gt;][-s&lt;数据包大小&gt;][-t&lt;存活数值&gt;][主机名称或IP地址]<br>参数说明：</p></li><li><p>-d 使用Socket的SO_DEBUG功能。</p></li><li><p>-c&lt;完成次数&gt; 设置完成要求回应的次数。</p></li><li><p>-f 极限检测。</p></li><li><p>-i&lt;间隔秒数&gt; 指定收发信息的间隔时间。</p></li><li><p>-I&lt;网络界面&gt; 使用指定的网络接口送出数据包。</p></li><li><p>-l&lt;前置载入&gt; 设置在送出要求信息之前，先行发出的数据包。</p></li><li><p>-n 只输出数值。</p></li><li><p>-p&lt;范本样式&gt; 设置填满数据包的范本样式。</p></li><li><p>-q 不显示指令执行过程，开头和结尾的相关信息除外。</p></li><li><p>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。</p></li><li><p>-R 记录路由过程。</p></li><li><p>-s&lt;数据包大小&gt; 设置数据包的大小。</p></li><li><p>-t&lt;存活数值&gt; 设置存活数值TTL的大小。</p></li><li><p>-v 详细显示指令的执行过程。</p></li><li><p>mail<br>Linux服务器mail程序本身就是调用sendmail来进行邮件发送的，sendmail服务器提供对外的邮件发送功能。CentOS默认不能发送邮件，需要发送邮件的童鞋可以安装一个sendmail程序</p></li><li><p>setup<br>Linux setup命令设置公用程序，是一个启动图形设置系统的命令<br>setup 命令：用来配置X，打印设置，时区设置，系统服务，网络配置，配置，防火墙配置，验证配置，鼠标配置<br>语法：setup<br>setup是一个设置公用程序，提供图形界面的操作方式。在setup中可设置7类的选项：</p></li><li><p>１.登陆认证方式</p></li><li><p>２.键盘组态设置</p></li><li><p>３.鼠标组态设置</p></li><li><p>４.开机时所要启动的系统服务</p></li><li><p>５.声卡组态设置</p></li><li><p>６.时区设置</p></li><li><p>７.X Windows组态设置</p></li><li><p>ifconfig<br>Linux ifconfig命令用于显示或设置网络设备<br>ifconfig可设置网络设备的状态，或是显示目前的设置<br>语法：ifconfig [网络设备][down up -allmulti -arp -promisc][add&lt;地址&gt;][del&lt;地址&gt;][&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;][io_addr&lt;I/O地址&gt;][irq&lt;IRQ地址&gt;][media&lt;网络媒介类型&gt;][mem_start&lt;内存地址&gt;][metric&lt;数目&gt;][mtu&lt;字节&gt;][netmask&lt;子网掩码&gt;][tunnel&lt;地址&gt;][-broadcast&lt;地址&gt;][-pointopoint&lt;地址&gt;][IP地址]<br>参数说明：</p></li><li><p>add&lt;地址&gt; 设置网络设备IPv6的IP地址。</p></li><li><p>del&lt;地址&gt; 删除网络设备IPv6的IP地址。</p></li><li><p>down 关闭指定的网络设备。</p></li><li><p>&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt; 设置网络设备的类型与硬件地址。</p></li><li><p>io_addr&lt;I/O地址&gt; 设置网络设备的I/O地址。</p></li><li><p>irq&lt;IRQ地址&gt; 设置网络设备的IRQ。</p></li><li><p>media&lt;网络媒介类型&gt; 设置网络设备的媒介类型。</p></li><li><p>mem_start&lt;内存地址&gt; 设置网络设备在主内存所占用的起始地址。</p></li><li><p>metric&lt;数目&gt; 指定在计算数据包的转送次数时，所要加上的数目。</p></li><li><p>mtu&lt;字节&gt; 设置网络设备的MTU。</p></li><li><p>netmask&lt;子网掩码&gt; 设置网络设备的子网掩码。</p></li><li><p>tunnel&lt;地址&gt; 建立IPv4与IPv6之间的隧道通信地址。</p></li><li><p>up 启动指定的网络设备。</p></li><li><p>-broadcast&lt;地址&gt; 将要送往指定地址的数据包当成广播数据包来处理。</p></li><li><p>-pointopoint&lt;地址&gt; 与指定地址的网络设备建立直接连线，此模式具有保密功能。</p></li><li><p>-promisc 关闭或启动指定网络设备的promiscuous模式。</p></li><li><p>[IP地址] 指定网络设备的IP地址。</p></li><li><p>[网络设备] 指定网络设备的名称。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Liunx-Command&quot;&gt;&lt;a href=&quot;#Liunx-Command&quot; class=&quot;headerlink&quot; title=&quot;Liunx-Command&quot;&gt;&lt;/a&gt;Liunx-Command&lt;/h4&gt;&lt;h5 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://2694048168.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vi/Vim使用方法及命令</title>
    <link href="https://2694048168.github.io/Vi-Vim%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E5%91%BD%E4%BB%A4/"/>
    <id>https://2694048168.github.io/Vi-Vim使用方法及命令/</id>
    <published>2019-08-17T10:29:12.000Z</published>
    <updated>2020-04-10T08:42:17.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h3><p>&emsp;&emsp;在使用Linux系统时，特别是对于计算科学领域的学者来说，使用Linux系统是经常的事情。虽然如今Linux的桌面环境（如KDE、Gome等等）发展的很好，而且也有良好的用户接口界面，不过笔者依然习惯在终端修改一些配置文件（包括系统配置文件、一些软件的配置文件、一些软件的环境变量等等）和编写一些简单的Bash Shell脚本，用于辅助自己的工作和学习，这样能有利于效率。<br>&emsp;&emsp;使用Linux系统，会经常使用一些常用的编译工具，这样有利于我们的开发效率。比如你肯定听过的一些工具，make、autotool、cmake、gcc、g++、GNU Gcc等等，这些应该是学习或者创建工程时会用到的，或者听过Makefile文件、CMakelists.txt文件等等。<br>&emsp;&emsp;初遇时，这些工具很难，那是有原因的：我们经常使用Windows系统而且使用集成开发环境（IDE）进行学习，故而忽略了一个程序是如何从一个自己编写的文本文件变成了可执行的程序，这其中的具体细节以及是如何工作的，没有认真搞懂。<br>&emsp;&emsp;笔者并没有任何的鄙视，因为自己也是学艺不精。但是我觉得有一个良好的基础，弄懂真正的工作原理，这样使用哪一种计算机语言来实现自己的想法，这反而是一个简单的事情了。现在大部分的学习者都不喜欢这些枯燥的无味的原理理论，而仅仅专注于计算机语言语法本身了，故而在学习完语言语法本身后，又觉得不能做任何事。笔者十分赞同，想要真正有所建树，必须有良好的坚实的理论基础。</p><p><strong>掌中星辰转日月，手心苍穹天外天</strong><br><strong>Stay Hngry，Stay Foolish</strong></p><h3 id="vim简介-文本编辑器"><a href="#vim简介-文本编辑器" class="headerlink" title="vim简介(文本编辑器)"></a>vim简介(文本编辑器)</h3><p>&emsp;&emsp;Vi/Vim是功能强大的全屏幕文本编辑器，是在liunx和Unix上常用的文本编辑器。作用是建立、编辑、显示文本文件，vim没有菜单，只有命令。<br>&emsp;&emsp;Liunx下编辑神器Vi/Vim，Vim是Vi IMproved。Vi/Vim的整个配置文件是Vimrc，其中rc：run command的意思。了解Vim的寄存器以及其工作原理，利用Vim进行增删查改操作，探寻Vim的组合规律。<br><strong>Vim还有其高级功能</strong></p><ul><li>缓冲区与多文件编辑</li><li>多窗口与标签分组</li><li>文本对象和宏</li><li>Visual模式</li></ul><h4 id="Vim模式"><a href="#Vim模式" class="headerlink" title="Vim模式"></a>Vim模式</h4><p><strong>命令模式、输入模式</strong></p><ul><li>输入模式：<br>&emsp;&emsp;进入vi/vim后，按下键盘的a或者i，则进入输入模式,(在终端的下面末行会显示”–insert–“，提示此时处于输入状态)</li><li>命令模式：<br>&emsp;&emsp;在输入模式下，按下键盘的ESC，则进入命令模式,(在终端的下面末行输入命令，故又称末行模式)</li></ul><h4 id="vim常用命令"><a href="#vim常用命令" class="headerlink" title="vim常用命令"></a>vim常用命令</h4><h5 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h5><ul><li>a：在光标所在字符后插入</li><li>A：在光标所在行尾插入</li><li>i：在光标所在字符前插入</li><li>I：在光标所在行首插入</li><li>o：在光标下插入新行</li><li>O：在光标上插入新行</li></ul><h5 id="定位命令"><a href="#定位命令" class="headerlink" title="定位命令"></a>定位命令</h5><ul><li>：set nu:设置行号</li><li>：set nonu：取消行号</li><li>gg：定位到第一行</li><li>G：定位到最后一行</li><li>nG：定位到第n行</li><li>：n：定位到第n行</li><li>$：定位到行尾</li><li>0：点位到行首</li></ul><h5 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h5><ul><li>x：删除光标所在处字符</li><li>nx：删除光标所在处后n个字符</li><li>dd：删除光标所在行</li><li>ndd：删除光标开始的n行</li><li>dG：删除光标所在行到文件末尾内容</li><li>D：删除光标所在处到行尾内容</li><li>：n1,n2d:删除指定范围的行</li></ul><h5 id="复制和剪切命令"><a href="#复制和剪切命令" class="headerlink" title="复制和剪切命令"></a>复制和剪切命令</h5><ul><li>yy：复制当前行</li><li>nyy：复制当前行开始的以下n行</li><li>p、P：粘贴在当前光标所在的行下、行上</li><li>dd：剪切当前行</li><li>ndd：剪切当前行开始的以下n行</li></ul><h5 id="替换和取消命令"><a href="#替换和取消命令" class="headerlink" title="替换和取消命令"></a>替换和取消命令</h5><ul><li>r：取代光标所在处的字符</li><li>R：从光标所在行处开始替换字符，直到按Esc键结束</li><li>u：取消上一步操作（撤销）</li></ul><h5 id="搜索和搜索替换命令"><a href="#搜索和搜索替换命令" class="headerlink" title="搜索和搜索替换命令"></a>搜索和搜索替换命令</h5><ul><li>/string:搜索指定字符串</li><li>：set ic：搜索时忽略大小写</li><li>n：搜索指定字符串的下一个出现位置</li><li>：%s/old_string/new_string</li><li>/g:全文搜索替换指定字符串</li><li>：n1，n2s/old_string/new_string</li><li>/c:在一定范围内替换指定字符串</li><li>/c:是指替换时有询问确认        </li><li>/g:是指替换时无询问确认</li></ul><h5 id="保存和退出命令"><a href="#保存和退出命令" class="headerlink" title="保存和退出命令"></a>保存和退出命令</h5><ul><li>：w：保存修改</li><li>：w new_filename：另存为指定文件</li><li>：wq：保存修改并退出</li><li>ZZ：快捷键，保存修改并退出</li><li>：q!:不保存修改并强制退出</li><li>：wq!:保存修改并强制退出（文件所有者及root可使用）</li></ul><h3 id="Liunx-gcc-tool-chain-工具链"><a href="#Liunx-gcc-tool-chain-工具链" class="headerlink" title="Liunx-gcc tool_chain(工具链)"></a>Liunx-gcc tool_chain(工具链)</h3><h4 id="1、预处理"><a href="#1、预处理" class="headerlink" title="1、预处理"></a>1、预处理</h4><p><strong>生成&lt;.i&gt;文件，通过选项-E可以使编译器在预处理结束时停止编译</strong></p><ul><li>例如：gcc -E -o hello.i hello.c</li></ul><h4 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h4><p><strong>生成&lt;.s&gt;汇编代码文件，通过选项-S可以使gcc在进行编译后停止</strong></p><ul><li>例如：gcc -S -o hello.s hello.c</li></ul><h4 id="3、汇编"><a href="#3、汇编" class="headerlink" title="3、汇编"></a>3、汇编</h4><p><strong>生成&lt;.o&gt;的目标文件，是机器语言代码《二进制》，当一个程序由多个代码文件    构成时，每个文件都要先完成汇编工作，生成.o目标文件后，才能进行链接，可以通过选项-C生成目标文件</strong></p><ul><li>例如：gcc -C -o hello.o helllo.c</li></ul><h4 id="4、链接"><a href="#4、链接" class="headerlink" title="4、链接"></a>4、链接</h4><p><strong>将程序的所有机器代码的目标文件链接，使操作系统能加载为可执行文件</strong></p><ul><li>例如：gcc -o hello hello.c</li><li>或者：gcc hello.c -o hello</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;工欲善其事，必先利其器&quot;&gt;&lt;a href=&quot;#工欲善其事，必先利其器&quot; class=&quot;headerlink&quot; title=&quot;工欲善其事，必先利其器&quot;&gt;&lt;/a&gt;工欲善其事，必先利其器&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在使用Linux系统时，特别是对于计算科学领
      
    
    </summary>
    
      <category term="工具" scheme="https://2694048168.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Vi/Vim" scheme="https://2694048168.github.io/tags/Vi-Vim/"/>
    
  </entry>
  
  <entry>
    <title>Linux操作系统简介</title>
    <link href="https://2694048168.github.io/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/"/>
    <id>https://2694048168.github.io/Linux操作系统简介/</id>
    <published>2019-08-17T09:10:58.000Z</published>
    <updated>2020-02-19T08:09:23.609Z</updated>
    
    <content type="html"><![CDATA[<h4 id="operating-system-OS-：操作系统"><a href="#operating-system-OS-：操作系统" class="headerlink" title="operating system (OS)：操作系统"></a>operating system (OS)：操作系统</h4><h5 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h5><p>&emsp;&emsp;操作系统 (operating system) 是管理和控制计算机硬件与软件资源的程序，从计算机软硬件角度来说，操作系统是一种软件方面的，是一台计算机必不可少的系统级软件。OS 也是用户和计算机的接口，也是计算机硬件和软件的接口。OS 是直接控制和管理计算机硬件、软件资源，合理对各类作业进行调度，以方便用户使用的程序集合。</p><h5 id="主流操作系统"><a href="#主流操作系统" class="headerlink" title="主流操作系统"></a>主流操作系统</h5><p><strong>常见主流的操作系统</strong></p><ul><li>Windows： Microsoft 公司开发的图形窗口界面 (GUI)，多任务的操作系统</li><li>Liun：多用户、多任务操作系统，开源的内核源代码</li><li>Unix：多用户、多任务操作系统，支持多种处理器架构的分时操作系统</li><li>Mac OS：是一套运行在苹果 Macintosh 系列电脑的操作系统</li><li>Android：以 Liunx 为基础的支持手机端的操作系统，现在由 Google收购</li><li>iOS：是苹果公司开发的手持移动操作系统</li><li>DOS：最早期的操作系统，完全的命令行 Command line 指令模式</li><li>鸿蒙OS：华为公司研发的开源的操作系统，主用于物联网等工业以及商业方面</li></ul><p><strong>操作系统分类</strong></p><ul><li>桌面操作系统</li><li>服务器操作系统</li><li>嵌入式操作系统</li><li>分时操作系统</li><li>批处理操作系统</li></ul><p><strong>组成部分</strong><br>操作系统OS由内核、驱动程序、接口库、外设组成。以现代观点而言，一个标准 PC 的 OS 有以下功能：</p><ul><li>进程管理 (Processing management)</li><li>内存管理 (Memory management)</li><li>文件系统 (File system)</li><li>网络通讯 (Networking)</li><li>安全机制 (Security)</li><li>用户界面 (User interface)</li><li>驱动程序 (Device drivers)</li></ul><h4 id="Liunx-introduction：Linux简介"><a href="#Liunx-introduction：Linux简介" class="headerlink" title="Liunx-introduction：Linux简介"></a>Liunx-introduction：Linux简介</h4><h5 id="Liunx-VS-Unix"><a href="#Liunx-VS-Unix" class="headerlink" title="Liunx VS Unix"></a>Liunx VS Unix</h5><p>&emsp;&emsp;Linux 被称为“类 Unix”操作系统，(You’ve heard Linux called a ”Unix-like” operating system)<br>&emsp;&emsp;Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。<br>&emsp;&emsp;Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。伴随着互联网的发展，Linux得到了来自全世界软件爱好者、组织、公司的支持。它除了在服务器操作系统方面保持着强劲的发展势头以外，在个人电脑、嵌入式系统上都有着长足的进步。使用者不仅可以直观地获取该操作系统的实现机制，而且可以根据自身的需要来修改完善这个操作系统，使其最大化地适应用户的需要。<br>&emsp;&emsp;Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux操作系统不仅仅是被网络运维人员当作服务器使用，Linux既可以当作服务器，又可以当作网络防火墙是Linux的 一大亮点。<br>&emsp;&emsp;Linux与其他操作系统相比 ，具有开放源码、没有版权、技术社区用户多等特点 ，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈 ，经过适当的配置就可实现路由器的功能。这些特点使得Linux成为开发路由交换设备的理想开发平台。</p><h5 id="liunx-特点"><a href="#liunx-特点" class="headerlink" title="liunx 特点"></a>liunx 特点</h5><ul><li>基本思想<br>&emsp;&emsp;Linux的基本思想有两点：第一，一切都是文件；第二，每个软件都有确定的用途。其中第一条详细来讲就是系统中的所有都归结为一个文件，包括命令、硬件和软件设备、操作系统、进程等等对于操作系统内核而言，都被视为拥有各自特性或类型的文件。至于说Linux是基于Unix的，很大程度上也是因为这两者的基本思想十分相近。</li><li>开源性<br>&emsp;&emsp;Linux是一款开放源代码的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其源代码。这是其他的操作系统所做不到的。正是由于这一点，来自全世界的无数程序员参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。</li><li>完全兼容POSIX1.0标准<br>&emsp;&emsp;这使得可以在Linux下通过相应的模拟器运行常见的DOS、Windows的程序。这为用户从Windows转到Linux奠定了基础。许多用户在考虑使用Linux时，就想到以前在Windows下常见的程序是否能正常运行，这一点就消除了他们的疑虑。</li><li>多用户、多任务<br>&emsp;&emsp;Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。多任务则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。</li><li>良好的界面<br>&emsp;&emsp;Linux同时具有字符界面和图形界面。在字符界面用户可以通过键盘输入相应的指令来进行操作。它同时也提供了类似Windows图形界面的X-Window系统，用户可以使用鼠标对其进行操作。在X-Window环境中就和在Windows中相似，可以说是一个Linux版的Windows。</li><li>支持多种平台<br>&emsp;&emsp;Linux可以运行在多种硬件平台上，如具有x86、680x0、SPARC、Alpha等处理器的平台。此外Linux还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒或游戏机上。2001年1月份发布的Linux 2.4版内核已经能够完全支持Intel64位芯片架构。同时Linux也支持多处理器技术。多个处理器同时工作，使系统性能大大提高。<h4 id="Linux简章"><a href="#Linux简章" class="headerlink" title="Linux简章"></a>Linux简章</h4>&emsp;&emsp;Linux（[/lɪnəks/]是基于Linux内核的开源类Unix操作系统家族里面最出色的一员。Linux操作系统内核于1991年9月17日首次由Linus Torvalds本人发布。我们通常所指的Linux是打包了Linux内核和Linux外围软件包的发行版本。<br>&emsp;&emsp;Linux发行版包括Linux内核和支持系统软件和库，其中许多系统软件和系统库都是由GNU Project提供的。许多Linux发行版在其发行版本的名称中使用“Linux”一词，来强调是用了Linus本人的内核开发的，而自由软件基金会使用名称GNU / Linux来强调GNU软件的重要性。<br>&emsp;&emsp;Linux最初是为基于Intelx86架构的个人计算机开发的，但后来被移植到比其他任何操作系统更多的平台上。Linux是服务器和其他大型铁系统（如大型计算机）上的领先操作系统，也是TOP500超级计算机上使用的唯一操作系统（自2017年11月起逐渐淘汰所有竞争对手）大约2.3％的台式计算机使用它。运行基于Linux内核的Chrome操作系统的Chromebook占据了美国K-12教育市场的主导地位，占美国笔记本电脑销售额低于300美元的近20％。<br>&emsp;&emsp;Linux也可以在嵌入式系统上运行，即其操作系统通常内置在固件中并且高度适合系统的设备。这包括路由器，自动化控制，电视，数字视频录像机，视频游戏机和智能手表。许多智能手机和平板电脑运行Android和其他Linux衍生产品。由于Android在智能手机上的主导地位，Linux拥有所有通用操作系统的最大安装基础。<br>&emsp;&emsp;Linux是免费和开源软件协作的最突出的例子之一。源代码可以根据其各自的许可条款（例如GNU通用公共许可证）由任何人商业或非商业地使用，修改和分发。</li><li>目前流行的Linux发行版包括Debian，Fedora和Ubuntu</li><li>商业发行版包括Red Hat Enterprise Linux和SUSE Linux Enterprise Server</li><li>桌面Linux发行版包括一个窗口系统，如X11或Wayland，以及一个桌面环境，如GNOME或KDE Plasma</li><li>用于服务器的发行版可能完全省略图形，或包含一个解决方案堆栈，如LAMP</li><li>因为Linux可以自由再发行，所以任何人都可以出于任何目的创建发行版</li></ul><h4 id="GNU简介"><a href="#GNU简介" class="headerlink" title="GNU简介"></a>GNU简介</h4><p><strong>GNU 是“GNU is Not Unix”的递归缩写</strong></p><!--超链接--><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR05V" title="https://en.wikipedia.org/wiki/GNU">GNU维基百科<i class="fa fa-external-link"></i></span><br><strong>自由软件基金会 (Free Software Foundation)</strong><br>&emsp;the history of Unix and the rise of Linux and the GNU/Free Software Foundation underpinnings of a free and open source alternative to Unix.<br>Liunx core or kernel and released version<br>&emsp;Whether you use a Debian based Linux distribution such as Debian,Ubuntu,Mint or SolyDX, or you use a Red Hat based Linux distribution such asFedora or CentOS. the way that applications are installed onto your computer are the same.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;operating-system-OS-：操作系统&quot;&gt;&lt;a href=&quot;#operating-system-OS-：操作系统&quot; class=&quot;headerlink&quot; title=&quot;operating system (OS)：操作系统&quot;&gt;&lt;/a&gt;operating 
      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://2694048168.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux最佳发行版推荐</title>
    <link href="https://2694048168.github.io/Linux%E6%9C%80%E4%BD%B3%E5%8F%91%E8%A1%8C%E7%89%88%E6%8E%A8%E8%8D%90/"/>
    <id>https://2694048168.github.io/Linux最佳发行版推荐/</id>
    <published>2019-08-17T08:41:30.000Z</published>
    <updated>2020-02-19T08:09:55.301Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>&emsp;&emsp;2019年度最佳Linux发行版，Linux版本选择指南。Linux的内核是开源的，在开源的社区里提供了很多发行版本供我们选择，但对于新手来说还是比较难以下手。笔者提供自己最常用的的Linux发行版本指南，希望可以帮助你选择最适合的Linux发行版，以满足您的日常工作需求。<br>&emsp;&emsp;对于一个开发人员而言，会经常使用基于Linux的操作系统来完成日常工作和开发东西。我们进行选择Linux发行版进行编程的主要考虑因素是兼容性、低功耗、稳定性和灵活性。故而如 Ubuntu和Debian两款发行版已经成为了首选。当然还有其它一些很好的选择如 openSUSE、Arch Linux 、Kali Liunx等等。</p><!--图片链接--><p><img src="/images/linux-logo.jpg" alt="self"></p><h4 id="适用于编程的Linux发行版：Debian"><a href="#适用于编程的Linux发行版：Debian" class="headerlink" title="适用于编程的Linux发行版：Debian"></a>适用于编程的Linux发行版：Debian</h4><p>&emsp;&emsp;笔者不得不承认，大多数Linux用户都是开发者或开源爱好者，使用Linux主要就是来开发新的东西，不然都去使用Windows了。当然许多Linux发行版都符合程序员的使用要求，我们用户可以安装所有需要的工具，但笔者认为Debian GNU/Linux是最好的选择。<br>&emsp;&emsp;Debian中含有大量的软件包，提供良好的稳定性和大量的教程，帮助开发人员解决问题。Debian因其定期测试、更新和坚如磐石在稳定性而享有盛誉，这种稳定性使程序员可以放心地展开开发工作。Debian测试分支，它有所有最新的软件，并且非常稳定。适合高级程序员和系统管理员。但请注意，Debian只推荐给有Linux工作经验的程序员。 针对初学者新手而言，不推荐使用。Debian 有很多开源库，另外，它的 .deb 软件包管理也是值得推荐的一点。目前最新版本是Debian GNU/Linux 10。</p><!--图片链接--><p><img src="/images/Debian.jpg" alt="self"></p><h4 id="强大PC端或者笔记本推荐的Linux发行版：Ubuntu"><a href="#强大PC端或者笔记本推荐的Linux发行版：Ubuntu" class="headerlink" title="强大PC端或者笔记本推荐的Linux发行版：Ubuntu"></a>强大PC端或者笔记本推荐的Linux发行版：Ubuntu</h4><p>&emsp;&emsp;Canonical的Ubuntu在开源世界中是不需要任何介绍，每一个人都知道的，其基于 Debian 架构，在稳定性和新功能方向都得到了很好的平衡。对于功能强大的个人电脑PC和笔记本电脑，运行GNOME桌面的旗舰Ubuntu是完美的。有着完美的界面，Ubuntu就是Liunx世界里的Windows，笔者强烈建议新手用户使用。随着Snap的引入，安装应用程序变得更加舒适，同时Ubuntu还拥有一个蓬勃发展的用户社区和论坛，你可以在其中找到任何问题的答案。总的来说，Ubuntu是一个功能非常强大的Linux发行版，可以让您多任务并高效地完成工作。<br><strong>笔者例举几个Ubuntu的优点：</strong></p><ul><li>有很多软件提供使用</li><li>有广泛的社区支持和论坛支持</li><li>用户界面友好且功能强大</li><li>Ubuntu已经成为Linux桌面场景的一大亮点</li><li>Ubuntu 也支持流行的 .deb 包管理系统</li></ul><!--图片链接--><p><img src="/images/ubuntu.jpg" alt="self"></p><h4 id="Linux服务器端最佳选择发行版：CentOS"><a href="#Linux服务器端最佳选择发行版：CentOS" class="headerlink" title="Linux服务器端最佳选择发行版：CentOS"></a>Linux服务器端最佳选择发行版：CentOS</h4><p>&emsp;&emsp;CentOS由于它是从RHEL源代码编译的，所以为RHEL构建的大多数商业软件都可以在 CentOS 上运行，这是CentOS的强大优点之一。CentOS的安装和设置过程几乎就像 Fedora 一样，CentOS大量的红帽软件集合和CentOS存储库能满足不同的软件需求。同时CentOS允许使用Xen虚拟化来开发应用程序。CentOS使用Yum进行软件包的管理。RedHat在Linux世界中享有独特的企业竞争优势，而CentOS则是在不花费任何费用的开源的情况下获得RedHat好处的方法。简单来说，CentOS就是社区支持的RedHat。</p><!--图片链接--><p><img src="/images/centos.jpg" alt="self"></p><h4 id="渗透测试最佳Liunx发行版：Arch-Linux"><a href="#渗透测试最佳Liunx发行版：Arch-Linux" class="headerlink" title="渗透测试最佳Liunx发行版：Arch Linux"></a>渗透测试最佳Liunx发行版：Arch Linux</h4><p>&emsp;&emsp;Arch Linux是高度可定制的，这是许多Liunx爱好者最喜欢研究的地方，也是最受欢迎的优点之一。Arch Linux是硬核Linux爱好者最喜爱的Linux发行版，它随附有Linux内核和软件包管理器。如果需要做一些渗透测试工作，可以将Arch Linux安装转换成BlackArch安装模式。</p><!--图片链接--><p><img src="/images/ArchLinux.jpg" alt="self"></p><h4 id="网络安全领域的最佳Linux发行版：Kali-Linux"><a href="#网络安全领域的最佳Linux发行版：Kali-Linux" class="headerlink" title="网络安全领域的最佳Linux发行版：Kali Linux"></a>网络安全领域的最佳Linux发行版：Kali Linux</h4><p>&emsp;&emsp;Kali Linux配备了数百种属于不同类别的有用安全工具，例如：漏洞分析、无线攻击、Web 应用程序、开发工具、压力测试和取证工具等。Kali Linux基于Debian Testing分支，发行版中的大多数软件包都来自Debian软件源。同时Kali Linux除了桌面安装外，Kali Linux 还可以安装在Raspberry Pi、Ordroid、Chromebook、BeagleBone 等设备上进行便携携带和使用，而 Kali NetHunter 的到来也可用于Android智能手机。<br><strong>为什么笔者会推荐 Kali Linux作为网络安全领域的Liunx：</strong></p><ul><li>Kali Linux定期滚动发布模式</li><li>Kali Linux多种经过测试的道德黑客工具</li><li>Kali Linux坚实的 Debian 基础</li><li>Kali Linux广泛的学习资源</li></ul><!--图片链接--><p><img src="/images/KaliLinux.jpg" alt="self"></p><h4 id="当然还有其他的优秀的Liunx发行版"><a href="#当然还有其他的优秀的Liunx发行版" class="headerlink" title="当然还有其他的优秀的Liunx发行版"></a>当然还有其他的优秀的Liunx发行版</h4><ul><li>适合初学者的最佳Linux发行版：Linux Mint</li><li>老旧硬件的最佳Linux发行版：Ubuntu MATE</li><li>专属游戏的Linux发行版：Steam OS</li><li>美丽的Linux发行版：elementary OS</li><li>openSUSE 是一个非常稳定的编程操作系统，它可以轻松地让 Ubuntu 运行起来</li><li>Fedora的赞助商是红帽公司，以提供 Linux 桌面世界最尖端的功能而闻名</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;2019年度最佳Linux发行版，Linux版本选择指南。Linux的内核是开源的，在开源的社区里提供了很多发行版本
      
    
    </summary>
    
      <category term="Linux" scheme="https://2694048168.github.io/categories/Linux/"/>
    
    
      <category term="Linux发行版" scheme="https://2694048168.github.io/tags/Linux%E5%8F%91%E8%A1%8C%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>大数据框架Hadoop的前世今生</title>
    <link href="https://2694048168.github.io/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6Hadoop%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>https://2694048168.github.io/大数据框架Hadoop的前世今生/</id>
    <published>2019-08-12T06:32:46.000Z</published>
    <updated>2020-03-25T14:48:36.585Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一纵两横"><a href="#一纵两横" class="headerlink" title="一纵两横"></a>一纵两横</h4><p><strong>一纵两横的思维</strong><br>&emsp;&emsp;即学习一个新学科时，可以看其一纵，其整个历史至今的发展过程。然后看其两横，一横是不同人对于其的评价即定义，还有一横是不同学科或领域与其的联系和区别。抓住这一纵两横的思维，可以帮助我们快速了解一个新的学科或者一个新的领域。<br>&emsp;&emsp;在了解一件自己完全没有涉足过的事情之前，笔者喜欢使用“一纵两横”的思维去学习了解，这样能够快速的帮助自己构建知识体系。所谓的“一纵”，就是事物本身的历史发展，从最开始的诞生到当今的发展情况，可能有的人会觉得无聊或者没有必要，但笔者想告诉读者的是，这是进入一个事物领域的最基本素质，能够很好地体现着专业素养。而所谓的“两横”，就是一方面比较该领域里不同的专家学者或者提出者（创造者），以及其他领域的人对于该事物的阐述理解或者评价态度；另一方面就是比较已有领域学科或者相近领域学科和该事物的异同点或者联系与区别。但完成了这“一纵两横”后，不仅是从本质上了解事物，同时也和自己已有的知识架构联系在一起，有了自己的一些理解感悟。</p><h4 id="大数据起源背景！"><a href="#大数据起源背景！" class="headerlink" title="大数据起源背景！"></a>大数据起源背景！</h4><p>&emsp;&emsp;笔者第一次正式接触大数据，是阅读维克托的《大数据时代》，当然是翻译的中文版，是浙江人民出版社的，在《大数据时代》书中提到，大数据的发展来源，大数据的特征，著者维克托传递出大数据时代来临了的信号，同时我们数据的思考和应用都应该有巨大的思想变革，这样才能适应大数据时代的发展。<br><strong>书中对大数据的三个核心思想：</strong></p><ul><li>数据不是随机样本，而是全部数据</li><li>数据不是精确性，而是混杂性</li><li>数据间不是因果关系，而是相关关系</li></ul><p>&emsp;&emsp;维克托围绕着三个核心思想，阐述了我们思维、生活以及商业的变革，同时笔者有点小感悟，那就是我们的学习或者教育是不是也需要变革，针对这三个核心思想对我们学习或者教育进行改革，当然这不是我们重点，这就当做是笔者在抛砖引玉 (自恋一下 ̂_ ̂)。<br>&emsp;&emsp;既然大数据这个概念能够催生，那么在实际的生活必然有着对应的实际应用。那么这又是这样的情况了？这就聊到了 hadoop 框架的产生背景了，进入 21 世纪以来，随着信息技术和信息社会的高速发展，信息或者数据在不断地增长，而且是超几何的疯狂增长。特别是在 Web2.0 时代，人们对于信息的产生和索取需求在疯狂增长，这样在浏览器端产生的数据在 TB 级别或者 PB 级别在增长，亿万网民用户的浏览数据记录以及日夜增长的网站，这些海量数据如何进行存储和分析计算，就成为摆在我们的面前，同时也是 Google 这样的搜索引擎公司天然就需要面对的现实和需要解决的问题。<br>Google-Alphabet 的新老三篇文章，被称之为大数据领域的三驾马车：</p><ul><li>2003 年发表文章 &lt;GFS:The Google File System&gt;</li><li>2004 年发表文章 &lt;MapReduce:Simlifed Data Processing on Large Clusters&gt;</li><li>2006 年发表文章 &lt;BigTable:A Distrbuted Stroage System for Structured Data&gt;</li><li>2010 年发表文章 &lt;Dremel: Interactive Analysis of Web-Scale Datasets&gt;</li><li>2010 年发表文章 &lt;Pregel: A System for Large-Scale Graph Processing&gt;</li><li>Google 老三架马车： GFS、 MapReduce、 BigTable</li><li>Google 新三架马车： Dremel、 Pregel、 Caffeine</li></ul><p>&emsp;&emsp;大数据的应用开发框架，你一定听过 Hadoop，对就是它！Hadoop 是 Apache(这样说应该不准确，就先这样理解) 基于 Google 的前三篇文章实现的开源框架，现在是 Apache 下一个顶级项目。大家可以访问官网看一看:<span class="exturl" data-url="aHR0cDovL2hhZG9vcC5hcGFjaGUub3JnLw==" title="http://hadoop.apache.org/">Hadoop Apache官网<i class="fa fa-external-link"></i></span></p><h4 id="Hadoop-的起源背景之-GFS"><a href="#Hadoop-的起源背景之-GFS" class="headerlink" title="Hadoop 的起源背景之 GFS"></a>Hadoop 的起源背景之 GFS</h4><p><strong>大数据解决本质问题之一，就是对海量的数据如何进行存储。</strong><br>&emsp;&emsp;海量的数据并不是传统的 MB 或者 GB 级数据，而是 TB、 PB 级的数据概念。或许你没有啥直观的感觉，我们用数据来进行表明一下：</p><ul><li>8bit = 1Byte</li><li>2<sup>10</sup>Byte = 1024Byte = 1KB</li><li>2<sup>20</sup>KB = 1024KB = 1MB</li><li>2<sup>30</sup>KB = 1024KB = 1GB</li><li>2<sup>40</sup>GB = 1024GB = 1TB</li><li>2<sup>50</sup>TB = 1024TB = 1PB</li><li>2<sup>60</sup>PB = 1024PB = 1EB</li><li>2<sup>70</sup>EB = 1024EB = 1ZB</li></ul><p>&emsp;&emsp;简单来说， 1.2ZB 字节数据，如果储存在只读光盘上，那么这些光盘可以堆成五堆，每一堆都可以伸到月球。公元前 3 世纪，埃及的托勒密二世竭力收集了当时所有的书写作品，全部储存在亚历山大图书馆，代表着当时世界上所有的知识量，但是在数字数据洪流涌向世界后，每一个人都可以获取大量的数据信心，相当与当时压力山大图书馆储存的数据总量的 320 倍。从上面的小故事就可以知道，现在数字信息的庞大，如此海量的数据需要储存，传统的磁盘阵列储存已经无法满足这样的需求了，毕竟磁盘阵列价格是昂贵的。这就需要低成本、高效率、高可靠的储存设计。<br>2003 年， Google 发表了 <the google file system> 文章，解决了这个问题。在文章中阐述了解决海量数据储存的设计思想。同时在 Apache 下Lucene 的子项目研究下，实现了海量数据的存储设计：分布式文件系统，也就是 HDFS（Hadoop Distributed File System）。</the></p><h4 id="Hadoop-的起源背景之-MapReduce"><a href="#Hadoop-的起源背景之-MapReduce" class="headerlink" title="Hadoop 的起源背景之 MapReduce"></a>Hadoop 的起源背景之 MapReduce</h4><p><strong>大数据解决本质问题之二，就是海量数据如何进行计算。</strong><br>&emsp;&emsp;在编程计算里，有并行编程计算框架，有过了解的人就知道，这并不是什么新兴的技术。同样 Google 在 2004 年发表了 &lt;MapReduce: Simplifed Data Processing on Large Clusters&gt; 文章，文章阐述了基于分布式储存的海量数据并行计算解决方案思想。开源社区 Apache 的 Hadoop 项目研究实现了MapReduce 并行计算框架，将计算与数据在本地进行，将数据分为 Map 和Reduce 阶段。简单阐述就是 MapReduce 编程模型：把一个大任务拆分成小任务，再进行汇总。</p><h4 id="Hadoop-的起源背景之-BigTable"><a href="#Hadoop-的起源背景之-BigTable" class="headerlink" title="Hadoop 的起源背景之 BigTable"></a>Hadoop 的起源背景之 BigTable</h4><p><strong>大数据解决本质问题之三，就是对于海量的数据进行分析处理</strong><br>&emsp;&emsp;数据在储存后，其作用就是提供检索和查阅，这才是搜索引擎的功效，也是Google 的强大技术支持。那么提高查询和利用数据的效率就是需要解决的重点。到这里就需要有一定的数据库相关知识 (建议可以查阅一下关于数据库的起源以及历史发展)，数据库的产生就是为了查询和利用数据的效率提高，然而现有的数据库并不能满足基于分布式储存的需求。结构化的数据库 (SQL) 和非结构化的数据 (NoSQL)。<br>&emsp;&emsp;Google 工程师在 2006 年发表了 &lt;Bigtable: A Distributed Storage System for Structured Data&gt; 文章，文中阐述了基于分布式储存的数据库设计思想。就这样数据库时代从关系型数据库进入了非关系型数据库时代，一张大表 BigTable 设计思想， BigTable 就是把所有的数据保存到一张表中，同时采用冗余方式 (提高效率和可靠性，这种冗余的方式是最常用的手段，无论是在通信领域，或者自然语言处理领域、语音处理等等), 基于其设计思想就开源实现了基于 HDFS 的非关系型数据库（NoSQL 数据库） HBase。<br>&emsp;&emsp;小提示：其实在我们常用的云盘或者网盘，其主要的设计思想就是这样的，笔者常用的百度网盘也就类似于这样分布式的储存。笔者建议感兴趣的读者，可以阅读 Google 的三篇文章，最好是原文 (虽然笔者的英文很烂)，这样我们就更能理解其设计思想的精髓。</p><h4 id="Hadoop-环境搭建"><a href="#Hadoop-环境搭建" class="headerlink" title="Hadoop 环境搭建"></a>Hadoop 环境搭建</h4><h6 id="Hadoop-分布式集群简介！"><a href="#Hadoop-分布式集群简介！" class="headerlink" title="Hadoop 分布式集群简介！"></a>Hadoop 分布式集群简介！</h6><p>&emsp;&emsp;引言：学习大数据，就需要自己搭建 Hadoop 的运行环境，这对于新手而言是一项困难的工作，特别是对于 Liunx 操作不熟悉的读者而言，更是一大难题。但是学习部署自己的 Hadoop 环境是学习大数据的必经之路，也是必会技能之一。接下来跟笔者一起来搭建 Hadoop 集群环境吧！当然在 Windows 下也是支持部署 hadoop 的，不过这并不适合实际生产的需求，同时 Windows 不如 Liunx 性能稳定等等因素，一次是来自 Apache 官网对于开发平台的简介。<br>&emsp;&emsp;GNU/Linux is supported as a development and production platform. Hadoop has been demonstrated on GNU/Linux clusters with 2000 nodes.Windows is also a supported platform but the followings steps are for Linux only. To set up Hadoop on Windows, see wiki page.<br>&emsp;&emsp;支持 GNU / Linux 作为开发和生产平台。已经在具有 2000 个节点的GNU / Linux 集群上演示了 Hadoop。 Windows 也是受支持的平台，但以下步骤仅适用于 Linux。要在 Windows 上设置 Hadoop，请参阅 Wiki 页面。</p><h6 id="在学习大数据之前，我们应该知道对于-Hadoop-的环境搭建，有着三种方式："><a href="#在学习大数据之前，我们应该知道对于-Hadoop-的环境搭建，有着三种方式：" class="headerlink" title="在学习大数据之前，我们应该知道对于 Hadoop 的环境搭建，有着三种方式："></a>在学习大数据之前，我们应该知道对于 Hadoop 的环境搭建，有着三种方式：</h6><ul><li>本地模式，就是单机版的 Hadoop，笔者觉得完全没有必要，因为 Hadoop的储存原理本就是分布式的概念，同时不具备 HDFS，只能测试 MapReduce程序。</li><li>全分布式集群，就是对每一个必须的节点都采用一个独立的主机，拥有独立的 IP 地址，真正意义的分布式集群概念，完全达到 Hadoop 的实际应用要求。</li><li>伪分布式集群，我们学习最常用的一个环境搭建。就是采用一个主机，但是配置多个拥有独立的虚拟节点，满足 Hadoop 分布式的逻辑概念。具备 Hadoop 的所有功能，在单机上模拟一个分布式的环境。这也是我们在学习中建议采用的方式，因为笔者使用的是 Windows7 系统，故而需要借助虚拟机。</li></ul><h6 id="搭建-Hadoop-环境准备"><a href="#搭建-Hadoop-环境准备" class="headerlink" title="搭建 Hadoop 环境准备"></a>搭建 Hadoop 环境准备</h6><ul><li>安装虚拟机 VMWare、 Linux 操作系统。</li><li>配置主机名和 I 静态 IP 地址、免密码登录设置。</li><li>约定安装目录： /liwei/hadoop。</li><li>配置好 JDK 的环境变量、准备好 Hadoop 安装包。</li><li>了解 Hadoop 的目录结构以及对应的作用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一纵两横&quot;&gt;&lt;a href=&quot;#一纵两横&quot; class=&quot;headerlink&quot; title=&quot;一纵两横&quot;&gt;&lt;/a&gt;一纵两横&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;一纵两横的思维&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;即学习一个新学科时，可以看其一纵，其整个历史
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://2694048168.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://2694048168.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop之wordcount实例-MapReduce程序</title>
    <link href="https://2694048168.github.io/Hadoop%E4%B9%8Bwordcount%E5%AE%9E%E4%BE%8B-MapReduce%E7%A8%8B%E5%BA%8F/"/>
    <id>https://2694048168.github.io/Hadoop之wordcount实例-MapReduce程序/</id>
    <published>2019-08-11T15:24:08.000Z</published>
    <updated>2020-02-19T08:02:16.735Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><p>&emsp;&emsp;利用搭建好的大数据平台 Hadoop，对 HDFS 中的文本文件进行处理，采用 Hadoop Steaming 方式，使用 Python 语言实现英文单词的统计功能，并输出单词统计结果。</p><!--图片链接--><p><img src="/images/MapReduce-wordcount.png" alt="self"></p><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><p>&emsp;&emsp;将附件”COPYING_LGPL.txt”上传 Hadoop 集群的 HDFS 中，采用 Hadoop Steaming方式，使用 Python语言实现字词统计功能，输出字词统计结果，即实现文本单词的词频统计功能。要求将实验原理，过程，代码分析，结果分析记录在实验报告中。</p><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><ul><li>实验原理：<br>&emsp;&emsp;简述 MapReduce 的 Data Flow 如下图所示，原始数据经过 mapper 处理，再进行 partition 和 sort，到达 reducer，输出最后结果。Hadoop 的MapReduce处理框架，一般的编程模型如下图所示， 将一个业务拆分为 Mapper 和 Reducer 两个阶段。使用 Python 语言背后的“技巧”是我们将使用 Hadoop Streaming API 来帮助我们通过 STDIN（标准输入）和 STDOUT（标准输出）在 Map 和 Reduce 代码之间传递数据。我们将简单地使用 Python 的 sys.stdin 来读取输入数据并将我们自己的输出打印到 sys.stdout。这就是我们需要做的全部，因为 Hadoop Streaming 会帮助我们处理其他所有事情！<br>&emsp;&emsp;使用 Python 来调用 Hadoop Streaming API，其基本流程如下图。用 Python 写MapReduce 还需要了解 HadoopStreaming ，在 Apache 的 Hadoop 官网可以查看HadoopStreaming 的运行机制，简单来说就是 HadoopStreaming 是可运行特殊脚本的MapReduce 作业的工具 ，使用格式如下：<!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar \</span><br><span class="line">/home/hadoop/app/hadoop-2.7.7/share/hadoop/tools/lib/hadoopstreaming-2.7.7.jar\</span><br><span class="line">-files /home/hadoop/mapper.py -mapper /home/hadoop/mapper.py \</span><br><span class="line">-files /home/hadoop/reducer.py -reducer /home/hadoop/reducer.py \</span><br><span class="line">-input /wordcount/COPYING_LGPL.txt -output /wordcount/output</span><br></pre></td></tr></table></figure></li></ul><!--图片链接--><p><img src="/images/MapReduce.png" alt="self"></p><ul><li>实验过程<br>&emsp;&emsp;将本地物理机的测试文本文件 COPYING_LGPL.txt 上传到虚拟主机 Master 上，在从 Master 上传到 Hadoop 集群的 HDFS 文件系统上/wordcount/COPYING_LGPL.txt。<br>&emsp;&emsp;使用 Python 编写 MapReduce 程序，分别根据实现原理编写 Mapper 程序和Reducer 程序，使用 Vim 编写 Mapper 和 Reducer 脚本，并使两个脚本具有可执行权限，及使用命令： chmod +x mapper.py reducer.py。<br>&emsp;&emsp;使用 HadoopStreaming 命令来运行自己编写的程序，其命令如下：<!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar \</span><br><span class="line">/home/hadoop/app/hadoop-2.7.7/share/hadoop/tools/lib/hadoopstreaming-2.7.7.jar \</span><br><span class="line">-files /usr/bin/mapper.py \</span><br><span class="line">-files /usr/bin/reducer.py \</span><br><span class="line">-mapper "python /usr/bin/mapper.py" \</span><br><span class="line">-reducer "python /usr/bin/reducer.py" \</span><br><span class="line">-input /wordcount/input/COPYING_LGPL.txt \</span><br><span class="line">-output /wordcount/output</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;可以编写一个 shell 脚本命令，来运行 HadoopStreaming 命令，这样在 shell 脚本<br>中首先使用删掉输出目录文件的命令（hdfs dfs -rm -r -f /wordcount/output），防止多次测试出错， 同时每次测试只需要运行 shell 脚本即可，这样在做实验的时候更加方便操作，而不用每次都敲命令。</p><h3 id="对HadoopStreaming-命令进行解释："><a href="#对HadoopStreaming-命令进行解释：" class="headerlink" title="对HadoopStreaming 命令进行解释："></a>对HadoopStreaming 命令进行解释：</h3><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar    #指调用hadoop jar包的命令</span><br><span class="line">/home/hadoop/app/hadoop-2.7.7/share/hadoop/tools/lib/hadoopstreaming-2.7.7.jar              #调用HadoopStreaming 命令的jar包</span><br><span class="line">-files /usr/bin/mapper.py     #提交的作业的路径</span><br><span class="line">-files /usr/bin/reducer.py    #提交的作业的路径</span><br><span class="line">-mapper "python /usr/bin/mapper.py"     #mapper程序的解释器python以及程序路径</span><br><span class="line">-reducer "python /usr/bin/reducer.py"    #reducer程序的解释器python以及程序路径</span><br><span class="line">-input /wordcount/input/COPYING_LGPL.txt     #HDFS上的输入文件的路径</span><br><span class="line">-output /wordcount/output     #HDFS上的输出文件的路径</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;HadoopStreaming API 的调用接口说明： 调用 python 中的标准输入流 sys.stdin ，MAP 具体过程是， HadoopStream 每次从 input 文件读取一行数据，然后传到 sys.stdin中，运行 payhon 的 map 函数脚本，然后用 print 输出回 HadoopStreeam。 REDUCE 过程一样。所以 M 和 R 函数的输入格式为 for line in sys.stdin:line=line.strip。Mapper 过程如下： 第一步，在每个节点上运行我们编写的 map 程序 ，即就是 调用标准输入流 ， 读取文本内容，对文本内容分词，形成一个列表，读取列表中每一个元素的值 ， Map 函数输出， key 为 word，下一步将进行 shuffle 过程，将按照key 排序，输出，这两步为 map 阶段工作为，在本地节点进行，第二步， hadoop 框架，把我们运行的结果，进入 shuffle 过程，每个节点对 key 单独进行排序，然后输出。Reducer 过程：第一步， merge 过程，把所有节点汇总到一个节点，合并并且按照 key排序。第二步，运行 reducer 函数。</p><!--图片链接--><p><img src="/images/WordCount%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="self"></p><h3 id="Python源代码"><a href="#Python源代码" class="headerlink" title="Python源代码"></a>Python源代码</h3><p>&emsp;&emsp;分析 WordCount 程序实例的实现原理步骤，具体 Python 代码如下源代码所示，前面是简要原理的实现，后面是使用 Python 的迭代器和生成器升级 mapper 程序和 reducer 程序。<br><strong>MapReduce 的 WordCount 简要原理 Python 实现源代码如下</strong><br><strong>Mapper阶段</strong></p><!--Code--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># filename:mapper.py</span></span><br><span class="line"><span class="comment"># date:2019-06-18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># input comes from STDIN (standard input)</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="comment"># remove leading and trailing whitespace</span></span><br><span class="line">    line = line.strip()</span><br><span class="line">    <span class="comment"># split the line into words</span></span><br><span class="line">    words = line.split()</span><br><span class="line">    <span class="comment"># increase counters</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        <span class="comment"># write the results to STDOUT (standard output);</span></span><br><span class="line">        <span class="comment"># what we output here will be the input for the</span></span><br><span class="line">        <span class="comment"># Reduce step, i.e. the input for reducer.py</span></span><br><span class="line">        <span class="comment"># tab-delimited; the trivial word count is 1</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s\t%s'</span> % (word, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>Reducer阶段</strong></p><!--Code--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># filename:reducer.py</span></span><br><span class="line"><span class="comment"># date:2019-06-18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">current_word = <span class="literal">None</span></span><br><span class="line">current_count = <span class="number">0</span></span><br><span class="line">word = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># input comes from STDIN</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="comment"># remove leading and trailing whitespace</span></span><br><span class="line">    line = line.strip()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># parse the input we got from mapper.py</span></span><br><span class="line">    word, count = line.split(<span class="string">'\t'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># convert count (currently a string) to int</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = int(count)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="comment"># count was not a number, so silently</span></span><br><span class="line">        <span class="comment"># ignore/discard this line</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># this IF-switch only works because Hadoop sorts map output</span></span><br><span class="line">    <span class="comment"># by key (here: word) before it is passed to the reducer</span></span><br><span class="line">    <span class="keyword">if</span> current_word == word:</span><br><span class="line">        current_count += count</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> current_word:</span><br><span class="line">            <span class="comment"># write result to STDOUT</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'%s\t%s'</span> % (current_word, current_count)</span><br><span class="line">        current_count = count</span><br><span class="line">        current_word = word</span><br><span class="line"></span><br><span class="line"><span class="comment"># do not forget to output the last word if needed!</span></span><br><span class="line"><span class="keyword">if</span> current_word == word:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'%s\t%s'</span> % (current_word, current_count)</span><br></pre></td></tr></table></figure><p><strong>MapReduce 的 WordCount 简要原理 Python 的迭代器与生成器实现源代码如下：</strong><br><strong>Mapper阶段</strong></p><!--Code--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># filename:mapper.py</span></span><br><span class="line"><span class="comment"># date:2019-06-18</span></span><br><span class="line"><span class="comment"># detail:A more advanced Mapper, using Python iterators and generators.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_input</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="comment"># split the line into words</span></span><br><span class="line">        <span class="keyword">yield</span> line.split()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(separator=<span class="string">'\t'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># input comes from STDIN (standard input)</span></span><br><span class="line">    data = read_input(sys.stdin)</span><br><span class="line">    <span class="keyword">for</span> words <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># write the results to STDOUT (standard output);</span></span><br><span class="line">        <span class="comment"># what we output here will be the input for the</span></span><br><span class="line">        <span class="comment"># Reduce step, i.e. the input for reducer.py</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># tab-delimited; the trivial word count is 1</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'%s%s%d'</span> % (word, separator, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>Reducer阶段</strong></p><!--Code--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># filename:reducer.py</span></span><br><span class="line"><span class="comment"># date:2019-06-18</span></span><br><span class="line"><span class="comment"># detail:A more advanced Reducer, using Python iterators and generators.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_mapper_output</span><span class="params">(file, separator=<span class="string">'\t'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="keyword">yield</span> line.rstrip().split(separator, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(separator=<span class="string">'\t'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># input comes from STDIN (standard input)</span></span><br><span class="line">    data = read_mapper_output(sys.stdin, separator=separator)</span><br><span class="line">    <span class="comment"># groupby groups multiple word-count pairs by word,</span></span><br><span class="line">    <span class="comment"># and creates an iterator that returns consecutive keys and their group:</span></span><br><span class="line">    <span class="comment">#   current_word - string containing a word (the key)</span></span><br><span class="line">    <span class="comment">#   group - iterator yielding all ["&amp;lt;current_word&amp;gt;", "&amp;lt;count&amp;gt;"] items</span></span><br><span class="line">    <span class="keyword">for</span> current_word, group <span class="keyword">in</span> groupby(data, itemgetter(<span class="number">0</span>)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total_count = sum(int(count) <span class="keyword">for</span> current_word, count <span class="keyword">in</span> group)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s%s%d"</span> % (current_word, separator, total_count)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="comment"># count was not a number, so silently discard this item</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;利用搭建好的大数据平台 Hadoop，对 HDFS 中的文本文件进行处理，采用 Hadoop Ste
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://2694048168.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://2694048168.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop分布式环境搭建</title>
    <link href="https://2694048168.github.io/Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://2694048168.github.io/Hadoop分布式环境搭建/</id>
    <published>2019-08-11T14:53:26.000Z</published>
    <updated>2020-02-19T08:03:37.631Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h4><ul><li>熟悉 Linux 操作系统的安装以及常用的基本命令</li><li>掌握如何设置静态 IP 地址，掌握如何修改主机域名</li><li>掌握如何配置 Java 环境变量，掌握 Java 基本命令</li><li>了解为何需要配置 SSH 免密码登录，掌握如何配置 SSH 免密码登录</li><li>熟练掌握在 Linux 环境下如何构建分布模式下的 Hadoop 集群</li></ul><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><ul><li>安装和配置 CentOS7 的 Liunx 发行版</li><li>安装和配置 CentOS7 的网络以及 IP、主机名</li><li>启动和配置 SSH 免密码登录，配置 Java 环境</li><li>安装和配置 Hadoop 分布式集群环境</li></ul><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><p>&emsp;&emsp;分析部署 Hadoop 分布式集群需要三台主机，分别作为三个数据节点DataNode 和三个管理节点NodeManager，再将其中每一个主机分别作为 NameNode、 ResourceManager、SecondaryNameNode。</p><!--Table--><table><thead><tr><th align="center"></th><th align="center">Master</th><th align="center">Slave1</th><th align="center">slave2</th></tr></thead><tbody><tr><td align="center">HDFS</td><td align="center">NameNode</td><td align="center">DataNode</td><td align="center">SecondaryNameNode</td></tr><tr><td align="center">HDFS</td><td align="center">DataNode</td><td align="center"></td><td align="center">DataNode</td></tr><tr><td align="center">YARN</td><td align="center">NodeManager</td><td align="center">ResouceManager</td><td align="center">NodeManager</td></tr><tr><td align="center">YARN</td><td align="center"></td><td align="center">NodeManager</td><td align="center"></td></tr></tbody></table><p>&emsp;&emsp;安装好 VMWare12 虚拟机，新建一个基于 CentOS 发行版的 Liunx 虚拟机，然后安装 CentOS7 操作系统，然后通过克隆方式，克隆出另外两台 CentOS7 主机，以root 权限配置好必要信息后，采用远程登录工具 SecureCRT 登录服务器进行操作。<br>&emsp;&emsp;将建好的虚拟机重新命名为 Hadoop-Node0（主机名为 master）、 HadoopNode1（主机名为 slave1）、 Hadoop-Node2（主机名为 slave2），三台主机都配置一个用户名都为 hadoop，登录密码都为 hadoop，同时使用 root 权限进行对三台主机进行开机关闭防火墙，因为 Hadoop 中的进程端口多而且集群采用内网部署，可以不需要防火墙。<br>&emsp;&emsp;网络配置，使用 VMnet8 这张虚拟网卡，查看网段 IP，网关 IP 地址为192.168.92.1，子网掩码 IP 地址为 255.255.255.0，则在该网段内为三台主机进行配置静态 IP 和重新生成 MAC 地址，使三台主机处于同一网段下， 使用同一时区的时间进行三台主机的时间同步（也可以采用 ntp 的方式进行集群时间同步）， 对应关系如下：</p><ul><li>Hadoop-Node0——192.168.92.2——master</li><li>Hadoop-Node1——192.168.92.3——slave1</li><li>Hadoop-Node2——192.168.92.4——slave2</li></ul><!--图片链接--><p><img src="/images/VMWare%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png" alt="self"><br>&emsp;&emsp;配置好每一台主机的主机名以及静态 IP 地址，同时进行主机名与 IP 地址的映射，在每一台主机的 hosts 文件中都需要配置相同的主机名与 IP 映射，这样才是使用主机名时才能识别主机对应的 IP，文件内容如下：</p><ul><li>192.168.92.2 master</li><li>192.168.92.3 slave1</li><li>192.168.92.4 slave2</li></ul><p>&emsp;&emsp;配置 SSH 免密登陆，首先在每台服务器生成密钥对后，即每台机器上都执行 ssh-keygen –t rsa 需要输入密码的地方直接按 Enter 回车键，这样就采用 RSA加密算法生成了公钥秘钥在当前隐藏文件夹.ssh 下。然后在每台服务器上执行 sshcopy-id命令，将公钥复制到其它两台服务器上即可，该命令可以自动将公钥添加到名为 authorized_keys的文件中，在每台服务器都执行完以上步骤后就可以实现多台服务器相互无密码登陆了。</p><ul><li>ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@master</li><li>ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@slave1</li><li>ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@lave2</li></ul><!--图片链接--><p><img src="/images/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.png" alt="self"><br>&emsp;&emsp;集群部署，首先要分配好集群的角色，比如 HDFS 的角色有 NN、 DN、SecondaryNN， YARN 的角色有 RM、 NM，分配好在集群中的主机位置。Master Slave1 Slave2三个主机上应该都有着我们提前分配好的角色。分布式文件系统HDFS：NameNode、DataNode、SecondaryNameNode；YARN：NodeManager、ResouceManager。<br>&emsp;&emsp;配置文件，在/home/Hadoop 下创建一个 app/目录，将 hadoop-2.7.7 解压到 app/目录下，将 jdk1-8 也解压到 app/目录下，配置好 JAVA_HOME 和 HADOOP_HOME环境变量，添加到当前用户的 bash_profile。 按照提前准备好的配置文档进行对Hadoop 进行文件的配置，在/home/hadoop/app/hadoop-2.7.7/etc/hadoop/对各个配置文件进行修改配置。<br>&emsp;&emsp;对 HDFS 进行格式化，在 master 主机上进行格式化即可。使用 hdfs namenode-format 命令进行格式化，等待格式化的结果，会显示成功的格式化目录在配置好的/home/hadoop/app/hadoop-2.7.7/temp 目录下。</p><!--图片链接--><p><img src="/images/hdfs%E6%A0%BC%E5%BC%8F%E5%8C%96.png" alt="self"><br>&emsp;&emsp;启动 Hadoop 的组件的进程（在 master 主机上启动 HDFS、 在 slave1 主机上启 动 YARN ） ， 采 用 jps 命 令 查 看 进 程 和 通 过 浏 览 器 查 看 。</p><!--图片链接--><p><img src="/images/start-hdfs.png" alt="self"></p><!--图片链接--><p><img src="/images/start-yarn.png" alt="self"><br>&emsp;&emsp;上传文件到 HDFS 后，通过浏览器查看目录文件以及分块情况，同时也可以在 Liunx 端查看到情况。<br>&emsp;&emsp;运行 wordcount 程序，体验并检验 Hadoop 集群。<br>&emsp;&emsp;关闭 Hadoop 集群，现在 master 主机上关闭 HDFS，在 slave1 主机上关闭YARN，则 slave2 主机上的 Hadoop 集群的进程就自动被关闭了。</p><!--图片链接--><p><img src="/images/stopHDFS.png" alt="self"></p><!--图片链接--><p><img src="/images/stopYARN.png" alt="self"></p><h4 id="实验代码或分析"><a href="#实验代码或分析" class="headerlink" title="实验代码或分析"></a>实验代码或分析</h4><p>重启网卡</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>查看防火墙状态</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>设置开机不启动防火墙</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>配置免密登录<br>先在每一台主机上执行生成 RSA 算法的秘钥</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen –t rsa</span><br></pre></td></tr></table></figure><p>从 master 以 hadoop 用户登录 master、 slave1、 slave2 免密<br>在 master 主机上进行一下操作命令即可</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@master</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@slave1</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@slave2</span><br></pre></td></tr></table></figure><p>从 slave1 以 hadoop 用户登录 master、 slave1、 slave2 免密<br>在 slave1 主机上进行一下操作命令即可</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@master</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@slave1</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@slave2</span><br></pre></td></tr></table></figure><p>从 slave2 以 hadoop 用户登录 master、 slave1、 slave2 免密<br>在 slave2 主机上进行一下操作命令即可</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@master</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@slave1</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@slave226.</span><br></pre></td></tr></table></figure><p>配置好 master 主机上的 Hadoop 后进行集群分发到 slave1 和 slave2</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp –r /home/hadoop/app hadoop@slaver1:/home/hadoop</span><br><span class="line">scp –r /home/hadoop/app hadoop@slaver2:/home/hadoop</span><br></pre></td></tr></table></figure><p>分发 master 主机上的环境变量配置文件</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp –r ~/.bash_profile hadoop@slaver1:~/</span><br><span class="line">scp –r ~/.bash_profile hadoop@slaver2:~/</span><br></pre></td></tr></table></figure><h4 id="Hadoop配置文件"><a href="#Hadoop配置文件" class="headerlink" title="Hadoop配置文件"></a>Hadoop配置文件</h4><ul><li>核心配置文件</li></ul><p><strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/slaves</strong></p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置 Hadoop 集群主机--&gt;</span><br><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><p><strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/core-site.xml</strong></p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置 HDFS 的 NameNode--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!--配置 DataNode 保存数据的位置--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/hadoop/app/hadoop-2.7.7/temp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>HDFS 配置文件</li></ul><p><strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/hadoop-env.sh</strong></p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置 HDFS 的 Java 环境--&gt;</span><br><span class="line">export JAVA_HOME=/home/hadoop/app/jdk1.8.0_191</span><br></pre></td></tr></table></figure><p><strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/hdfs-site.xml</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置 HDFS 的副本数--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!--配置是否检查权限--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!--配置 Hadoop 辅助名称节点主机配置 SecondaryNameNode--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;slave2:50090&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>YARN 配置文件</li></ul><p><strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/yarn-env.sh</strong></p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置 YARN 的 Java 环境--&gt;</span><br><span class="line">JAVA_HOME=/home/hadoop/app/jdk1.8.0_191</span><br></pre></td></tr></table></figure><p> <strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/yarn-site.xml</strong></p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置 ResourceManager 的地址--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;slave1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!--配置 NodeManager 执行任务的方式--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>MapReduce 配置文件</li></ul><p><strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/mapred-env.sh</strong></p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置 MapReduce 的 Java 环境--&gt;</span><br><span class="line">export JAVA_HOME=/home/hadoop/app/jdk1.8.0_191</span><br></pre></td></tr></table></figure><p><strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/mapred-site.xml.template</strong><br>先修改文件 MapReduce</p><!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br></pre></td></tr></table></figure><p><strong>/home/hadoop/app/hadoop-2.7.7/etc/hadoop/mapred-site.xml</strong></p><!--Code--><pre><code class="shell">&lt;configuration&gt;    &lt;!--配置 MapReduce 运行在 YARN 上--&gt;    &lt;property&gt;        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;        &lt;value&gt;yarn&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;</code></pre><h4 id="实验检测"><a href="#实验检测" class="headerlink" title="实验检测"></a>实验检测</h4><p>上传/home/hadoop/hadoop-2.7.7.tar.gz 和jdk-8u191-linux-x64.tar.gz 文件到 HDFS 根目录</p><!--Code--><pre><code class="shell">hdfs dfs -put /home/hadoop/hadoop-2.7.7.tar.gz /hdfs dfs -put /home/hadoop/jdk-8u191-linux-x64.tar.gz /</code></pre><p>以递归方式查看 HDFS 的根目录结构</p><!--Code--><pre><code class="shell">hdfs dfs -ls -R /</code></pre><p>运行 Hadoop 自带的 wordcount 程序，进行词频统计</p><!--Code--><pre><code class="shell">hadoop jar hadoop-mapreduce-examples-2.7.7.jar wordcount /README.txt /outputhadoop jar hadoop-mapreduce-examples-2.7.7.jar wordcount /LICENSE.txt /output</code></pre><h4 id="注意说明"><a href="#注意说明" class="headerlink" title="注意说明"></a>注意说明</h4><p>&emsp;&emsp;通过本次部署大数据平台 Hadoop 的分布式环境，比之前部署伪分布式环境更加熟悉整个过程的搭建，进一步的深刻理解 Liunx 的操作基础以及 Hadoop 的分布式环境搭建，对Hadoop的认识更加的深刻理解。<br>&emsp;&emsp;对 Liunx 的网络配置以及整个集群的静态 IP 设置和网关设置、防火墙的状态查看以及关闭，以及主机名设置和主机名与 IP 进行映射，通过配置 SSH 的非对称加密，通过公钥和私钥实现三台主机之间的相互之间免密登陆。<br>&emsp;&emsp;配置 Hadoop 的核心组件，核心配置文件 core-site.xml，配置 HDFS 的NameNode 地址以及运行时储存目录； HDFS 配置文件 hadoop-env.sh 用于配置 HDFS的 Java 环境， hdfs-site.xml 指定副本数以及辅助名称节点的主机配置； YARN 配置文件 yarn-env.sh 用于配置 YARN 的 Java 环境， yarn-site.xml 配置 YARN 的NodeManger 和 ResourceManger； MapReduce 配置文件 mapred-env.sh 用于配置MapReduce 的 Java 环境， mapred-site.xml 配置 MapReduce 运行在 YARN 上。<br>&emsp;&emsp;采用分发 scp 命令或者采用脚本进行分发集群搭建，以及了解使用 rsync对集群中存在差异的配置文件进行同步更新，以及在集群中常用的时间同步方法以及了解采用部署 ntp 集群实现时间同步。<br>&emsp;&emsp;进一步理解 Hadoop 的各个组件原理，特别是 HDFS 的储存原理，分块储存以及副本机制等等。使用提供的 jar 包，运行 wordcount 程序 jar 包，体验大数据Hadoop 分布式平台以及 MapReduce 数据处理框架。<br>&emsp;&emsp;对于每一个操作步骤不是很清楚的，可以访问本人的GitHub，在学习资料里面有着详细的学习以及安装的过程，是PDF格式的文档说明。</p><h4 id="Hadoop分布式环境搭建详细文档"><a href="#Hadoop分布式环境搭建详细文档" class="headerlink" title="Hadoop分布式环境搭建详细文档"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzI2OTQwNDgxNjgvTGVhcm5pbmdNYXRlcmlhbHMvdHJlZS9tYXN0ZXIvJUU1JUE0JUE3JUU2JTk1JUIwJUU2JThEJUFF" title="https://github.com/2694048168/LearningMaterials/tree/master/%E5%A4%A7%E6%95%B0%E6%8D%AE">Hadoop分布式环境搭建详细文档<i class="fa fa-external-link"></i></span></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实验目的：&quot;&gt;&lt;a href=&quot;#实验目的：&quot; class=&quot;headerlink&quot; title=&quot;实验目的：&quot;&gt;&lt;/a&gt;实验目的：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;熟悉 Linux 操作系统的安装以及常用的基本命令&lt;/li&gt;
&lt;li&gt;掌握如何设置静态 IP 地址，掌握
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://2694048168.github.io/categories/Hadoop/"/>
    
    
      <category term="大数据" scheme="https://2694048168.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客</title>
    <link href="https://2694048168.github.io/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://2694048168.github.io/Hexo搭建博客/</id>
    <published>2019-07-18T12:06:41.000Z</published>
    <updated>2020-02-19T08:06:52.937Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h4><p>&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在极短的几秒钟内，就可利用靓丽的主题生成静态网页，特别适合搭建个人博客。Hexo以其简单、高效而且主题丰富多彩而著名，迅速地占据了一部分市场，值得尝试。<br>&emsp;&emsp;本博客就是采用Hexo v3.9.0 + GitHubPages + NexT v7.3.0 主题进行搭建的！</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv" title="https://hexo.io">Hexo官网点击这里<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==" title="https://github.com/">GitHub官网点击这里<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=" title="https://theme-next.org/">NexT主题官网点击这里<i class="fa fa-external-link"></i></span></li></ul><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><p>&emsp;&emsp;Hexo在搭建时需要Node.js的环境支持，同时需要命令终端的支持。针对不同的操作系统Windows、Linux或者Mac，在配置搭建环境时要下载安装对应的版本，在Windows系统下，建议使用GitBash。Mac和linux都是自带的有BashShell终端。<br>&emsp;&emsp;由于Node.js是国外的网站，有时候由于网络的一些因素，容易影响我们采用npm对资源的访问速度，故此可以采用国内的阿里巴巴的镜像，可以加快访问的速度以及效率。首先在终端采用npm命令安装镜像，成功后就可以采用cnpm命令代替npm命令了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">Node.js官网点击这里<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dheWxhdS9naXQtZm9yLXdpbg==" title="https://github.com/waylau/git-for-win">Git官网点击这里<i class="fa fa-external-link"></i></span></li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>&emsp;&emsp;在下载、安装并配置好环境后，就可以进行安装Hexo。首先打开BashShell终端，创建一个空的目录来作为整个博客项目的工作空间，然后再使用命令进行安装hexo，安装成功后就对Hexo进行初始化，初始化成功后可以查看整个工作空间的目录结构和文件树。</p><ul><li>创建一个空文件夹blog：<br>$ mkdir blog<br></li><li>在终端使用命令安装Hexo：<br>$ npm install -g hexo-cli<br></li><li>初始化Hexo：<br>$ hexo init<br></li><li>查看hexo生成的目录:<br>$ cd blog<br>$ ls<br></li></ul><p>&emsp;&emsp;了解Hexo的文件目录架构以及文件目录的作用，这是很有必要的，特别对于配置Hexo的一些信息，然后在结合Hexo的官网的配置说明，就可以配置成自己想要的。</p><!--coding--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy          #部署文件夹</span><br><span class="line">├── public           #html源码，hexo g生成</span><br><span class="line">├── scaffolds        #模板</span><br><span class="line">├── scripts          #扩展脚本</span><br><span class="line">├── source           #文章源码</span><br><span class="line">|   ├── _drafts      #草稿</span><br><span class="line">|   └── _posts       #文章</span><br><span class="line">├── themes           #主题</span><br><span class="line">|   ├── next         #NexT主题</span><br><span class="line">├── _config.yml      #博客配置</span><br><span class="line">└── package.json     #应用程序数据</span><br></pre></td></tr></table></figure><h4 id="配置NexT主题"><a href="#配置NexT主题" class="headerlink" title="配置NexT主题"></a>配置NexT主题</h4><p>&emsp;&emsp;在Hexo的官网可以找到许许多多的主题，寻找适合自己喜欢的主题，可以通过BashShell终端进行下载，也可以下载后解压到站点的主题文件夹下即可，然后打开站点的配置文件，搜索到theme将其值修改为自己下载的主题名即可。</p><ul><li><p>在终端使用命令下载主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next themes/next ./blog/themes/</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件_config.yml:<br>$ vim _config.yml<br>将theme的值由landscape修改为hexo-theme-next即可<br></p></li></ul><p>&emsp;&emsp;了解NexT主题的文件目录架构以及文件目录的作用，这也是很有必要的，特别对于配置NexT主题的一些信息，然后在结合NexT主题的官网配置说明，就可以配置成自己想要的主题了。<br>&emsp;&emsp;说明提示一点，NexT主题V7.3.0版本后，将以前版本的用户自定义配置custom的功能的路径修改了，在主题配置文件中的custom_file_path:这一段有说明。Define custom file paths. Create your custom files in site directory <code>source/_data</code> and uncomment needed files below.</p><!--coding--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">├── .github                #github信息</span><br><span class="line">├── languages              #多语言</span><br><span class="line">|   ├── _en.yml            #默认语言</span><br><span class="line">|   └── zh-CN.yml          #简体中文</span><br><span class="line">|   └── zh-TW.yml          #繁体中文</span><br><span class="line">├── layout                 #布局，根目录下的*.swig文件是对主页，分页，存档等的控制</span><br><span class="line">|   ├── _custom            #可以自定义的模板，覆盖原有模板</span><br><span class="line">|   |   ├── head.swig      #文首样式</span><br><span class="line">|   |   ├── header.swig    #头部样式</span><br><span class="line">|   |   ├── sidebar.swig   #侧边栏样式</span><br><span class="line">|   ├── _macro             #可以自定义的模板，覆盖原有模板</span><br><span class="line">|   |   ├── post.swig      #文章模板</span><br><span class="line">|   |   ├── reward.swig    #打赏模板</span><br><span class="line">|   |   ├── sidebar.swig   #侧边栏模板</span><br><span class="line">|   ├── _partial           #局部的布局</span><br><span class="line">|   |   ├── head           #头部模板</span><br><span class="line">|   |   ├── search         #搜索模板</span><br><span class="line">|   |   ├── share          #分享模板</span><br><span class="line">|   ├── _script            #局部的布局</span><br><span class="line">|   ├── _third-party       #第三方模板</span><br><span class="line">|   ├── _layout.swig       #主页面模板</span><br><span class="line">|   ├── index.swig         #主页面模板</span><br><span class="line">|   ├── page               #页面模板</span><br><span class="line">|   └── tag.swig           #tag模板</span><br><span class="line">├── scripts                #script源码</span><br><span class="line">|   ├── tags               #tags的script源码</span><br><span class="line">|   ├── marge.js           #页面模板</span><br><span class="line">├── source                 #源码</span><br><span class="line">|   ├── css                #css源码</span><br><span class="line">|   |   ├── _common        #*.styl基础css</span><br><span class="line">|   |   ├── _custom        #*.styl自定义局部css</span><br><span class="line">|   |   └── _mixins        #mixins的css</span><br><span class="line">|   ├── fonts              #字体</span><br><span class="line">|   ├── images             #图片</span><br><span class="line">|   ├── js                 #javascript源代码</span><br><span class="line">|   └── lib                #引用库</span><br><span class="line">├── _config.yml            #主题配置文件</span><br><span class="line">└── README.md              #说明文件</span><br></pre></td></tr></table></figure><h4 id="配置GitHub的Page："><a href="#配置GitHub的Page：" class="headerlink" title="配置GitHub的Page："></a>配置GitHub的Page：</h4><p>&emsp;&emsp;首先要有一个GitHub账号，其次创建一个规定的GitHubPages主页仓库。然后就可以对站点的配置文件进行修改了，添加如下内容即可。而且不仅可以使用GitHub的Pages进行托管，也可以使用国内的Coding的Pages进行托管，同时也可以使用两者进行负载均衡，进行国内外的分流托管。</p><ul><li>修改配置文件_config：<br>在文件末尾的deploy添加内容：<!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    git@github.com:github_user/github_user.github.io.git</span><br><span class="line">    git@git.coding.net:coding_user/coding_user.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul><h4 id="写博客文章"><a href="#写博客文章" class="headerlink" title="写博客文章"></a>写博客文章</h4><p>&emsp;&emsp;编写自己的博客文章(采用markdown格式)，可以在终端采用Vim进行编写，也可以用Notepad++类似的编辑器编写，只要博客文章所在的路径是正确的，就可以被Hexo识别并读取到即可。</p><ul><li>在终端命令创建文章：<br>$ hexo new file_name <br></li><li>使用Vim等编辑器编辑文章</li></ul><h4 id="更新Hexo并上传"><a href="#更新Hexo并上传" class="headerlink" title="更新Hexo并上传"></a>更新Hexo并上传</h4><p>&emsp;&emsp;在更新上传之前可以在本地进行预览一下，即就是先清除clean、生成generate、然后start启动本地，在本地的4000端口查看即可。没有问题后，在进行上传deploy。当然这些常用的命令都是可以编写一个shell脚本进行的，因为每次都需要的，强烈建议写成一个shell脚本。</p><ul><li>在终端依次使用命令：<!--Code--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean   # 清理hexo的缓存静态文件资源</span><br><span class="line"><span class="meta">$</span> hexo g       # hexo生成静态资源</span><br><span class="line"><span class="meta">$</span> hexo s       # hexo启动本地访问</span><br><span class="line"><span class="meta">$</span> hexo d       # hexo上传指定的网站</span><br></pre></td></tr></table></figure></li></ul><h4 id="终端访问"><a href="#终端访问" class="headerlink" title="终端访问"></a>终端访问</h4><p>&emsp;&emsp;通过PC端浏览器或者智能终端浏览器访问即可。</p><ul><li>本地访问：<br><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAw" title="http://localhost:4000">http://localhost:4000<i class="fa fa-external-link"></i></span></li><li>访问地址：<br><a href="https://2694048168.github.io">https://2694048168.github.io</a></li></ul><h4 id="注意说明"><a href="#注意说明" class="headerlink" title="注意说明"></a>注意说明</h4><ul><li>在Windows系统下，终端采用GitBash即可</li><li>在Linux系统下，终端采用自带的Bash即可</li><li>Linux系统用户需要注意命令的权限问题</li><li>在Mac系统下，终端采用自带的Bash即可</li><li>整个操作过程全部都在blog目录下，注意操作命令的路径问题</li><li>博客文章格式采用Markdown</li><li>hexo s 命令是启动本地hexo，访问通过<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAw" title="http://localhost:4000">http://localhost:4000<i class="fa fa-external-link"></i></span></li><li>关于github的page详情查看：<span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==" title="https://pages.github.com/">github.pages<i class="fa fa-external-link"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲
      
    
    </summary>
    
      <category term="工具" scheme="https://2694048168.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="https://2694048168.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
